<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
  <title>Bastibe.de</title>
  <description>Bastibe.de</description>
  <link>http://bastibe.de/</link>
  <lastBuildDate>Mon, 30 May 2016 16:43:45 +0200</lastBuildDate>
<item>
  <title>Updating the Matplotlib Font Cache</title>
  <description><![CDATA[<p>
When publishing papers or articles, I want my plots to integrate with the text surrounding them. I want them to use the correct font size, and the correct font.
</p>

<p>
This is easy to do with Matplotlib:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> matplotlib
<span style="color: #111111;">matplotlib.rcParams</span>[<span style="color: #303030;">'font.size'</span>] = 12
<span style="color: #111111;">matplotlib.rcParams</span>[<span style="color: #303030;">'font.family'</span>] = <span style="color: #303030;">'Calibri'</span>
</pre>
</div>

<p>
However, sometimes, Matplotlib won't find the correct, even though it is clearly installed. This happens when Matplotlib's internal font cache is out of date.
</p>

<p>
To refresh the font cache, use
</p>

<div class="org-src-container">

<pre class="src src-python">matplotlib.font_manager._rebuild()
</pre>
</div>

<p>
Happy Plotting!
</p>
]]></description>
  <link>http://bastibe.de/2016-05-30-matplotlib-font-cache.html</link>
  <pubDate>Mon, 30 May 2016 16:30:00 +0200</pubDate>
</item>
<item>
  <title>The Style of Scientific Code</title>
  <description><![CDATA[<p>
What does quality code look like? One common school of thought focuses on small, descriptive functions that take few arguments. To quote from <a href="https://en.wikipedia.org/wiki/Robert_Cecil_Martin">Clean Code</a>: "The first rule of functions is that they should be small", on the order of less than ten lines. "Functions should not be large enough to hold nested structures". "The ideal number of arguments for a function is zero [, one, or two]. Three [or more] arguments should be avoided where possible".
</p>

<p>
A few years ago, when I was working mostly on user interaction and data management, all of this made sense to me. What is the overhead of a few function calls and class lookups here and there if it makes the code more readable? In other words: Readability counts, and is usually more important than performance.
</p>

<p>
But lately, I have come to struggle with these rules. I am now writing a lot of scientific code, where algorithms are intrinsically complex beyond the syntactic complexity of the code. How do you "Express yourself in code [instead of comments]", when that code only consists of linear algebra and matrix multiplications?
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">rectwin_spectrum</span>(angular_frequency, specsize):
    <span style="color: #303030;">"""The spectrum of a rectangular window. [...]"""</span>
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">In case of angular_frequency == 0, this will calculate NaN. Since</span>
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">this will be corrected later, suppress the warning.</span>
    <span style="color: #111111; font-weight: bold;">with</span> np.errstate(invalid=<span style="color: #303030;">'ignore'</span>):
        <span style="color: #111111;">spectrum</span> = ( np.exp(-1j*angular_frequency*(specsize-1)/2) *
                     np.sin(specsize*angular_frequency/2) /
                     np.sin(angular_frequency/2) )
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">since sin(x) == x for small x, the above expression</span>
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">evaluates to specsize for angular_frequency == 0.</span>
    <span style="color: #111111;">spectrum</span>[angular_frequency == 0.0] = specsize
    <span style="color: #111111; font-weight: bold;">return</span> spectrum
</pre>
</div>

<p>
A lot of my scientific code ends up quite compact like that. Maybe a hundred lines of dense numeric expressions, plus a few hundred lines of explanations and documentation. The point is, scientific code often does not decompose into easily understood extractable functions.
</p>

<p>
On a related issue, how do you avoid long argument lists in heavily parametrized equations? As Clean Code states, "when a function seems to need more than two or three arguments, it is likely that some of those arguments ought to be wrapped in a class of their own". However, in Matlab in particular, it is quite unusual to create small one-trick classes to encapsulate a few function arguments:
</p>

<div class="org-src-container">

<pre class="src src-octave"><span style="color: #111111; font-weight: bold;">classdef</span> SignalBlocks <span style="color: #111111; background-color: #fffff8;">&lt;</span> handle
    <span style="color: #111111; font-weight: bold;">properties</span>
        data
        samplerate
        blocksize
        hopsize
    <span style="color: #111111; font-weight: bold;">end</span>
    <span style="color: #111111; font-weight: bold;">properties</span> (Dependent)
        duration
    <span style="color: #111111; font-weight: bold;">end</span>
    <span style="color: #111111; font-weight: bold;">methods</span>
        <span style="color: #111111; font-weight: bold;">function</span> obj <span style="color: #111111; background-color: #fffff8;">=</span> <span style="color: #111111; text-decoration: underline;">SignalBlock</span>(data<span style="color: #111111; background-color: #fffff8;">,</span> samplerate<span style="color: #111111; background-color: #fffff8;">,</span> blocksize<span style="color: #111111; background-color: #fffff8;">,</span> hopsize)
            <span style="color: #303030; font-style: italic;">% blocksize and hopsize are optional. What a mess.</span>
            narginchk(2<span style="color: #111111; background-color: #fffff8;">,</span> 4)<span style="color: #111111; background-color: #fffff8;">;</span>
            obj.data <span style="color: #111111; background-color: #fffff8;">=</span> data<span style="color: #111111; background-color: #fffff8;">;</span>
            obj.samplerate <span style="color: #111111; background-color: #fffff8;">=</span> samplerate<span style="color: #111111; background-color: #fffff8;">;</span>
            <span style="color: #111111; font-weight: bold;">if</span> nargin <span style="color: #111111; background-color: #fffff8;">&gt;=</span> 3
                obj.blocksize <span style="color: #111111; background-color: #fffff8;">=</span> blocksize<span style="color: #111111; background-color: #fffff8;">;</span>
            <span style="color: #111111; font-weight: bold;">else</span>
                obj.blocksize <span style="color: #111111; background-color: #fffff8;">=</span> 2048<span style="color: #111111; background-color: #fffff8;">;</span>
            <span style="color: #111111; font-weight: bold;">end</span>
            <span style="color: #111111; font-weight: bold;">if</span> nargin <span style="color: #111111; background-color: #fffff8;">==</span> 4
                obj.hopsize <span style="color: #111111; background-color: #fffff8;">=</span> hopsize<span style="color: #111111; background-color: #fffff8;">;</span>
            <span style="color: #111111; font-weight: bold;">else</span>
                obj.hopsize <span style="color: #111111; background-color: #fffff8;">=</span> 1024<span style="color: #111111; background-color: #fffff8;">;</span>
            <span style="color: #111111; font-weight: bold;">end</span>
        <span style="color: #111111; font-weight: bold;">end</span>
        <span style="color: #111111; font-weight: bold;">function</span> time <span style="color: #111111; background-color: #fffff8;">=</span> <span style="color: #111111; text-decoration: underline;">get</span>.duration(obj)
            time <span style="color: #111111; background-color: #fffff8;">=</span> length(obj.data)<span style="color: #111111; background-color: #fffff8;">/</span>obj.samplerate<span style="color: #111111; background-color: #fffff8;">;</span>
        <span style="color: #111111; font-weight: bold;">end</span>
    <span style="color: #111111; font-weight: bold;">end</span>
<span style="color: #111111; font-weight: bold;">end</span>
</pre>
</div>

<p>
This is not just cumbersome to write and maintain, it is also slower than passing <code>data</code>, <code>samplerate</code>, <code>blocksize</code>, and <code>hopsize</code> to each function call individually (although the overhead has gotten considerably smaller in newer versions of Matlab). Additionally, there is often a large performance benefit of <i>not</i> extracting every function and <i>not</i> keeping intermediate values in variables. Thus, it's not just readability that is hard to maintain in scientific code. Performance is a problem, too.
</p>

<p>
The sad thing is, I don't know the answer to these questions. There have been a lot of discussions about coding style and code quality in our department lately, with the clear objective to clean up our code. But common code quality criteria don't seem to apply to scientific code all that well.
</p>

<p>
Do you have any idea how to progress from here?
</p>
]]></description>
  <link>http://bastibe.de/2016-03-13-code-quality-in-scientific-code.html</link>
  <pubDate>Sun, 13 Mar 2016 09:00:00 +0100</pubDate>
</item>
<item>
  <title>Toren</title>
  <description><![CDATA[<p>
I've been playing a lot of indie games lately. One of them has not been talked about much: <a href="http://toren-game.com/">Toren</a>. Toren is a platformer about a girl that has to climb a tower to defeat a dragon and revive her world. This is probably the least polished game I have played in a long time. Animations are janky, controls are imprecise and clunky, and there are loads of little glitches. Yet, I really enjoyed this.
</p>

<p>
There is something about this world that feels honest to me: As you climb the tower, the child grows from a toddler to an adolescent, and is gradually introduced to more and more mature concepts. I didn't understand much of the iconography of this game, but it felt oddly cathartic to climb this tower of life, and overcome it's challenges.
</p>

<p>
I particularly liked how death played such an integral role in this story and some of the puzzles. The tower is a monument to a dead people, and yet the story and game mechanics are as much about dying as they are about rebirth and not giving up. This is underlined by the wonderful art style of this game, which contrasts vivid colors with brooding, dark architecture.
</p>

<p>
At just about two hours, Toren is not a long game. Instead of exploring one particular game mechanic, it mixes it's game up every few minutes. Every sequence looks different and beautiful, and yet it manages to tell a cohesive and effective story. ★★★★☆
</p>
]]></description>
  <link>http://bastibe.de/2016-01-23-toren.html</link>
  <pubDate>Sat, 23 Jan 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Books of 2015</title>
  <description><![CDATA[
<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><a href="https://www.goodreads.com/book/show/8706185-among-others">Among Others</a>, by Jo Walton</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p style="float:left;margin:5px;" width="150px">
<img src="https://upload.wikimedia.org/wikipedia/en/d/d1/Among_Others_(Jo_Walton_novel).jpg" alt="Among_Others_(Jo_Walton_novel).jpg" style="float:left;margin:5px;" width="150px" />
I don't usually enjoy fantasy novels and their romantic escapism. I much prefer fascinating sci-fi thought experiments. But this book won all the most important awards, so I gave it a shot. What if random chance could be bent a little with creativity, the power of believing in something, and some mysticism? You end up with a world that is richer, more meaningful, and altogether more alive, if you just cared to observe and to appreciate it's beauty. Reading this book left me enchanted and more observant long after I put it down. What a wonderful book!
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><a href="https://www.goodreads.com/book/show/7073.A_Son_of_the_Circus">A Son of the Circus</a>, by John Irving</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p style="float:left;margin:5px;" width="150px">
<img src="https://upload.wikimedia.org/wikipedia/en/e/e7/ASonOfTheCircus.JPG" alt="ASonOfTheCircus.JPG" style="float:left;margin:5px;" width="150px" />
This is one of those books that was on my to-read list for months. It starts out as quirky and likeable as you would expect from John Irving. This time, we follow the tale of a Canadian/Indian doctor throughout his life, and his summer vacation in India. But this would not be John Irving if there weren't plenty of colourful characters, astute observations of human strangeness, and a meticulously crafted story. There is no scene in this book that does not serve a purpose, and so many moving parts my mind just boggles at the construction of it all. Yet at the same time, I was regularly laughing out loud. I loved every minute of this!
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><a href="https://www.goodreads.com/book/show/6597651-the-windup-girl">The Windup Girl</a>, by Paolo Bacigalupi</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p style="float:left;margin:5px;" width="150px">
<img src="https://upload.wikimedia.org/wikipedia/en/1/1f/Wind_up.jpg" alt="Wind_up.jpg" style="float:left;margin:5px;" width="150px" />
The whole world changed in the near future, when gasoline is a rare luxury, sea levels have risen and swallowed all the coastal cities, and man-made scourges have devastated most crops. And now it's not just humans that populate our urbanized world, but so too are our inventions, artificial humans called "windups" for their stutter-stop movements. But at the core, both humans and windups struggle for the same security, prosperity as ever. Such an inventive world, so much vivid creativity, social commentary, in this human struggle to not destroy ourselves.
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><a href="https://www.goodreads.com/book/show/629.Zen_and_the_Art_of_Motorcycle_Maintenance">Zen and the art of motorcycle maintenance</a>, by Robert Pirsig</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p style="float:left;margin:5px;" width="150px">
<img src="https://upload.wikimedia.org/wikipedia/en/8/85/Zen_motorcycle.jpg" alt="Zen_motorcycle.jpg" style="float:left;margin:5px;" width="150px" />
This is about equal parts a motorcycle journey of a father and his son across the US, and a dive into another man's discoveries of philosophy. To be honest, I liked this book more for it's character descriptions and travelling adventures than it's philosophy. I am really conflicted about putting this book on this list at all, but I kept thinking about this long after I finished reading it, so I guess this had a bigger influence on me than I realized.
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Nexus/Crux/Apex, Rad/Blue/Green Mars, The Martian, The Three-Body Problem</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
What happens when you take today's world, and add nanotech brain upgrades (Nexus/Crux/Apex), or strand a lone scientist on Mars (The Martian), or send a large number of people to found a new colony on Mars (Red/Blue/Green Mars), or suddenly make contact with Aliens (The Three-Body Problem)? This what-if is what Science Fiction does best: Take this little what-if, and spin a gripping yarn from that. These books inspired me, made me think, were incredibly thrilling, but they did not have a lasting impact. Still well worth a read if you like Science Fiction, though.
</p>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2016-01-06-books-of-2015.html</link>
  <pubDate>Wed, 06 Jan 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Calling Matlab from Python</title>
  <description><![CDATA[<p>
For my latest experiments, I needed to run both Python functions and Matlab functions as part of the same program. As I <a href="http://bastibe.de/2015-10-29-matlab-engine-leaks.html">noted earlier</a>, Matlab includes the <a href="http://mathworks.com/help/matlab/matlab-engine-for-python.html">Matlab Engine for Python</a> (MEfP), which can call Matlab functions from Python. Before I knew about this, I created <a href="https://github.com/bastibe/transplant">Transplant</a>, which does the very same thing. So, how do they compare?
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Usage</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
As it's name suggests, Matlab is a <b>mat</b>rix <b>lab</b>oratory, and matrices are the most important data type in Matlab. Since matrices don't exist in plain Python, the MEfP implements it's own as <code>matlab.double</code> et al., and you have to convert any data you want to pass to Matlab into one of those. In contrast, Transplant recognizes the fact that Python does in fact know a really good matrix engine called <a href="http://scipy.org/">Numpy</a>, and just uses that instead.
</p>

<pre class="example">
       Matlab Engine for Python        |              Transplant
---------------------------------------|---------------------------------------
import numpy                           | import numpy
import matlab                          | import transplant
import matlab.engine                   |
                                       |
eng = matlab.engine.start_matlab()     | eng = transplant.Matlab()
numpy_data = numpy.random.randn(100)   | numpy_data = numpy.random.randn(100)
list_data = numpy_data.tolist()        |
matlab_data = matlab.double(list_data) |
data_sum = eng.sum(matlab_data)        | data_sum = eng.sum(numpy_data)
</pre>

<p>
Aside from this difference, both libraries work almost identical. Even the handling of the number of output arguments is (accidentally) almost the same:
</p>

<pre class="example">
       Matlab Engine for Python        |              Transplant
---------------------------------------|---------------------------------------
eng.max(matlab_data)                   | eng.max(numpy_data)
&gt;&gt;&gt; 4.533                              | &gt;&gt;&gt; [4.533 537635]
eng.max(matlab_data, nargout=1)        | eng.max(numpy_data, nargout=1)
&gt;&gt;&gt; 4.533                              | &gt;&gt;&gt; 4.533
eng.max(matlab_data, nargout=2)        | eng.max(numpy_data, nargout=2)
&gt;&gt;&gt; (4.533, 537635.0)                  | &gt;&gt;&gt; [4.533 537635]
</pre>

<p>
Similarly, both libraries can interact with Matlab objects in Python, although the MEfP can't access object properties:
</p>

<pre class="example">
       Matlab Engine for Python        |              Transplant
---------------------------------------|---------------------------------------
f = eng.figure()                       | f = eng.figure()
eng.get(f, 'Position')                 | eng.get(f, 'Position')
&gt;&gt;&gt; matlab.double([[ ... ]])           | &gt;&gt;&gt; array([[ ... ]])
f.Position                             | f.Position
&gt;&gt;&gt; AttributeError                     | &gt;&gt;&gt; array([[ ... ]])
</pre>

<p>
There are a few small differences, though:
</p>

<ul class="org-ul">
<li>Function documentation in the MEfP is only available as <code>eng.help('funcname')</code>. Transplant will populate a function's <code>__doc__</code>, and thus documentation tools like IPython's <code>?</code> operator just work.</li>
<li>Transplant converts empty matrices to <code>None</code>, whereas the MEfP represents them as <code>matlab.double([])</code>.</li>
<li>Transplant represents <code>dict</code> as <code>containers.Map</code>, while the MEfP uses <code>struct</code> (the former is more correct, the latter arguable more useful).</li>
<li>If the MEfP does not know <code>nargout</code>, it assumes <code>nargout=1</code>. Transplant uses <code>nargout(func)</code> or returns whatever the function writes into <code>ans</code>.</li>
<li>The MEfP can't return non-scalar structs, such as the return value of <code>whos</code>. Transplant can do this.</li>
<li>The MEfP can't return anonymous functions, such as <code>eng.eval('@(x, y) x&gt;y')</code>. Transplant can do this.</li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Performance</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
The time to start a Matlab instance is shorter in MEfP (3.8 s) than in Transplant (6.1 s). But since you're doing this relatively seldomly, the difference typically doesn't matter too much.
</p>

<p>
More interesting is the time it takes to call a Matlab function from Python. Have a look:
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2015-11/execution%20time.png" alt="execution%20time.png" />
</p>
</div>

<p>
This is running <code>sum(randn(n,1))</code> from Transplant, the MEfP, and in Matlab itself. As you can see, the MEfP is a constant factor of about 1000 slower than Matlab. Transplant is a constant factor of about 100 slower than Matlab, but always takes at least 0.05 s.
</p>

<p>
There is a gap of about a factor of 10 between Transplant and the MEfP. In practice, this gap is highly significant! In my particular use case, I have <a href="http://www.ee.ic.ac.uk/hp/staff/dmb/voicebox/doc/voicebox/fxpefac.html">a function</a> that takes about one second of computation time for an audio signal of ten seconds (half a million values). When I call this function with Transplant, it takes about 1.3 seconds. With MEfP, it takes 4.5 seconds.
</p>

<p>
Transplant spends its time serializing the arguments to JSON, sending that JSON over <a href="http://zeromq.org/">ZeroMQ</a> to Matlab, and parsing the JSON there. Well, to be honest, only the parsing part takes any significant time, overall. While it might seem onerous to serialize everything to JSON, this architecture allows Transplant to run over a network connection.
</p>

<p>
It is a bit baffling to me that MEfP manages to be slower than <i>that</i>, despite being written in C. Looking at the number of function calls in the profiler, the MEfP calls 25 functions (!) on each value (!!) of the input data. This is a shockingly inefficient way of doing things.
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">TL;DR</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
It used to be very difficult to work in a mixed-language environment, particularly with one of those languages being Matlab. Nowadays, this has thankfully gotten much easier. Even Mathworks themselves have stepped up their game, and can interact with Python, C, Java, and FORTRAN. But their interface to Python does leave something to be desired, and there are better alternatives available.
</p>

<p>
If you want to try Transplant, just head over to <a href="https://github.com/bastibe/transplant">Github</a> and use it. If you find any bugs, feature requests, or improvements, please let me know in the Github issues.
</p>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2015-11-03-matlab-engine-performance.html</link>
  <pubDate>Tue, 03 Nov 2015 15:05:00 +0100</pubDate>
</item>
<item>
  <title>Massive Memory Leak in the Matlab Engine for Python</title>
  <description><![CDATA[<p>
As of Matlab 2014b, Matlab includes a <a href="http://mathworks.com/help/matlab/matlab-engine-for-python.html">Python module</a> for calling Matlab code from Python. This is how you use it:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> numpy
<span style="color: #111111; font-weight: bold;">import</span> matlab
<span style="color: #111111; font-weight: bold;">import</span> matlab.engine

<span style="color: #111111;">eng</span> = matlab.engine.start_matlab()
<span style="color: #111111;">random_data</span> = numpy.random.randn(100)
<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">convert Numpy data to Matlab:</span>
<span style="color: #111111;">matlab_data</span> = matlab.double(random_data.tolist())
<span style="color: #111111;">data_sum</span> = eng.<span style="color: #111111; background-color: #fffff8;">sum</span>(matlab_data)
</pre>
</div>

<p>
You can call any Matlab function on <code>eng</code>, and you can access any Matlab workspace variable in <code>eng.workspace</code>. As you can see, the Matlab Engine is not Numpy-aware, and you have to convert all your Numpy data to Matlab <code>double</code> before you can call Matlab functions with it. Still, it works pretty well.
</p>

<p>
Recently, I ran a rather large experiment set, where I had a set of four functions, two in Matlab, two in Python, and called each of these functions a few thousand times with a bunch of different data to see how they performed.
</p>

<p>
While doing that I noticed that my Python processes were growing larger and larger, until they consumed all my memory and a sizeable chunk of my swap as well. I couldn't find any reason for this. None of my Python code cached anything, and the sum total of all global variables did not amount to anything substantial.
</p>

<p>
Enter <a href="http://pythonhosted.org/Pympler/index.html">Pympler</a>, a memory analyzer for Python. Pympler is an amazing library for introspecting your program's memory. Among its many features, it can list the biggest objects in your running program:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> pympler <span style="color: #111111; font-weight: bold;">import</span> muppy, summary
summary.print_(summary.summarize(muppy.get_objects()))
</pre>
</div>

<pre class="example">
                                      types |   # objects |   total size
=========================================== | =========== | ============
                        &lt;class 'array.array |        1076 |      2.77 GB
                                &lt;class 'str |       42839 |      7.65 MB
                               &lt;class 'dict |        8604 |      5.43 MB
                      &lt;class 'numpy.ndarray |          48 |      3.16 MB
                               &lt;class 'code |       14113 |      1.94 MB
                               &lt;class 'type |        1557 |      1.62 MB
                               &lt;class 'list |        3158 |      1.38 MB
                                &lt;class 'set |        1265 |    529.72 KB
                              &lt;class 'tuple |        5129 |    336.98 KB
                              &lt;class 'bytes |        2413 |    219.48 KB
                            &lt;class 'weakref |        2654 |    207.34 KB
            &lt;class 'collections.OrderedDict |          65 |    149.85 KB
                 &lt;class 'wrapper_descriptor |        1676 |    130.94 KB
  &lt;class 'traitlets.traitlets.MetaHasTraits |         107 |    123.55 KB
                  &lt;class 'getset_descriptor |        1738 |    122.20 KB
</pre>

<p>
Now that is interesting. Apparently, I was lugging around close to three gigabytes worth of bare-Python <code>array.array</code>. And these are clearly not Numpy arrays, since those would show up as <code>numpy.ndarray</code>. But I couldn't find any of these objects in my workspace.
</p>

<p>
So let's get a reference to one of these objects, and see who they belong to. This can also be done with Pympler, but I prefer the way <a href="http://mg.pov.lt/objgraph/">objgraph</a> does it:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> array
<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">get a list of all objects known to Python:</span>
<span style="color: #111111;">all_objects</span> = muppy.get_objects()
<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">sort out only `array.array` instances:</span>
<span style="color: #111111;">all_arrays</span> = [obj <span style="color: #111111; font-weight: bold;">for</span> obj <span style="color: #111111; font-weight: bold;">in</span> all_objects <span style="color: #111111; font-weight: bold;">if</span> <span style="color: #111111; background-color: #fffff8;">isinstance</span>(obj, array.array)]

<span style="color: #111111; font-weight: bold;">import</span> objgraph
objgraph.show_backrefs(all_arrays[0], filename=<span style="color: #303030;">'array.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="http://bastibe.de/static/2015-10/array.png" alt="array.png" />
</p>
</div>

<p>
It seems that the <code>array.array</code> object is part of a <code>matlab.double</code> instance which is not referenced from anywhere but <code>all_objects</code>. A memory leak.
</p>

<p>
After a bit of experimentation, I found the culprit. To illustrate, here's an example: The function <code>leak</code> passes some data to Matlab, and calculates a float. Since the variables are not used outside of <code>leak</code>, and the function does not return anything, all variables within the function should get deallocated when <code>leak</code> returns.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">leak</span>():
    <span style="color: #111111;">test_data</span> = numpy.zeros(1024*1024)
    <span style="color: #111111;">matlab_data</span> = matlab.double(test_data.tolist())
    eng.<span style="color: #111111; background-color: #fffff8;">sum</span>(matlab_data)
</pre>
</div>

<p>
Pympler has another great feature that can track allocations. The <code>SummaryTracker</code> will track and display any allocations between calls to <code>print_diff()</code>. This is very useful to see how much memory was used during the call to <code>leak</code>:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> pympler <span style="color: #111111; font-weight: bold;">import</span> tracker
<span style="color: #111111;">tr</span> = tracker.SummaryTracker()
tr.print_diff()
leak()
tr.print_diff()
</pre>
</div>

<pre class="example">
                     types |   # objects |   total size
========================== | =========== | ============
       &lt;class 'array.array |           1 |      8.00 MB
...
</pre>

<p>
And there you have it. Note that this leak is not the Numpy array <code>test_data</code> and it is not the matlab array <code>matlab_data</code>. Both of these are garbage collected correctly. But <b>the Matlab Engine for Python will leak any data you pass to a Matlab function</b>.
</p>

<p>
This data is not referenced from anywhere within Python, and is counted as <i>leaked</i> by <code>objgraph</code>. In other words, the C code inside the Matlab Engine for Python copies all passed data into it's internal memory, but never frees that memory. Not even if you quit the Matlab Engine, or <code>del</code> all Python references to it. Your only option is to restart Python.
</p>

<p>
<b>Postscriptum</b>
</p>

<p>
I since posted a bug report on Mathworks, and received a patch that fixes the problem. Additionally, Mathworks said that the problem only occurs on Linux.
</p>
]]></description>
  <link>http://bastibe.de/2015-10-29-matlab-engine-leaks.html</link>
  <pubDate>Thu, 29 Oct 2015 12:18:00 +0100</pubDate>
</item>
<item>
  <title>OS X Finder Woes</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2015-10/Mac.png" alt="Mac.png" />
</p>
</div>

<p>
The Mac. It used to be the most streamlined, thought-through general computing device on the market.
</p>

<p>
Even it's file management used to be top-notch. There were many cool little touches. One particularly useful feature was the <i>Proxy Icon</i>&#x2013;if a window displayed a file's content, that file's icon would show up in the window's title. And you could drag that icon directly onto a thumb drive or email, without having to use the Finder. But the Finder, too, had many neat little features. I loved the fact that when you renamed a file in an alphabetically sorted file list, Finder would not immediately re-shuffle it to its new location, but would wait half a second before doing so. When renaming multiple files, this was really useful, since you could go through them one by one and rename them, simply by pressing arrow keys and return.
</p>

<p>
But as you might have guessed from my use of the past tense, these golden days are gone. The Finder used to know a JPEG from a ZIP regardless of file extension. Now it doesn't any more. The Proxy Icon is still draggable, but it will create an alias instead of a copy&#x2013;perfectly useless on a thumb drive or in an email.
</p>

<p>
And with the newest version of OS X, El Capitan, they finally blew it for me. Before, even though the Finder inexplicably never had the ability to cut and paste files, you could always install programs like <a href="http://totalfinder.binaryage.com/">TotalFinder</a> to fix that. Not so with El Capitan. The Finder now is holy land, and can not be touched any more by third parties. So no more cut and paste, no more un-hiding system files. No more side-by-side Finder tabs. And brand new with El Capitan as well: No more waiting after renaming. Now, when you rename a file, it is immediately re-sorted to its new position, thus making renaming multiple files terribly inconvenient.
</p>

<p>
So, good bye OS X. I updated my work laptop first, and I regret it. I never regretted an OS X update before. My home machine is not going to get the update. It is honestly sad to see my once-beloved Mac platform becoming worse and worse and worse with every new release.
</p>
]]></description>
  <link>http://bastibe.de/2015-10-16-finder-woes.html</link>
  <pubDate>Fri, 16 Oct 2015 09:51:00 +0200</pubDate>
</item>
<item>
  <title>Changing File Creation Dates in OSX</title>
  <description><![CDATA[<p>
On my last vacation, I have taken a bunch of pictures, and a bunch of video. The problem is, I hadn't used the video camera in a long time, and it believed that all it's videos were taken on the first of January 2012. So in order for the pictures to show up correctly in my picture library, I wanted to correct that.
</p>

<p>
For images, this is relatively easy: Most picture libraries support some kind of bulk date changes, and there are a bunch of <a href="http://www.sentex.net/~mwandel/jhead/">command</a> <a href="http://owl.phy.queensu.ca/~phil/exiftool/">line</a> <a href="http://www.exiv2.org/#util">utilities</a> that can do it, too. But none of these tools work for video (exiftool claims be able to do that, but I couldn't get it to work).
</p>

<p>
So instead, I went about to change the file creation date of the actual video files. And it turns out, this is surprisingly hard! The thing is, most Unix systems (a Mac is technically a Unix system) don't even know the concept of a file creation date. Thus, most Unix utilities, including most programming languages, don't know how to deal with that, either.
</p>

<p>
If you have XCode installed, this will come with <code>SetFile</code>, a command line utility that can change file creation dates. Note that <code>SetFile</code> can change <i>either</i> the file creation date, <i>or</i> the file modification date, but not both at the same time, as any normal Unix utility would. Also note that <code>SetFile</code> expects dates in American notation, which is about as nonsensical as date formats come.
</p>

<p>
Anyway, here's a small Python script that changes the file creation date (but not the time) of a bunch of video files:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> os.path
<span style="color: #111111; font-weight: bold;">import</span> os
<span style="color: #111111; font-weight: bold;">import</span> datetime
<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">I want to change the dates on the files GOPR0246.MP4-GOPR0264.MP4</span>
<span style="color: #111111; font-weight: bold;">for</span> index <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">range</span>(426, 465):
    <span style="color: #111111;">filename</span> = <span style="color: #303030;">'GOPR0{}.MP4'</span>.<span style="color: #111111; background-color: #fffff8;">format</span>(index)
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">extract old date:</span>
    <span style="color: #111111;">date</span> = datetime.datetime.fromtimestamp(os.path.getctime(filename))
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">create a new date with the same time, but on 2015-08-22</span>
    <span style="color: #111111;">new_date</span> = datetime.datetime(2015,  8, 22, date.hour, date.minute, date.second)
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">set the file creation date with the "-d" switch, which presumably stands for "dodification"</span>
    os.system(<span style="color: #303030;">'SetFile -d "{}" {}'</span>.<span style="color: #111111; background-color: #fffff8;">format</span>(new_date.strftime(<span style="color: #303030;">'%m/%d/%Y %H:%M:%S'</span>), filename))
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">set the file modification date with the "-m" switch</span>
    os.system(<span style="color: #303030;">'SetFile -m "{}" {}'</span>.<span style="color: #111111; background-color: #fffff8;">format</span>(new_date.strftime(<span style="color: #303030;">'%m/%d/%Y %H:%M:%S'</span>), filename))
</pre>
</div>
]]></description>
  <link>http://bastibe.de/2015-10-03-changing-file-creation-dates.html</link>
  <pubDate>Sat, 03 Oct 2015 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Numpy Broadcasting Rules</title>
  <description><![CDATA[<p>
They say that all arithmetic operations in Numpy behave like their element-wise cousins in Matlab. This is wrong, and seriously tripped me up last week.
</p>

<p>
In particular, this is what happens when you multiply an array with a matrix<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> in Numpy:
</p>

<pre class="example">
     [[  1],           [[1, 2, 3],       [[ 1,    2,   3],
      [ 10],       *    [4, 5, 6],   =    [ 40,  50,  60],
      [100]]            [7, 8, 9]]        [700, 800, 900]]

 [  1,  10, 100]       [[1, 2, 3],       [[  1,  20, 300],
        OR         *    [4, 5, 6],   =    [  4,  50, 600],
[[  1,  10, 100]]       [7, 8, 9]]        [  7,  80, 900]]
</pre>

<p>
They behave as if each row was evaluated separately, and singular dimensions are repeated where necessary. It helps to think about them as row-wise, instead of element-wise. This is particularly important in the second example, where the <i>whole</i> 1d-array is multiplied with <i>every row</i> of the 2d-array.
</p>

<p>
Note that this is <i>not</i> equivalent to multiplying every <i>element</i> as in <code>[a[n]*b[n] for n in range(len(a))]</code>. I guess that's why this is called <i>broadcasting</i>, and not <i>element-wise</i>.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
"matrix" here refers to a 2-d <code>numpy.array</code>. There is also a <code>numpy.matrix</code>, where multiplication is matrix multiplication, but this is not what I'm talking about.
</p></div></div>


</div>
</div>]]></description>
  <link>http://bastibe.de/2015-09-29-numpy-broadcasting-rules.html</link>
  <pubDate>Tue, 29 Sep 2015 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Python Numeric Performance</title>
  <description><![CDATA[<p>
Recently, I was working on a dynamic programming algorithm that involves a lot of number crunching in nested loops. The algorithm looks like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">y_change_probability_python</span>(oct_per_sec):
    <span style="color: #303030;">""" ... """</span>
    <span style="color: #111111;">b</span> = 1.781
    <span style="color: #111111;">mu</span> = -0.301
    <span style="color: #111111; font-weight: bold;">return</span> 1/(2*b)*math.exp(-<span style="color: #111111; background-color: #fffff8;">abs</span>(oct_per_sec-mu)/b)

<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">y_idx_range_python</span>(y_idx, max_y_factor, height):
    <span style="color: #303030;">""" ... """</span>
    <span style="color: #111111;">y</span> = (y_idx/height)*(max_y-min_y)+min_y
    <span style="color: #111111;">y_lo</span> = <span style="color: #111111; background-color: #fffff8;">max</span>(y/max_y_factor, min_y)
    <span style="color: #111111;">y_hi</span> = <span style="color: #111111; background-color: #fffff8;">min</span>(y*max_y_factor, max_y)
    <span style="color: #111111;">y_lo_idx</span> = <span style="color: #111111; background-color: #fffff8;">int</span>((y_lo-min_y)/(max_y-min_y)*height)
    <span style="color: #111111;">y_hi_idx</span> = <span style="color: #111111; background-color: #fffff8;">int</span>((y_hi-min_y)/(max_y-min_y)*height)
    <span style="color: #111111; font-weight: bold;">return</span> y_lo_idx, y_hi_idx

<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">find_tracks_python</span>(cost_matrix, delta_x):
    <span style="color: #303030;">""" ... """</span>
    <span style="color: #111111;">tracks</span> = np.zeros(correlogram.shape, dtype=np.int64)
    <span style="color: #111111;">cum_cost</span> = np.zeros(correlogram.shape)

    <span style="color: #111111;">max_y_factor</span> = (2**5)**(delta_x)
    <span style="color: #111111;">height</span> = correlogram.shape[1]

    <span style="color: #111111;">probabilities</span> = np.empty((height, height))
    <span style="color: #111111; font-weight: bold;">for</span> y_idx <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">range</span>(height):
        <span style="color: #111111;">y</span> = (y_idx/height)*(max_y-min_y)+min_y
        <span style="color: #111111; font-weight: bold;">for</span> y_pre_idx <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">range</span>(*y_idx_range_numba(y_idx, max_y_factor, height)):
            <span style="color: #111111;">y_pre</span> = (y_pre_idx/height)*(max_y-min_y)+min_y
            <span style="color: #111111;">doubles_per_x</span> = math.log2((y/y_pre)**(1/delta_x))
            <span style="color: #111111;">probabilities</span>[y_idx, y_pre_idx] = y_change_probability_numba(doubles_per_x)

    <span style="color: #111111; font-weight: bold;">for</span> x_idx, cost_column <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">enumerate</span>(cost_matrix):
        <span style="color: #111111; font-weight: bold;">if</span> x_idx == 0:
            <span style="color: #111111;">cum_cost</span>[x_idx] = cost_column
            <span style="color: #111111; font-weight: bold;">continue</span>
        <span style="color: #111111; font-weight: bold;">for</span> y_idx, cost <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">enumerate</span>(cost_column):
            <span style="color: #111111; font-weight: bold;">for</span> y_pre_idx <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">range</span>(*y_idx_range_numba(y_idx, max_y_factor, height)):
                <span style="color: #111111;">weighted_cum_cost</span> = cum_cost[x_idx-1, y_pre_idx] + cost*probabilities[y_idx, y_pre_idx]
                <span style="color: #111111; font-weight: bold;">if</span> weighted_cum_cost &gt; cum_cost[x_idx, y_idx]:
                    <span style="color: #111111;">cum_cost</span>[x_idx, y_idx] = weighted_cum_cost
                    <span style="color: #111111;">tracks</span>[x_idx, y_idx] = y_pre_idx
            <span style="color: #111111;">cum_cost</span>[x_idx, y_idx] = cum_cost[x_idx-1, tracks[x_idx, y_idx]] + cost

    <span style="color: #111111; font-weight: bold;">return</span> tracks, cum_cost
</pre>
</div>

<p>
I'm not going into the details of what this algorithm does, but note that it iterates over every column and row of the matrix <code>cost_matrix</code>, and then iterates over another range <code>previous_y_range</code> for each of the values in <code>cost_matrix</code>. On the way, it does a lot of basic arithmetic and some algebra.
</p>

<p>
The problem is, this is very slow. For a \(90 \times 200\) <code>cost_matrix</code>, this takes about 260 ms. Lots of loops? Lots of simple mathematics? Slow? That sounds like a perfect match for <a href="http://www.numpy.org/">Numpy</a>!
</p>

<p>
If you can express your code in terms of linear algebra, Numpy will execute them in highly-optimized C code. The problem is, translating loops into linear algebra is not always easy. In this case, it took some effort:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">y_change_probability_numpy</span>(doubles_per_x):
    <span style="color: #303030;">""" ... """</span>
    <span style="color: #111111;">b</span> = 1.781
    <span style="color: #111111;">mu</span> = -0.301
    <span style="color: #111111; font-weight: bold;">return</span> 1/(2*b)*np.exp(-np.<span style="color: #111111; background-color: #fffff8;">abs</span>(doubles_per_x-mu)/b)

<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">find_frequency_tracks_numpy</span>(cost_matrix, delta_x):
    <span style="color: #303030;">""" ... """</span>
    <span style="color: #111111;">tracks</span> = np.zeros(cost_matrix.shape, dtype=np.<span style="color: #111111; background-color: #fffff8;">int</span>)
    <span style="color: #111111;">cum_cost</span> = np.zeros(cost_matrix.shape)

    <span style="color: #111111;">max_y_factor</span> = (2**5)**(delta_t) <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">allow at most 5 octaves per second (3 sigma)</span>
    <span style="color: #111111;">height</span> = cost_matrix.shape[1]

    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">pre-allocate probabilities matrix as minus infinity. This matrix</span>
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">will be sparsely filled with positive probability values, and</span>
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">empty values will have minus infinite probability.</span>
    <span style="color: #111111;">probabilities</span> = -np.ones((height, height))*np.inf
    <span style="color: #111111; font-weight: bold;">for</span> y_idx <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">range</span>(probabilities.shape[0]):
        <span style="color: #111111;">y</span> = (y_idx/height)*(max_y-min_y)+min_y
        <span style="color: #111111;">y_pre_idx</span> = np.arange(<span style="color: #111111; background-color: #fffff8;">int</span>((<span style="color: #111111; background-color: #fffff8;">max</span>(y/max_y_factor, min_y)-min_y)/(max_y-min_y)*height),
                              <span style="color: #111111; background-color: #fffff8;">int</span>((<span style="color: #111111; background-color: #fffff8;">min</span>(y*max_y_factor, max_y)-min_y)/(max_y-min_y)*height))
        <span style="color: #111111;">y_pre</span> = (y_pre_idx/height)*(max_y-min_y)+min_y
        <span style="color: #111111;">doubles_per_x</span> = np.log2((y/y_pre)**(1/delta_x))
        <span style="color: #111111;">probabilities</span>[y_idx, y_pre_idx] = y_change_probability(doubles_per_x)

    <span style="color: #111111;">cum_cost</span>[0] = cost_matrix[0]
    <span style="color: #111111; font-weight: bold;">for</span> x_idx <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">range</span>(1, <span style="color: #111111; background-color: #fffff8;">len</span>(cost_matrix)):
        <span style="color: #111111;">cost_column</span> = cost_matrix[x_idx:x_idx+1] <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">extract cost_column as 2d-vector!</span>
        <span style="color: #111111;">weighted_cum_cost</span> = cum_cost[x_idx-1] + cost_column.T*probabilities
        <span style="color: #111111;">tracks</span>[x_idx] = np.argmax(weighted_cum_cost, axis=1)
        <span style="color: #111111;">cum_cost</span>[x_idx] = cum_cost[x_idx-1, tracks[x_idx]] + cost_column

    <span style="color: #111111; font-weight: bold;">return</span> tracks, cum_corrs
</pre>
</div>

<p>
This code does not look much like the original, but calculates exactly the same thing. This takes about 15 ms for a \(90 \times 200\) <code>cost_matrix</code>, which is about 17 times faster than the original code! Yay Numpy! And furthermore, this code is arguably more readable than the original, since it is written at a higher level of abstraction.
</p>

<p>
Another avenue for performance optimization is <a href="http://numba.pydata.org/">Numba</a>. Numba applies dark and powerful magic to compile humble Python functions into blazingly fast machine code. It is proper magic, if you ask me. Simply add an innocuous little decorator to your functions, and let Numba do it's thing. If all goes well, your code will work just as before, except with unheard-of performance:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; text-decoration: underline;">@jit</span>(numba.float64(numba.float64), nopython=<span style="color: #111111;">True</span>)
<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">y_change_probability_numba</span>(doubles_per_x):
    ...

<span style="color: #111111; text-decoration: underline;">@jit</span>((numba.int64, numba.float64, numba.int64), nopython=<span style="color: #111111;">True</span>)
<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">y_idx_range_numba</span>(y_idx, max_y_factor, height):
    ...

<span style="color: #111111; text-decoration: underline;">@jit</span>((numba.float64[:,:], numba.float64), nopython=<span style="color: #111111;">True</span>)
<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">find_tracks_numba</span>(cost_matrix, delta_t):
    ...
</pre>
</div>

<p>
However, Numba is no silver bullet, and does not support all of Python yet. In the present case, it is missing support for <code>enumerate</code> for Numpy matrices. Thus, I had to rewrite the first two loops like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">python version</span>
<span style="color: #111111; font-weight: bold;">for</span> x_idx, cost_column <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">enumerate</span>(cost_matrix):
    ...

<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">numba version</span>
<span style="color: #111111; font-weight: bold;">for</span> x_idx <span style="color: #111111; font-weight: bold;">in</span> <span style="color: #111111; background-color: #fffff8;">range</span>(<span style="color: #111111; background-color: #fffff8;">len</span>(cost_matrix)):
    <span style="color: #111111;">cost_column</span> = cost_matrix[x_idx]
    ...
</pre>
</div>

<p>
Another area that proved problematic is N-D slice writing. Instead of using expressions like <code>m1[x,y:y+3] = m2</code>, you have to write <code>for idx in range(3): m1[x,y+idx] = m2[idx]</code>. Not a difficult transformation, but it basically forced me to unroll all the nice vectorized code of the Numpy version back to their original pure-Python form. That said, Numba is getting better and better, and many constructs that used to be uncompilable (<code>yield</code>) are not a problem any more.
</p>

<p>
Anyway, with that done, the above code went down from 260 ms to 2.2 ms. This is a 120-fold increase in performance, and still seven times faster than Numpy, with minimal code changes. This is proper magic!
</p>

<p>
So why wouldn't you just always use Numba? After all, when it comes down to raw performance, Numba is the clear winner. The big difference between performance optimization using Numpy and Numba is that properly vectorizing your code for Numpy often reveals simplifications and abstractions that make it easier to reason about your code. Numpy forces you to think in terms of vectors, matrices, and linear algebra, and this often makes your code <i>more beautiful</i>. Numba on the other hand often requires you to make your code <i>less beautiful</i> to conform to it's subset of compilable Python.
</p>
]]></description>
  <link>http://bastibe.de/2015-09-28-python-performance.html</link>
  <pubDate>Mon, 28 Sep 2015 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Matlab and Audio Files</title>
  <description><![CDATA[<p>
So I wanted to work with audio files in Matlab. In the past, Matlab could only do this with <code>auread</code> and <code>wavread</code>, which can read <i>*.au</i> and <i>*.wav</i> files. With 2012b, Matlab introduced <a href="http://mathworks.com/help/matlab/ref/audioread.html"><code>audioread</code></a>, which claims to support <i>*.wav</i>, <i>*.ogg</i>, <i>*.flac</i>, <i>*.au</i>, <i>*.mp3</i>, and <i>*.mp4</i>, and simultaneously deprecated <code>auread</code> and <code>wavread</code>.
</p>

<p>
Of these file formats, only <i>*.au</i> is capable of storing more than 4 Gb of audio data. But the documentation is actually wrong: <code>audioread</code> can <i>actually</i> read more data formats than documented: it reads <i>*.w64</i>, <i>*.rf64</i>, and <i>*.caf</i> no problem. And these can store more than 4 Gb as well.
</p>

<p>
It's just that, while <code>audioread</code> supports all of these nice file formats, <a href="http://mathworks.com/help/matlab/ref/audiowrite.html"><code>audiowrite</code></a> is more limited, and only supports <i>*.wav</i>, <i>*.ogg</i>, <i>*.flac</i>, and <i>*.mp4</i>. And it does not support any undocumented formats, either. So it seems that there is no way of writing files larger than 4 Gb. But for the time being, <code>auwrite</code> is still available, even though deprecated. I tried it, though, and it didn't finish writing 4.8 Gb in half an hour.
</p>

<p>
In other words, Matlab is incapable of writing audio files larger than 4 Gb. It just can't do it.
</p>
]]></description>
  <link>http://bastibe.de/2015-04-22-matlab-and-audio-files.html</link>
  <pubDate>Wed, 22 Apr 2015 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Unicode and Matlab on the command line</title>
  <description><![CDATA[<p>
As per the latest <a href="http://stackoverflow.com/research/developer-survey-2015#techSuper-dreaded">Stackoverflow Developer Survey</a>, Matlab is one of <i>the</i> most dreaded tools out there. I run into Matlab-related trouble daily. In all honesty, I have never seen a programming language as user-hostile and as badly designed as this.
</p>

<p>
So here is today's problem: When run from the command line, Matlab does not render unicode characters (on OSX).
</p>

<p>
I say "(on OSX)", because on Windows, it does not print a damn thing. Nope, no <code>disp</code> output for Windows users.
</p>

<p>
More analysis: It's not that Matlab does not render unicode characters at all when run from the command line. Instead, it renders them as <code>0x1a</code> aka <code>SUB</code> aka <i>substitute character</i>. In other words, it tries to render unicode as ASCII (which doesn't work), and then replaces all non-ASCII characters with <code>SUB</code>. This is actually reasonable if Matlab were running on a machine that can't handle unicode. This is not a correct assessment of post-90s Macs, though.
</p>

<p>
To see why Matlab would do such a dastardly deed, you can use <code>feature('locale')</code> to get information about the encoding Matlab uses. On Windows and OS X, this defaults to either <code>ISO-8859-1</code> (when your locale is pure <code>de_DE</code> or <code>en_US</code>) or <code>US-ASCII</code>, if it is something impure. In my case, German dates but English text. Because <code>US-ASCII</code> is obviously the most all-encompassing choice for such mixed-languages environments.
</p>

<p>
But luckily, there is help. Matlab has a widely documented (not) and easily discoverable (not) configuration option to change this: To change Matlab's encoding settings, edit <code>%MATLABROOT%/bin/lcdata.xml</code>, and look for the entry for your locale. For me, this is one of
</p>

<div class="org-src-container">

<pre class="src src-xml">&lt;<span style="color: #111111; text-decoration: underline;">locale</span> <span style="color: #111111;">name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">de_DE</span><span style="color: #303030;">"</span> <span style="color: #111111;">encoding</span>=<span style="color: #303030;">"</span><span style="color: #303030;">ISO-8859-1</span><span style="color: #303030;">"</span> <span style="color: #111111;">xpg_name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">de_DE.ISO8859-1</span><span style="color: #303030;">"</span>&gt; ...
&lt;<span style="color: #111111; text-decoration: underline;">locale</span> <span style="color: #111111;">name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">en_US</span><span style="color: #303030;">"</span> <span style="color: #111111;">encoding</span>=<span style="color: #303030;">"</span><span style="color: #303030;">ISO-8859-1</span><span style="color: #303030;">"</span> <span style="color: #111111;">xpg_name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">en_US.ISO8859-1</span><span style="color: #303030;">"</span>&gt; ...
</pre>
</div>

<p>
In order to make Matlab's encoding default to UTF-8, change the entry for your locale to
</p>

<div class="org-src-container">

<pre class="src src-xml">&lt;<span style="color: #111111; text-decoration: underline;">locale</span> <span style="color: #111111;">name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">de_DE</span><span style="color: #303030;">"</span> <span style="color: #111111;">encoding</span>=<span style="color: #303030;">"</span><span style="color: #303030;">UTF-8</span><span style="color: #303030;">"</span> <span style="color: #111111;">xpg_name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">de_DE.UTF-8</span><span style="color: #303030;">"</span>&gt; ...
&lt;<span style="color: #111111; text-decoration: underline;">locale</span> <span style="color: #111111;">name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">en_US</span><span style="color: #303030;">"</span> <span style="color: #111111;">encoding</span>=<span style="color: #303030;">"</span><span style="color: #303030;">UTF-8</span><span style="color: #303030;">"</span> <span style="color: #111111;">xpg_name</span>=<span style="color: #303030;">"</span><span style="color: #303030;">en_US.UTF-8</span><span style="color: #303030;">"</span>&gt; ...
</pre>
</div>

<p>
With that, Matlab will print UTF-8 to the terminal.
</p>

<p>
You still can't type unicode characters to the command prompt, of course. But who would want that anyway, I dare ask. Of course, what with Matlab being basically free, and frequently updated, we can forgive such foibles easily&#x2026;
</p>
]]></description>
  <link>http://bastibe.de/2015-04-15-unicode-in-the-matlab-command-line.html</link>
  <pubDate>Wed, 15 Apr 2015 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Decisions in Pillars of Eternity</title>
  <description><![CDATA[<p>
Early on in <a href="https://en.wikipedia.org/wiki/Pillars_of_Eternity">Pillars of Eternity</a>, you are tasked to kill one of two characters: Either you kill King Rethoric, who executed many innocent people, or you kill Rolsc, the leader of the rebellion. This is an interesting moral choice, but it is also profoundly sad that the game presents killing either of them as the only resolution to this conflict.
</p>

<p>
It got me thinking. In the real world, I would not consider killing to be an option, ever. But in the game, you have to play by the game's rules. And furthermore, you can't just walk away and have the two characters duke it out amongst themselves: The whole game is built around the player, and without the player's interaction, the game world doesn't evolve.
</p>

<p>
Thus, this conflict won't resolve itself, and the player is forced to kill. I wish there were a diplomatic option, or a way of fixing the underlying problem so the two characters are not at odds any more. I fear how these choices in video games might influence our perceptions of everyday choices, and crave for video games that offer interesting choices that do not revolve around murder.
</p>

<p>
From what I hear, Planescape Torment did offer such choices. As did many of <a href="https://en.wikipedia.org/wiki/Gone_Home">my</a> <a href="https://en.wikipedia.org/wiki/The_Stanley_Parable">favorite</a> <a href="https://en.wikipedia.org/wiki/X-Plane_%28simulator%29">games</a> <a href="https://en.wikipedia.org/wiki/Civilization_V">of</a> <a href="https://en.wikipedia.org/wiki/The_Wolf_Among_Us">all</a> <a href="https://en.wikipedia.org/wiki/The_Witcher_%28video_game%29">times</a>.
</p>
]]></description>
  <link>http://bastibe.de/2015-04-12-decisions-in-poe.html</link>
  <pubDate>Sun, 12 Apr 2015 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Julia First Impressions</title>
  <description><![CDATA[<blockquote>
<p>
Julia is a high-level dynamic programming language designed to address the requirements of high-performance numerical and scientific computing while also being effective for general purpose programming. —<a href="https://en.wikipedia.org/wiki/Julia_(programming_language)">Wikipedia</a>
</p>
</blockquote>

<p>
In other words, it is supposed to be as fast as C, as practical as Python, and as scientific as Matlab. The next step in mainstream scientific computing.
</p>

<p>
However, Julia is still very young, and still evolving rapidly. But if any of the above is true, I am <i>very</i> interested!
</p>

<p>
So, over the last few days, I re-implemented an algorithm in Julia. The previous version of the algorithm was written in Python. The algorithm spends most of it's time in FFTs, thus I didn't expect big performance gains.
</p>

<p>
It is actually nice to have a language that is built for scientific computation. Coming from Python, it is refreshing to have <a href="http://docs.julialang.org/en/release-0.3/manual/arrays/">array literals</a>, ranges and <a href="http://docs.julialang.org/en/release-0.3/stdlib/math/">mathematics</a> available without importing anything. Much like Python, Julia also has a proper <a href="http://docs.julialang.org/en/release-0.3/manual/modules/">module system</a>, comprehensions, and more than one function per file.
</p>

<p>
On the other hand, there are a few questionable design decisions as well. Julia uses 1-based, inclusive indexing (<code>range[1:3] = [1 2 3]</code> as opposed to Python's <code>range[:3] = [0, 1, 2]</code>). In practice, my experience is that I rarely need to add ±1 when indexing in Python, but I frequently need it in Julia/Matlab.
</p>

<p>
Also, Julia has no docstrings, which makes me sad. The whole documentation story is sad, really: Documentation is often incomplete, or missing altogether. Unit testing is not widespread at all, and still crude. 0.4 will apparently add docstrings <a href="https://github.com/MichaelHatherly/Docile.jl">using macros</a>. This is ugly and doesn't work for one's own code, but it's certainly a step in the right direction. Those error messages would need some work, too.
</p>

<p>
All of that is hopefully just a symptom of Julia being young, and will improve over time. Similarly, signal processing functions are missing entirely, and I had to re-implement some. The community is growing rapidly, though, and a lot of missing functionality can be installed through the <a href="http://docs.julialang.org/en/release-0.3/manual/packages/">package manager</a> already.
</p>

<p>
When it comes to writing code, there is a lot to like about Julia. Julia's type system does impose a bit of overhead, but it also grants immediate benefits: Many of Python's runtime errors happen at evaluation time and functions can easily document their arguments' types. Also, thinking strictly about types actually improved performance by a good 20% in my algorithm.
</p>

<p>
And finally, Performance is surprisingly good! Although my algorithm spends almost all of its time doing FFTs, Julia performed about twice as fast as Python. This is pretty much exactly twice as much as I had expected! It also exposed more of the <a href="http://docs.julialang.org/en/release-0.3/stdlib/math/?highlight=plan_fft#Base.plan_fft">features</a> of the underlying libraries, which could be used for another speed-up of some 10%.
</p>

<p>
At the end of the day, Julia clearly isn't mature yet, but very promising. Documentation and libraries will no doubt grow, and performance is already excellent. I'll definitely keep an eye on it, and will experiment further when the opportunity presents itself.
</p>
]]></description>
  <link>http://bastibe.de/2015-01-12-julia.html</link>
  <pubDate>Mon, 12 Jan 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>The 31. Chaos Communication Congress</title>
  <description><![CDATA[<p>
Every year, between Christmas and New Year's Eve, a very special convention is held: The Chaos Computer Club hosts the Chaos Communication Congress. Among my peers, this is just "The Congress", the real highlight at the end of our year.
</p>

<p>
Don't be fooled by the name though, The Congress is not just some conference, with talks and meetings and business cards. The Congress is where every internet citizen, technologist, hacker, DIYer, net-politician, programmer, computer scientist, or geek convenes to exchange ideas. It is a place of levity, amazement and enlightening.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2014-12/CCH.jpg" alt="CCH.jpg" />
</p>
</div>

<p>
The Congress lasts four days, and every day is packed full of exciting talks. My favorites:
</p>
<ul class="org-ul">
<li><a href="http://31c3.mirror.speedpartner.de/congress/2014/h264-hd/31c3-6450-de-en-Ich_sehe_also_bin_ich_Du_hd.mp4">Ich sehe, also bin ich … Du</a> (German)
As it turns out, you don't need special hardware to defeat defeat biometric scanners or passwords. A digital camera and some ingenuity is often enough.</li>
<li><a href="http://31c3.mirror.speedpartner.de/congress/2014/h264-hd/31c3-6573-en-de-From_Computation_to_Consciousness_hd.mp4">From Computation to Consciousness</a> (English)
This really resonated with me: What is consciousness? (Why) are animals or computers conscious or not? What does it all mean? Really, this is a computationally motivated introduction to constructivism. Highly recommended.</li>
<li><a href="http://31c3.mirror.speedpartner.de/congress/2014/h264-hd/31c3-6558-de-en-Traue_keinem_Scan_den_du_nicht_selbst_gefaelscht_hast_hd.mp4">Traue keinem Scan, den du nicht selbst gefälscht hast</a> (German)
The story of an entertaining person discovering that a scanned PDF does not necessarily contain the same text that was scanned if your scanner was built by Xerox.</li>
</ul>
<p>
All of these talks and <i>many</i> more are also <a href="http://31c3.mirror.speedpartner.de/congress/2014/h264-hd/">available online</a>, and I highly recommend you watch some of them. But The Congress is not just talks; this is where all the German hackspaces and user groups meet and present their projects. Walking through the halls, there are laser shows, quadrocopters, 3D printers, stitching machines, automatic cocktail mixers, mechanical and human musicians, and so much more.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2014-12/hand.jpg" alt="hand.jpg" />
</p>
</div>

<p>
At its core though, this is a place where a bunch of like-minded people meet and take over a convention center. The Congress happens in the CCH, the Hamburg Convention Center. Over the course of the four days of The Congress, this building transforms from a sterile business location to a colorful geek-party. Within a day, all the lights in the building are somehow turned colorful, a pneumatic tube network sends messages across the building, there are lounges and coffee rooms, and strange and beautiful sculptures of light and electronics show up all over the place. Just walking across this cornucopia of light and sound is a treat for the senses.
</p>

<p>
And this is just the natural thing that happens if you let a bunch of creative people do their thing. It is really a crowd like no other: Nowhere else have I seen such an open-minded and approachable crowd. There are no unpleasant drunk people, no fights, no harassment. All over the place, people talk to strangers, adults and children build things together, and men and women interact as equals.
</p>

<p>
The Congress is really unique. I can't recommend it enough. If you can free up those four days between Christmas and New Year's Eve at all, go there. You won't regret it!
</p>
]]></description>
  <link>http://bastibe.de/2015-01-01-31c3.html</link>
  <pubDate>Thu, 01 Jan 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Books of 2014</title>
  <description><![CDATA[
<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><a href="http://www.amazon.de/Ancillary-Justice-Imperial-Radch-English-ebook/dp/B00BU1DG1S/ref=sr_1_1?s=books-intl-de&amp;ie=UTF8&amp;qid=1419948379&amp;sr=1-1&amp;keywords=ancillary+justice">Ancillary Justice</a> / <a href="http://www.amazon.de/Ancillary-Sword-Imperial-Radch-English-ebook/dp/B00IA2E5VA/ref=sr_1_2?s=books-intl-de&amp;ie=UTF8&amp;qid=1419948379&amp;sr=1-2&amp;keywords=ancillary+justice">Ancillary Sword</a>, by Ann Leckie</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p style="float:left;margin:5px;" width="150px">
<img src="https://upload.wikimedia.org/wikipedia/en/6/6a/Ann_Leckie_-_Ancillary_Justice.jpeg" alt="Ann_Leckie_-_Ancillary_Justice.jpeg" style="float:left;margin:5px;" width="150px" />
I have been reading a lot of science fiction in the last few years. These books are part one and two of the best space opera I have ever read. The story is written from the perspective of an AI, sometimes inhabiting a lot of bodies, sometimes only one. Interestingly, this makes for a very introspective viewpoint, where politics and actions are expressed as consequences of nuanced human behavior and astute observation, as opposed to arbitrary human decisions. This perspective is extremely compelling, and makes for an extremely <i>human</i> story in a world that is a clever amalgamation of ancient Roman society and post-modern egalitarianism. There is no book I look forward to more fiercely than the conclusion of this series.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><a href="https://en.wikipedia.org/wiki/Scott_Pilgrim">Scott Pilgrim</a>, by Bryan Lee O'Malley</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p style="float:left;margin:5px;" width="150px">
<img src="https://upload.wikimedia.org/wikipedia/en/3/39/ScottPilgrim.jpg" alt="ScottPilgrim.jpg" style="float:left;margin:5px;" width="150px" />
Scott Pilgrim is a twenty-something in the nineties. Scott Pilgrim doesn't have a job, and likes to play video games. Scott Pilgrim is fighting epic Anime battles against his girlfriends' exes. Scott Pilgrim is everyone, living in the real world. Scott Pilgrim is awesome, especially the new color-versions. The last part of the series will be released next year, and I really can't wait! (There's also a movie that is supposedly very good, but I won't watch it until I read all the comic books).
</p>

<br><br>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><a href="http://www.amazon.de/Doomsday-Book-Connie-Willis/dp/0553562738/ref=sr_1_sc_2?ie=UTF8&amp;qid=1419948450&amp;sr=8-2-spell&amp;keywords=doomsday+boo">Doomsday Book</a>, by Connie Willis</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p style="float:left;margin:5px;" width="150px">
<img src="https://upload.wikimedia.org/wikipedia/en/1/19/DoomsdayBook(1stEd).jpg" alt="DoomsdayBook(1stEd).jpg" style="float:left;margin:5px;" width="150px" />
This is about time travel from near-future Britain to the fifteenth century. But then, an epidemic breaks loose: Britain is in quarantine and civil order starts breaking. At the same time in the fifteenth century, the plague hits. Disease, and the people trying to deal with it, is a human tragedy beyond belief. Connie Willis manages to write about these things with empathy, and astounding humane love and humor. This story moved me more deeply than I care to acknowledge.
</p>

<br><br><br>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2014-12-30-books-of-2014.html</link>
  <pubDate>Tue, 30 Dec 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>A Digital Thank You</title>
  <description><![CDATA[<p>
This is the time of the year when we reflect on our lives, and be thankful. We write Christmas cards to people we like, and celebrate with our loved ones. At my job, I am sitting in front of a screen all day, and I interacted not only with people, but also their software. So this is a column where I want to thank people I don't know for their delightful software:
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><a href="http://orgmode.org/">Org Mode</a></h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
Thank you, Carsten Dominik, Bastien Guerry, and <a href="http://orgmode.org/org.html#History-and-Acknowledgments">everyone else</a>, for this amazing piece of software! I have used Org mode for my <a href="https://github.com/bastibe/org-journal">research journal</a>, <a href="http://bastibe.de/2013-11-13-blogging-with-emacs.html">this blog</a>, <a href="http://bastibe.de/2014-11-19-writing-a-thesis-in-org-mode.html">writing my thesis</a>, general note-taking, and all-around planning tool. Thank you for making my life so much easier to manage!
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><a href="https://github.com/mgeier">Matthias Geier</a></h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
Thank you, Matthias, for your many contributions to <a href="https://github.com/bastibe/PySoundFile">PySoundFile</a> and <a href="https://github.com/bastibe/PySoundCard">PySoundCard</a>, and our many enlightening discussions. You have brought these two projects far further than I would have ever gone, and I learned a lot in the process! Also, a quick thank you to Github, which made our collaboration effortless and enjoyable.
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><a href="http://fishshell.com/">fish</a></h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
Thank you, <a href="http://ridiculousfish.com/">Ridiculous Fish</a>, for bringing sane scripting, glorious VGA color, and general awesomeness to the command line! Finally, a shell that does not drown you in messy configuration, crazy syntax, and archaic conventions. Finally, a shell with beautiful documentation, and sane defaults! Thanks for all the fish!
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><a href="http://www.getsync.com/">BitTorrent Sync</a></h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
Dropbox is awesome, no doubt, but it still feels awkward to upload all my documents to a faceless corporation. Synchronizing data between computers is still hard&#x2013;or rather, used to be hard. Because this year I discovered btsync. I now have a real off-site backup and file synchronization system fully under my own control, and it took all of ten minutes to set up. Thank you!
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><a href="http://x-plane.com/">X-Plane</a></h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
This year, I got back into an old hobby of mine: Flight Simulation. In particular, this year I re-discovered X-Plane, and the marvelous and free sceneries by <a href="http://simheaven.org/">SimHeaven</a> and <a href="http://www.alpilotx.net/">Andras Fabian</a>. Sadly, there doesn't seem to be any pilot school around where I can complete my real-world pilot's license, so flight simulation will have to do. But with this simulator, I am enjoying flight simulation more than ever!
</p>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2014-12-20-thanks.html</link>
  <pubDate>Sat, 20 Dec 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Choosing a German Email Provider</title>
  <description><![CDATA[<p>
Why not just use Gmail<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>? Because if you're not paying for the service, you <i>are</i> the service. Google gives you Gmail for free, and in return they analyze and market your data. That's a fair deal, as far as I am concerned. But not a deal I want to make.
</p>

<p>
For one thing, I just don't like the idea of someone else reading through my email. Furthermore, I'd like my emails to be hosted in the same country I live in<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>, so that all the laws that protect the privacy of my letters are just as valid for my emails. So a German email provider it is.
</p>

<p>
First, I tried <a href="http://mail.de/">mail.de</a>. They show ads, even if you pay them. Also, their web interface is surprisingly ugly. No thank you.
</p>

<p>
Then, I found <a href="http://posteo.de/">posteo.de</a>, and they seemed to be doing everything right! Hosted in Germany, a buck a month, with a focus on security and privacy, and seemingly developed by friendly people. They even try to be environmentally friendly. In summary: perfect!
</p>

<p>
After half a year of using Posteo, though, I have found a few niggles. The web interface can't search mailboxes with a lot of emails&#x2013;I have an archive directory with 14k emails and the search wouldn't work. Their support says that's because there are too many messages in that directory. Also, they have had a bit too much down time for my taste: I experienced three outages of about two hours each in the last half year. Not a deal breaker, but it doesn't exactly instill confidence in their infrastructure.
</p>

<p>
Enter <a href="http://mailbox.org/">mailbox.org</a>. Also German, also a buck a month, also friendly and safe and eco-conscious. But with a much nicer web interface, support for custom domains, and a working search box. They even support ActiveSync, which you'll like if you use Outlook or Windows Phone. In other words, Posteo done right. I'm sold.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Or <a href="http://outlook.com/">outlook.com</a>, which is the same deal from Microsoft. Use this if you don't like Google's "priority" inbox and wonky IMAP support.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
For the record, <a href="http://arstechnica.com/tech-policy/2014/09/judge-mulls-contempt-charges-in-microsofts-e-mail-privacy-fight-with-us/">Microsoft</a> has made a point of having servers in each user's country and abiding by that country's law.
</p></div></div>


</div>
</div>]]></description>
  <link>http://bastibe.de/2014-12-09-mailbox.html</link>
  <pubDate>Tue, 09 Dec 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Org Mode Selective Section Numbering</title>
  <description><![CDATA[<p>
This is the third revision of a post about selective headline numbering in Org mode. On its own, Org mode can either number all headlines, or none. For scientific writing, this is a non-starter. In a scientific paper, the abstract should not be numbered, the main body should be numbered, and appendices should not be numbered.
</p>

<p>
In LaTeX, this is easy to do: <code>\section{}</code> creates a numbered headline, while <code>\section*{}</code> creates an unnumbered section. Org mode does not have any facility to control this on a per-headline basis, but it can be taught:
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">headline-numbering-filter</span> (data backend info)
  <span style="color: #111111;">"No numbering in headlines that have a property :numbers: no"</span>
  (<span style="color: #111111; font-weight: bold;">let*</span> ((beg (next-property-change 0 data))
         (headline (<span style="color: #111111; font-weight: bold;">if</span> beg (get-text-property beg <span style="color: #111111; background-color: #fffff8;">:parent</span> data))))
    (<span style="color: #111111; font-weight: bold;">if</span> (and (eq backend 'latex)
         (string= (org-element-property <span style="color: #111111; background-color: #fffff8;">:NUMBERS</span> headline) <span style="color: #303030;">"no"</span>))
        (replace-regexp-in-string
         <span style="color: #303030;">"</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(</span><span style="color: #303030;">part</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">chapter</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(?:</span><span style="color: #303030;">sub</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">*section</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(?:</span><span style="color: #303030;">sub</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">?paragraph</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">"</span>
         <span style="color: #303030;">"\\1*"</span> data nil nil 1)
      data)))

(setq org-export-filter-headline-functions '(headline-numbering-filter))
</pre>
</div>

<p>
This creates a filter (an Org mode convention similar to a hook), which appends the asterisk to LaTeX headlines if the headline has a property <code>:NUMBERS: no</code>. If all you do is export to LaTeX, this works well.
</p>

<p>
If you need to export to HTML as well, things get more complicated. Since HTML does not have native numbering support, Org is forced to manually create section numbers. But times have changed, and with CSS3, HTML now indeed <i>does</i> support native numbering!
</p>

<p>
Here is some CSS that uses CSS3 counters to number all headlines and hide Org's numbers:
</p>

<div class="org-src-container">

<pre class="src src-css"><span style="color: #303030; font-style: italic; text-decoration: underline;">/* </span><span style="color: #303030; font-style: italic; text-decoration: underline;">hide Org-mode's section numbers </span><span style="color: #303030; font-style: italic; text-decoration: underline;">*/</span>
<span style="color: #111111; text-decoration: underline;">span.section-number-2 </span>{ <span style="color: #111111;">display</span>: none; }
<span style="color: #111111; text-decoration: underline;">span.section-number-3 </span>{ <span style="color: #111111;">display</span>: none; }
<span style="color: #111111; text-decoration: underline;">span.section-number-4 </span>{ <span style="color: #111111;">display</span>: none; }
<span style="color: #111111; text-decoration: underline;">span.section-number-5 </span>{ <span style="color: #111111;">display</span>: none; }
<span style="color: #111111; text-decoration: underline;">span.section-number-6 </span>{ <span style="color: #111111;">display</span>: none; }

<span style="color: #303030; font-style: italic; text-decoration: underline;">/* </span><span style="color: #303030; font-style: italic; text-decoration: underline;">define counters for the different headline levels </span><span style="color: #303030; font-style: italic; text-decoration: underline;">*/</span>
<span style="color: #111111; text-decoration: underline;">h1 </span>{ <span style="color: #111111;">counter-reset</span>: section; }
<span style="color: #111111; text-decoration: underline;">h2 </span>{ <span style="color: #111111;">counter-reset</span>: subsection; }
<span style="color: #111111; text-decoration: underline;">h3 </span>{ <span style="color: #111111;">counter-reset</span>: subsubsection; }
<span style="color: #111111; text-decoration: underline;">h4 </span>{ <span style="color: #111111;">counter-reset</span>: paragraph; }
<span style="color: #111111; text-decoration: underline;">h5 </span>{ <span style="color: #111111;">counter-reset</span>: subparagraph; }

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">prepend section numbers before headlines </span><span style="color: #303030; font-style: italic;">*/</span>
<span style="color: #111111;">h2</span>::before {
    <span style="color: #111111;">content</span>: counter(section) <span style="color: #303030;">" "</span>;
    <span style="color: #111111;">counter-increment</span>: section;
}
<span style="color: #111111;">h3</span>::before {
    <span style="color: #111111;">content</span>: counter(section) <span style="color: #303030;">"."</span> counter(subsection) <span style="color: #303030;">" "</span>;
    <span style="color: #111111;">counter-increment</span>: subsection;
}
<span style="color: #111111;">h4</span>::before {
    <span style="color: #111111;">content</span>: counter(section) <span style="color: #303030;">"."</span> counter(subsection) <span style="color: #303030;">"."</span> counter(subsubsection) <span style="color: #303030;">" "</span>;
    <span style="color: #111111;">counter-increment</span>: subsubsection;
}
<span style="color: #111111;">h5</span>::before {
    <span style="color: #111111;">content</span>: counter(section) <span style="color: #303030;">"."</span> counter(subsection) <span style="color: #303030;">"."</span> counter(subsubsection) <span style="color: #303030;">"."</span> counter(paragraph) <span style="color: #303030;">" "</span>;
    <span style="color: #111111;">counter-increment</span>: paragraph;
}
<span style="color: #111111;">h6</span>::before {
    <span style="color: #111111;">content</span>: counter(section) <span style="color: #303030;">"."</span> counter(subsection) <span style="color: #303030;">"."</span> counter(subsubsection) <span style="color: #303030;">"."</span> counter(paragraph) <span style="color: #303030;">"."</span> counter(subparagraph) <span style="color: #303030;">" "</span>;
    <span style="color: #111111;">counter-increment</span>: subparagraph;
}

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">suppress numbering for headlines with class="nonumber" </span><span style="color: #303030; font-style: italic;">*/</span>
.nonumber::before { <span style="color: #111111;">content</span>: none; }
</pre>
</div>

<p>
With this in place, we can extend the previous filter to work for HTML as well as LaTeX:
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">headline-numbering-filter</span> (data backend info)
  <span style="color: #111111;">"No numbering in headlines that have a property :numbers: no"</span>
  (<span style="color: #111111; font-weight: bold;">let*</span> ((beg (next-property-change 0 data))
         (headline (<span style="color: #111111; font-weight: bold;">if</span> beg (get-text-property beg <span style="color: #111111; background-color: #fffff8;">:parent</span> data))))
    (<span style="color: #111111; font-weight: bold;">if</span> (string= (org-element-property <span style="color: #111111; background-color: #fffff8;">:NUMBERS</span> headline) <span style="color: #303030;">"no"</span>)
        (<span style="color: #111111; font-weight: bold;">cond</span> ((eq backend 'latex)
               (replace-regexp-in-string
                <span style="color: #303030;">"</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(</span><span style="color: #303030;">part</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">chapter</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(?:</span><span style="color: #303030;">sub</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">*section</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(?:</span><span style="color: #303030;">sub</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">?paragraph</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">"</span>
                <span style="color: #303030;">"\\1*"</span> data nil nil 1))
              ((eq backend 'html)
               (replace-regexp-in-string
                <span style="color: #303030;">"</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(</span><span style="color: #303030;">&lt;h[1-6]</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(</span><span style="color: #303030;">[</span><span style="color: #303030;">^</span><span style="color: #303030;">&gt;]*&gt;</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">"</span>
                <span style="color: #303030;">"\\1 class=\"nonumber\"\\2"</span> data nil nil)))
      data)))

(setq org-export-filter-headline-functions '(headline-numbering-filter))
</pre>
</div>

<p>
Previously, I implemented this in Org mode only (no CSS). While that worked as well, it required the modification of some fairly low-level Org functions. The CSS-based solution is much simpler, and should be much easier to maintain and adapt.
</p>
]]></description>
  <link>http://bastibe.de/2014-12-03-org-numbering.html</link>
  <pubDate>Wed, 03 Dec 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Writing a Thesis in Org Mode</title>
  <description><![CDATA[<p>
Most of my peers write all their scientific documents in LaTeX. Being a true believer in the power of Emacs, I opted for writing my master's thesis in <a href="http://orgmode.org/">Org Mode</a> instead. Here's my thoughts on this process and how it compares to the usual LaTeX work flow.
</p>

<p>
In my area of study, a thesis is a document of about 60 pages that contains numerous figures, math, citations, and the occasional table or source code snippet. Figures are usually graphs that are generated in some programming environment and creating those graphis is a substantial part of writing the thesis.
</p>

<p>
Org mode was a huge help in this regard, since it combines the document text and the executable pieces of code. Instead of having a bunch of scripts that generate graphs, and a bunch of LaTeX files that include those graphs, I had one big Org file that included both the thesis text and the graphing code.
</p>

<p>
As for the thesis text, I used Org's export functionality to convert the Org source to LaTeX, and compiled a PDF from there. This really works very well: It is very nice to use Org headlines instead of <code>\section{...}</code>, and clickable Org links instead of <code>\ref{...}</code>. While this is nice, it is just a change of syntax. I still had to enter the very same things and saving a few characters is not particularly impressive. For example, figures still require a caption, an ID, and a size:
</p>

<div class="org-src-container">

<pre class="src src-org"><span style="color: #303030; font-style: italic;">#+CAPTION:</span> <span style="color: #111111;">Modulation tracks of a clarinet recording with and without white noise. The modulation tracks are not normalized.</span>
<span style="color: #303030; font-style: italic;">#+ATTR_LATEX: :width 6in :height 2.5in :float multicolumn</span>
<span style="color: #303030; font-style: italic;">#+NAME: fig:summary_tracks</span>
<span style="color: #111111; text-decoration: underline;">file:images/summary_tracks.pdf</span>
</pre>
</div>

<p>
In LaTeX, this would be
</p>

<div class="org-src-container">

<pre class="src src-latex"><span style="color: #111111; font-weight: bold;">\begin</span>{<span style="color: #111111; text-decoration: underline;">figure*</span>}
<span style="color: #111111; font-weight: bold;">\centering</span>
<span style="color: #696969;">\includegraphics</span>[width=6in,height=2.5in]{images/summary_tracks.pdf}
<span style="color: #111111; font-weight: bold;">\caption</span>{<span style="color: #111111; font-weight: bold; text-decoration: underline;">\label</span><span style="color: #111111; text-decoration: underline;">{</span><span style="color: #111111; text-decoration: underline;">fig:summary_tracks</span><span style="color: #111111; text-decoration: underline;">}Modulation tracks of a clarinet recording with and without white noise. The modulation tracks are not normalized.</span>}
<span style="color: #111111; font-weight: bold;">\end</span>{<span style="color: #111111; text-decoration: underline;">figure*</span>}
</pre>
</div>

<p>
As you can see, there really is not that much of a difference between these two, and you might even consider the LaTeX example more readable. In some other areas, Org mode is simply lacking features: Org does not have any syntax for page formatting, and thus can't create a perfectly formatted title page. Similarly, it can't do un-numbered sections, and it can't do numbered equations. For all of those, I had to fall back to writing LaTeX. This is not a big deal, but it breaks the abstraction.
</p>

<p>
A bigger problem is that Org documents include all the chapters in one big file. While Org can deal with large files no problem, it means that LaTeX compiles take a while. In LaTeX, I would have split my document into a number of smaller files that could be separately compiled in order to keep compilation time down. This is confounded by Org's default behavior of deleting intermediate LaTeX files, which forces a full triple-recompile on each export. At the end of my thesis, a full export took about 15 seconds. Not a deal-breaker, but annoying.
</p>

<p>
The one thing where Org really shines, though, is the inclusion of code fragments: Most of my figures were created in Python, and Org mode allowed me to include that Python code right in my document. Hit <code>C-c C-c</code> on any code fragment, and Org ran that code and created a new image file that is automatically included as a figure. This was really tremendously useful!
</p>

<p>
At the end of the day, I am not sure whether Org mode is the right tool for writing a thesis. It worked fine, but there were a lot of edge cases and <a href="http://bastibe.de/2014-09-23-org-cite.html">workarounds</a>, which made the whole process a bit uncomfortable. The only really strong argument in favor of Org is the way it can include both code and prose in the same document. But maybe a similar thing could be implemented with LaTeX and some literate programming tool.
</p>
]]></description>
  <link>http://bastibe.de/2014-11-19-writing-a-thesis-in-org-mode.html</link>
  <pubDate>Wed, 19 Nov 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Org Mode Citation Links</title>
  <description><![CDATA[<p>
I am writing my master's thesis in <a href="http://orgmode.org/">Org Mode</a>, and export to LaTeX for publishing. For the most part, this works incredibly well. Using Org Mode instead of plain LaTeX means no more fiddly <code>\backslash{curly brace}</code> all over the place. No more scattering code fragments and markup across hundreds of files. And on top of that, deep integration with my research notes and task tracking system.
</p>

<p>
But not everything is perfect. For one thing, citations do not work well. Sure, you can always write <code>\cite{cohen93}</code>, but then you are writing LaTeX again. Also, all the other references and footnotes are clickable, highlighted Org Mode links, but <code>\cite{cohen93}</code> is just inline LaTeX.
</p>

<p>
But luckily, this is Emacs, and Emacs is programmable. And better yet, Org Mode has just the tool for the job:
</p>

<div class="org-src-container">

<pre class="src src-elisp">(org-add-link-type <span style="color: #303030;">"cite"</span>
     (<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">follow-cite</span> (name)
       <span style="color: #111111;">"Open bibliography and jump to appropriate entry.</span>
<span style="color: #111111;">        The document must contain \bibliography{filename} somewhere</span>
<span style="color: #111111;">        for this to work"</span>
       (find-file-other-window
        (<span style="color: #111111; font-weight: bold;">save-excursion</span>
          (beginning-of-buffer)
          (<span style="color: #111111; font-weight: bold;">save-match-data</span>
            (re-search-forward <span style="color: #303030;">"\\\\bibliography{</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">(</span><span style="color: #303030;">[</span><span style="color: #303030;">^</span><span style="color: #303030;">}]+</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">)</span><span style="color: #303030;">}"</span>)
            (concat (match-string 1) <span style="color: #303030;">".bib"</span>))))
       (beginning-of-buffer)
       (search-forward name))
     (<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">export-cite</span> (path desc format)
       <span style="color: #111111;">"Export [[cite:cohen93]] as \cite{cohen93} in LaTeX."</span>
       (<span style="color: #111111; font-weight: bold;">if</span> (eq format 'latex)
           (<span style="color: #111111; font-weight: bold;">if</span> (or (not desc) (equal 0 (search <span style="color: #303030;">"cite:"</span> desc)))
               (format <span style="color: #303030;">"\\cite{%s}"</span> path)
             (format <span style="color: #303030;">"\\cite[%s]{%s}"</span> desc path)))))
</pre>
</div>

<p>
This registers a new link type in Org Mode: <code>[[cite:cohen93]]</code>, which will jump to the appropriate bibliography entry when clicked, and get exported as <code>\cite{cohen93}</code> in LaTeX. Awesome!
</p>
]]></description>
  <link>http://bastibe.de/2014-09-23-org-cite.html</link>
  <pubDate>Tue, 23 Sep 2014 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Transplant</title>
  <description><![CDATA[<p>
In academia, a lot of programming is done in Matlab. Many very interesting algorithms are only available in Matlab. Personally, I prefer to use tools that are more widely applicable, and less proprietary, than Matlab. My weapon of choice at the moment is Python.
</p>

<p>
But I still need to use Matlab code. There are <a href="http://stackoverflow.com/a/23762412/1034">a few ways</a> of interacting with Matlab out there already. Most of them focus on being able to eval strings in Matlab. Boring. The most interesting one is <a href="https://github.com/ewiger/mlab">mlab</a>, a full-fledget bridge between Python and Matlab! Had I found this earlier, I would probably not have written my own.
</p>

<p>
But write my own I did: <a href="https://github.com/bastibe/transplant">Transplant</a>. Transplant is a very simple bridge for calling Matlab functions from Python. Here is how you start Matlab from Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> transplant
<span style="color: #111111;">matlab</span> = transplant.Matlab()
</pre>
</div>

<p>
This <code>matlab</code> object starts a Matlab interpreter in the background and connects to it. You can call Matlab functions on it!
</p>

<div class="org-src-container">

<pre class="src src-python">matlab.eye(3)
&gt;&gt;&gt; array([[ 1.,  0.,  0.],
           [ 0.,  1.,  0.],
           [ 0.,  0.,  1.]])
</pre>
</div>

<p>
As you can see, Matlab matrices are converted to Numpy matrices. In contrast to most other Python/Matlab bridges, matrix types are preserved<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>:
</p>

<div class="org-src-container">

<pre class="src src-python">matlab.randi(255, 1, 4, <span style="color: #303030;">'uint8'</span>)
&gt;&gt;&gt; array([[246,    2, 198, 209]], dtype=uint8)
</pre>
</div>

<p>
All matrix data is actually transferred in binary, so both Matlab and Python work on bit-identical data. This is very important if you are working with precise data! Most other bridges do some amount of type conversion at this point.
</p>

<p>
This alone accounts for a large percentage of Matlab code out there. But not every Matlab function can be called this easily from Python: Matlab functions behave differently depending the number of output arguments! To emulate this in Python, every function has a keyword argument <code>nargout</code> <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>. For example, the Matlab function <code>max</code> by default returns both the maximum value and the index of that value. If given <code>nargout=1</code> it will only return the maximum value:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">data</span> = matlab.randn(1, 4)
matlab.<span style="color: #111111; background-color: #fffff8;">max</span>(data)
&gt;&gt;&gt; [1.5326, 3] <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Matlab: x, n = max(...)</span>
matlab.<span style="color: #111111; background-color: #fffff8;">max</span>(data, nargout=1)
&gt;&gt;&gt; 1.5326      <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Matlab: x = max(...)</span>
</pre>
</div>

<p>
If no <code>nargout</code> is given, functions behave according to <code>nargout(@function)</code>. If even that fails, they return the content of <code>ans</code> after their execution.
</p>

<p>
Calling Matlab functions is the most important feature of Transplant. But there is a more:
</p>

<ul class="org-ul">
<li><p>
You can save/retrieve variables in the global workspace:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">matlab.value</span> = 5 <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Matlab: value = 5</span>
<span style="color: #111111;">x</span> = matlab.value <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Matlab: x = value</span>
</pre>
</div></li>

<li><p>
You van eval some code:
</p>

<div class="org-src-container">

<pre class="src src-python">matlab.<span style="color: #111111; background-color: #fffff8;">eval</span>(<span style="color: #303030;">'class(value)'</span>)
&gt;&gt;&gt; <span style="color: #111111;">ans</span> =
&gt;&gt;&gt;
&gt;&gt;&gt; double
&gt;&gt;&gt;
</pre>
</div></li>

<li>The help text for functions is automatically assigned as docstring. In IPython, this means that <code>matlab.magic?</code> displays the same thing <code>help magic</code> would display in Matlab.</li>
</ul>

<p>
Under the hood, Transplant is using a very simple messaging protocol based on <a href="http://zeromq.org/">0MQ</a>, <a href="https://en.wikipedia.org/wiki/Json">JSON</a>, and some <a href="https://en.wikipedia.org/wiki/Base64">base64</a>-encoded binary data. Sadly, Matlab can deal with none of these technologies by itself. Transplant therefore contains a full-featured JSON <a href="https://github.com/bastibe/transplant/blob/master/parsejson.m">parser</a>/<a href="https://github.com/bastibe/transplant/blob/master/dumpjson.m">serializer</a> and base64 <a href="https://github.com/bastibe/transplant/blob/master/base64encode.m">encoder</a>/<a href="https://github.com/bastibe/transplant/blob/master/base64decode.m">decoder</a> in pure Matlab. It also contains a minimal <a href="https://github.com/bastibe/transplant/blob/master/messenger.c">mex-file</a> for interfacing with 0MQ.
</p>

<p>
There are a few <a href="http://iso2mesh.sourceforge.net/cgi-bin/index.cgi?jsonlab">JSON parsers</a> available for Matlab, but virtually all of them try parse JSON arrays as matrices. This means that these parsers have no way of differentiating between a list of vectors and a matrix (want to call a function with three vectors or a matrix? No can do). Transplant's JSON parser parses JSON arrays as cell arrays and JSON objects as structs. While somewhat less convenient in general, this is a much better fit for transferring data structures between programming languages.
</p>

<p>
Similarly, there are a few <a href="http://home.online.no/~pjacklam/matlab/software/util/datautil/">base64 encoders</a> available. Most of them actually use Matlab's built-in Java interface to encode/decode base64 strings. I tried this, but it has two downsides: Firstly, it is pretty slow for short strings since the data has to be copied over to the Java side and then back. Secondly, it is limited by the Java heap space. I was not able to reliably encode/decode more than about 64 Mb using this<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>. My base64 encoder/decoder is written in pure Matlab, and works for arbitrarily large data.
</p>

<p>
All of this has been about Matlab, but my actual goal is bigger: I want transplant to become a library for interacting between more than just Python and Matlab. In particular, Julia and PyPy would be very interesting targets. Also, it would be useful to reverse roles and call Python from Matlab as well! But that will be in the future.
</p>

<p>
For now, head over to <a href="https://github.com/bastibe/transplant">Github.com/bastibe/transplant</a> and have fun! Also, if you find any bugs or have any suggestions, please open an issue on Github!
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Except for integer complex numbers, since those are not supported by Numpy.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Like the Matlab function <code>nargout</code>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
At 192 Mb of Java heap space. And even those 64 Mb were pretty unreliable if I didn't call <code>java.lang.Runtime.getRuntime.gc</code> all the time.
</p></div></div>


</div>
</div>]]></description>
  <link>http://bastibe.de/2014-08-19-transplant.html</link>
  <pubDate>Tue, 19 Aug 2014 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Working and Learning</title>
  <description><![CDATA[<p>
At the university, I have a big advantage: I can program. So many of my fellow students are programming as their main means of doing science, yet clearly never learned how to program efficiently. It is saddening to see them "fight Matlab" for days, for things that would take a programmer hours.
</p>

<p>
So how did I get to this point? After all, I went to the same university and studied the same topics they did. My first introduction to programming was our <i>Introduction to Programming</i> in the first semester. We learned how to write simple text-based programs in C.
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">My own blogging engine</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
At the time, my fellow students and I wanted to organize our lecture notes, copied exams, and assignments on our own website. Not knowing any better, I picked up PHP and set out to write a little website for this. It turned into a little CMS, all hand-written in PHP, HTML and (almost no) CSS.
</p>

<p>
This happened about four weeks into the introductory programming course, so I only knew a few bits of C and didn't appreciate the differences between programming languages yet. Many bad things have been said about PHP, but it allowed me to hack together a blog, file browser, gallery, and calendar with knowing little more about programming than branches and loops.
</p>

<p>
It scares me to look at the ease with which I picked up PHP at the time. With more experience, I seem to become more reluctant to try out new things. This might be a very bad thing.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">C programming at the university</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
In my third semester, a professor offered me a job as an undergraduate research assistant. As my first assignment, he wanted me to program a MIDI interface for Matlab. The idea was to use the Matlab-C interface <a href="http://www.mathworks.de/de/help/matlab/call-mex-files-1.html">Mex</a> to connect <a href="http://portmedia.sourceforge.net/">portmidi</a> to Matlab. At this point, I had had two programming courses (C and C++/Matlab), and had read <a href="http://pragprog.com/book/tpp/the-pragmatic-programmer"><i>The Pragmatic Programmer</i></a>.
</p>

<p>
I remember the professor telling me to stop obsessing about that piece of code. He said "You are an engineer, 95% is good enough for engineers". Yet, reading through this code now, it is <a href="http://tgm.jade-hs.de/web/files/Institut_fr_Hrtechnik_und_Audiologie/Software.php">some fine C code</a>. Everything is well-commented, the implementation is clearly split into one Matlab-related part and one portmidi-related part, and there even is an (informal) test suite! To my mind, those extra 5% make an incredible difference! It is astonishing how much my early career has been influenced by <i>The Pragmatic Programmer</i>.
</p>

<p>
Another project concerned extending a C program that simulated small-room acoustics. It took me eight months to admit defeat. Every week, I would spend ten hours staring at my screen, trying to understand that program. Every week, I would fail in frustration. After eight months, I told the professor that I couldn't do it. A few months later, I told the professor that I would have another go at the project. This time, I read <a href="http://www.trueaudio.com/array/downloads/Image%20Method-Allen%20and%20Berkley%201978.pdf">the research paper</a> associated with the program first. After that, the project was completed in one afternoon. Sometimes, just reading the code is not enough. (This is probably more true in academia than anywhere else).
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Qt and Cocoa and OpenGL</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
I wrote my bachelor's thesis for a small company in southern Germany. At my university, the thesis was supposed to take half a year, and should be written at some company, so students would get some first-hand experience of the real world outside the university.
</p>

<p>
The basic algorithm for the thesis was working after a few weeks. Since my boss was more interested in a commercial result than in more research, he proposed that I write a desktop application for it. This is how I was introduced to Qt. Qt is an incredibly complex framework. Luckily for me, it is also an incredibly well-documented framework! As a newcomer to programming, API docs can be a very daunting thing, filled with jargon and implementation detail. This was the first time I learned something mostly from reading the API docs, and I am grateful that I happened to pick Qt for that.
</p>

<p>
After finishing my thesis, I worked remotely for the same company, writing another GUI application. This time, the program was to be written in Objective-C/Cocoa. In contrast to Qt, I needed <a href="http://www.bignerdranch.com/we-write/cocoa-programming">the book</a> to learn Cocoa. Working through the book was a very different experience than learning Qt from API docs. The book not only described the API, but also things like best practices and programming patterns. As a result, my final program was much easier to understand and extend than the Qt program I wrote earlier.
</p>

<p>
Cocoa and Qt show two very different styles of documentation. The Qt documentation is very complete, and very well-written. It is a rare feat for a framework this complex to be learnable from the documentation alone! Doing the same thing with the Cocoa documentation instead of the book would have been painful. The book really went much further than pure API documentation can reasonably go, and my experience was better for it! (By the way, I also learned and used OpenGL during that time. The less said about the OpenGL documentation, the better).
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">Why Software is paid for</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
In the meantime, the company had been bought by a foreign investor. While this meant that my program would never see actual users, it also meant that they could offer me a proper job. And like every good engineering student, I needed Matlab, Photoshop, and Microsoft Office. And like every cliché foreign investor, they replied with "This is too expensive, here is a link to the Pirate Bay".
</p>

<p>
This did not sit well with me. After a bit of soul-searching, and my most interesting and obviously <a href="http://stackoverflow.com/questions/3907076/my-boss-asks-me-to-pirate-software-what-should-i-do">soon-deleted Stack Overflow question</a>, I realized that I could not pirate software any longer. My own livelihood depended on people paying for the code I wrote. There was no way I would use other people's code without paying for it.
</p>

<p>
And thus we used <a href="http://www.inkscape.org/">Inkscape</a> instead of Illustrator, and <a href="http://scipy.org/">Python</a> instead of Matlab. Mere weeks later, I discovered that Inkscape produces (mostly) standard-compatible SVG files that could be opened with any regular text editor, and manipulated with any regular XML parser! It soon became apparent that the open nature of this file format enabled us to use Inkscape for so much more than mere vector graphics! While in retrospect, it was not such a bright idea to use a vector graphics program as a GUI layout editor, it really drove home the value of open file formats and reusability! A lot of the later work on the project would have been impossible had we used Illustrator and Matlab.
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Automation</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
We were working with a British company on a new <a href="http://www.cadac-sound.com/i/digital/cdc-four/12/">digital mixing console</a> at the time. Our team was mostly responsible for the software side of the project, while the British company was mostly concerned with the hardware. One big issue was that in order to get a testable system going, one had to compile some software, run some converter scripts on some files, zip some other files, set up the prototype hardware correctly, then send all the files to the prototype in the right order. Forget one step, or take an outdated version of something, and the system would not work.
</p>

<p>
It was a disaster. We would lose days debugging nonexistent issues, only because we had forgotten to update such-and-such library, or renaming some debugging file. It would be easy to blame this on my colleagues. But the reality is, no-one had ever done a project this large before, and our tools were utterly incapable of build automation of this kind.
</p>

<p>
In the end, I wrote some crazy Rube Goldberg Machine that integrated GNU make with Visual Studio, and delegated all the packaging and converting to makefiles. It would even download a large set of Unix tools and a full installation of Ruby if need be. I can't say I'm proud of this wild contraption, but anything is better than wasting days debugging non-issues. To its credit, there have been zero issues with wrongly packaged files with this system in place. I can not tell you how much stress and conflict this simple act of automation relieved. Never have a human do a machine's work.
</p>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6">Lua and DSLs</h2>
<div class="outline-text-2" id="text-orgheadline6">
<p>
When I started on the job, a colleague of mine handed me a copy of "Programming for Windows 95", and told me to read it since he had modeled the internal GUI library after it. This was 2010. I was very unhappy about this. In the following years, I would rework many a subsystem within this library. But the more I changed, the more I had to take responsibility for the library. Before long, I had taken official ownership of the library, and I had to answer to questions and feature requests.
</p>

<p>
This turned out to be both a blessing and a curse. On the one hand, it gave me a great deal of freedom and authority in my own little world. On the other hand, I didn't really care for responsibility for this much legacy code in an application domain I was not particularly interested in. Thus being motivated to change things had its upsides though, and I learned a lot when implementing a font rendering engine, a bitmap caching and memory allocation system, and various configuration mechanisms on an embedded platform.
</p>

<p>
But, at the end of the day, there is only so much you can do with a bad code base in a bad subset of C++ (largely due to compilers, not people). In another slow-going week when GUI work was not particularly important, I <a href="http://stackoverflow.com/questions/4448835/alternatives-to-lua-as-an-embedded-language">investigated implementing</a> a scripting layer for our framework. We were not very optimistic about this, since the scripting engine had to run on a <a href="https://en.wikipedia.org/wiki/Black_fin">terribly slow embedded processor</a> that was already running almost at capacity.
</p>

<p>
We chose the scripting language Lua for the job, since it was tiny, and easy to embed (in both meanings of the word). Lua turned out to be a stellar choice! As scripting systems often go, the Lua code took over most of the frontend work in the application. Before long, all the GUI layout was done in a Lua DSL instead of XML. Imagine creating 200 buttons in a two-line <code>for</code> loop instead of 200 lines of XML. Also, I consider the book <a href="http://www.lua.org/pil/">Programming in Lua</a> one of the pivotal books in my programming career!
</p>

<p>
All the GUI and hardware interaction was done in Lua. The mixing console had some 40000 parameters, and a terrifying number of hardware states. I daresay that it would have been all but impossible to implement the complex interplay between all of these states in a less dynamic environment than Lua. Years later, one of the later maintainers of the product told me how this system had saved his sanity many times. This was one of the proudest moments in my career!
</p>

<p>
I vividly remember the feeling of liberation when I transitioned from C++ to Lua. I don't think we would have managed to ship the mixing console in time without Lua. In fact, there was one feature from the old analogue mixing consoles that they never managed to implement in the newer digital consoles, because it was just too hard. With Lua, it was a giant headache, but it worked. Never underestimate the power of a different language when problems seem impossibly hard.
</p>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7">The role of boredom in my job</h2>
<div class="outline-text-2" id="text-orgheadline7">
<p>
The Lua experiment started in a time when work was slow, and idle thoughts had the time to mature into ideas. The system automation was started in a similar time. I was lucky to have had a few of those weeks. Some of them amounted to cool projects in the company, others I spent on improving myself.
</p>

<p>
I always had a bit of a fetish for text editing. I just love the act of feeding thoughts to the computer through a keyboard. To me, it is a much more satisfying experience than using a pencil and a sheet of paper. At the university, I used Vim on Linux, then Textmate on OS X, then XCode. On the job, I was then forced to use Visual Studio, which still holds a special place in my heart, as one of the most miserable editing experience I ever had (though Lotus Notes and Microsoft Word only rank lower because I used them less).
</p>

<p>
It should come as no surprise then, that I was overjoyed when I discovered <a href="http://www.viemu.com/">ViEmu</a>. It really transformed my work at the time &#x2013; what was previously a chore was now made enjoyable by the feeling of power conveyed through the Vim key bindings in Visual Studio! And this improved even further when I used another spare week to finally learn how to properly touch-type. These days, I am typing in Emacs, but enough has been written about that already.
</p>

<p>
I had one colleague who only used his two index fingers for typing. Seeing him type was maddening. But the worst thing was not his typing, but what he was <i>not</i> typing. Naturally, variable names were short, documentation was sparse, and code was optimized for brevity. He even resorted to some graphical code editing <a href="http://www.easycode.de/en/products/easycode-cc/structure-diagrams.html">monstrosity</a>, just to save himself some typing. I have written a Visual Studio tool that automatically filtered out some of the junk this tool produced, and wrote wrappers around his libraries to make them usable for other people. Seriously, don't be that guy. Typing is a core competency for any developer.
</p>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-2">
<h2 id="orgheadline8">Open Source</h2>
<div class="outline-text-2" id="text-orgheadline8">
<p>
Besides all of the GUI work I did for the company, I was actually hired for audio algorithm development. Since we didn't get a license for Matlab, I quickly grew to love Python instead. At the time, Python was right in the middle of the transition from Python 2 to Python 3, and <a href="http://people.csail.mit.edu/hubert/pyaudio/">one of the libraries</a> I needed was Python 2 only. In another one of those fateful slow weeks, I set out to translate it to Python 3.
</p>

<p>
I didn't know much Python at the time, so the result was not exactly perfect. The maintainer of the library however was really nice about this, and helped me figuring out the problems with my code. This was the first time I ever talked to any programmer outside my company! And even better, this programmer seemed to be a professor at MIT, or something, and likely a lot more experienced and intelligent than I was! I was incredibly lucky that this first contact with the open source world was such a kind and positive one.
</p>

<p>
Not too long after that, I started writing my own <a href="https://github.com/bastibe/">open source libraries</a>, and publishing them on the web. And before too long, people began using those projects! And then they started contributing to them as well! In a way, one of my main griefs with working for a company has always been that there are so few people with which you can talk about the things you do all day. And now, suddenly, random people from all over the world are showing interest and help for the things I do in my spare time! I really can't emphasize enough how much this involvement with the open source community and other people has improved my view of the world, and my understanding of the work I do!
</p>
</div>
</div>

<div id="outline-container-orgheadline9" class="outline-2">
<h2 id="orgheadline9">My next adventure</h2>
<div class="outline-text-2" id="text-orgheadline9">
<p>
This has been a summary of the things I did so far. It has been an incredible journey, and one that never stopped to surprise me. Now I am finishing my master's thesis, and getting ready for a doctorate after that. All the work I did and do is based on the incredible work of people before me. At least for the time being, I want this to be the goal of my further work: To advance the sum total knowledge of the world, if only by a tiny bit.
</p>

<p>
For this, my most important tool is still programming. Learning how to program is an immensely valuable skill, and <a href="http://learnpythonthehardway.org/book/advice.html">doubly so</a> if your job title is not "developer" or "programmer". Programming is not just a tool to talk to the computer and earn a living. We should not forget that programming is also a rich thinking tool for trying out new ideas, and sharing them with other people.
</p>

<p>
For the moment, I have no desire for being beholden to some company dictating my goals and hiding my achievements. Writing this up has proven to be a very liberating and insightful experience for myself, just the way my <a href="https://github.com/bastibe/org-journal">research journal</a> is for my day-to-day work. Putting ideas and algorithms in writing is an incredibly useful tool for finding one's place in the world and contributing to its betterment!
</p>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2014-07-20-working-and-learning.html</link>
  <pubDate>Sun, 20 Jul 2014 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Speeding Up Org Mode Publishing</title>
  <description><![CDATA[<p>
I use <code>org-mode</code> to write my blog, and <code>org-publish</code> as my static site generator. While this system works great, I have found it to be really really slow. At this point, my blog has 39 posts, and <code>org-publish</code> will take upwards of a <i>minute</i> to re-generate all of them. To make matters worse, my workflow usually involves several re-generations per post. This gets old pretty quickly.
</p>

<p>
Since I am on a long train ride today, I decided to have a go at this problem. By the way, train rides and hacking on Emacs are a perfect match: Internet connectivity on trains is usually terrible, but Emacs is self-documenting, so internet access doesn't matter as much. It is sobering to work without an internet connection every once in a while, and Emacs is a perfect target for this kind of work.
</p>

<p>
One of the many things I learned on train rides is that Emacs in fact contains its own profiler! So, I ran <code>(progn (profiler-start 'cpu) (org-publish "blog") (profiler-report))</code> to get a hierarchical list of where <code>org-publish</code> was spending its time. Turns out, most of its total run time was spent in functions relating to version control (starting with <code>vc-</code>).
</p>

<p>
Some package in my configuration set up <code>vc-find-file-hook</code> as part of <code>find-file-hook</code>. This means that every time <code>org-publish</code> opens a file, Emacs will look for the containing git repository and query its status. This takes forever! Worse yet, I don't even use <code>vc-git</code> at all. All my git interaction is done through <code>magit</code>.
</p>

<p>
But Emacs wouldn't be Emacs if this could not be fixed with a line or two of elisp. <code>(remove-hook 'find-file-hooks 'vc-find-file-hook)</code> will do the trick. This brought the runtime of <code>org-publish</code> down to 15 seconds. Yay for profiling and yay for Emacs!
</p>
]]></description>
  <link>http://bastibe.de/2014-05-07-speeding-up-org-publishing.html</link>
  <pubDate>Wed, 07 May 2014 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Snow Crash</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2014-05/snow-crash.jpg" alt="snow-crash.jpg" />
</p>
</div>

<p>
This is probably the one book that made me who I am. I bought this book in the English section of a Norwegian bookstore while on a bike trip there. I was just out of school and I had not decided yet what to do with my life. My English was just barely good enough to understand Snow Crash.
</p>

<p>
At its essence, Snow Crash introduced me to the idea of hacking. That is, hacking in the abstract sense of <i>using knowledge about the inner workings of things to influence the world</i>. At the time, I didn't know anything about software yet. Even though the main hero of the book is a master hacker and part of the book plays out in cyber space, it never really talks about the act of writing code. I would learn about that later.
</p>

<p>
Snow Crash was my red pill. Re-reading it today, after having been a professional software engineer for a few years, I can't overstate how influential this book has been in my life. It instilled in me the desire to understand the deep structures of things. And with that, the ability to influence and create the world around me. It set me on the path to becoming who I am today.
</p>

<p>
Snow Crash also served as my introduction to modern utopian cyberpunk. Even though I spent my youth playing video games and reading bad sci-fi, I still remember Snow Crash as my formal introduction to cyber space, virtual avatars, megacorporations, and light cycle races. And it told of the awesome power of reason.
</p>

<p>
If you haven't already, go read this book!
</p>
]]></description>
  <link>http://bastibe.de/2014-05-03-snow-crash.html</link>
  <pubDate>Tue, 30 Nov -001 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Sound in Python</title>
  <description><![CDATA[<p>
Have you ever wanted to work with audio data in Python? I know I do. I want to record from the microphone, I want to play sounds. I want to read and write audio files. If you ever tried this in Python, you know it is kind of a pain.
</p>

<p>
It's not for a lack of libraries though. You can read sound files using <a href="http://docs.python.org/2/library/wave.html">wave</a>, SciPy provides <a href="http://docs.scipy.org/doc/scipy/reference/tutorial/io.html#module-scipy.io.wavfile">scipy.io.wavfile</a>, and there is a SciKit called <a href="http://scikits.appspot.com/audiolab">scikits.audiolab</a>. And except for <code>scikits.audiolab</code>, these return the data as raw <code>bytes</code>. Like, they parse the WAVE header and that is great and all, but you still have to decode your audio data yourself.
</p>

<p>
The same thing goes for playing/recording audio: <a href="http://people.csail.mit.edu/hubert/pyaudio/">PyAudio</a> provides nifty bindings to <a href="http://www.portaudio.com/">portaudio</a>, but you still have to decode your raw <code>bytes</code> by hand.
</p>

<p>
But really, what I want is something different: When I record from the microphone, I want to get a NumPy array, not <code>bytes</code>. You know, something I can work with! And then I want to throw that array into a sound file, or play it on a different sound card, or do some calculations on it!
</p>

<p>
So one fateful day, I was sufficiently frustrated with the state of things that I set out to create just that. Really, I only wanted to play around with <a href="http://cffi.readthedocs.org/">cffi</a>, but that is beside the point.
</p>

<p>
So, lets read some audio data, shall we?
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> pysoundfile <span style="color: #111111; font-weight: bold;">import</span> SoundFile
<span style="color: #111111;">data</span> = SoundFile(<span style="color: #303030;">'sad_song.wav'</span>)[:]
</pre>
</div>

<p>
done. All the audio data is now available as a NumPy array in <code>data</code>. Just like that.
</p>

<p>
Awesome, isn't it?
</p>

<p>
OK, that was easy. So let's read only the first and last 100 frames!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> pysoundfile <span style="color: #111111; font-weight: bold;">import</span> SoundFile
<span style="color: #111111;">f</span> = SoundFile(<span style="color: #303030;">'long_song.flac'</span>)
<span style="color: #111111;">first</span> = f[:100]
<span style="color: #111111;">last</span> = f[-100:]
</pre>
</div>

<p>
This really only read the first and last bit. Not everything in between!
</p>

<p>
Note that at no point I did explicitly open or close a file! This is Python! We can do that! When the <code>SoundFile</code> object is created, it opens the file. When it goes out of scope, it closes the file. It's as simple as that. Or just use <code>SoundFile</code> in a context manager. That works as well.
</p>

<p>
Oh, but I want to use the sound card as well! I want to record audio to a file!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> pysoundcard <span style="color: #111111; font-weight: bold;">import</span> Stream
<span style="color: #111111; font-weight: bold;">from</span> pysoundfile <span style="color: #111111; font-weight: bold;">import</span> SoundFile, ogg_file, write_mode
<span style="color: #111111; font-weight: bold;">with</span> Stream() <span style="color: #111111; font-weight: bold;">as</span> s: <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">opens your default audio device</span>
    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">This is supposed to be a new file, so specify it completely</span>
    <span style="color: #111111;">f</span> = SoundFile(<span style="color: #303030;">'happy_song.ogg'</span>, sample_rate=s.sample_rate,
                  channels=s.channels, <span style="color: #111111; background-color: #fffff8;">format</span>=ogg_file,
                  mode=write_mode)
    f.write(s.read(s.sample_rate)) <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">one second</span>
</pre>
</div>

<p>
Read from the stream, write to a file. It works the other way round, too!
</p>

<p>
And that's really all there is to it. Working with audio data in Python is easy now!
</p>

<p>
Of course, there is much more you could do. You could create a callback function and be called every four<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> frames with new audio data to process. You could request your audio data as <code>int16</code>, because that would be totally awesome! You could use many different sound cards at the same time, and route stuff to and fro to your hearts desire! And you can run all this on Linux using ALSA or Jack, or on Windows using DirectSound or ASIO, or on Mac using CoreAudio<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>. And you already saw that you can read Wave files, OGG, FLAC or MAT-files<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>.
</p>

<p>
You can download these libraries from <a href="https://pypi.python.org/pypi">PyPi</a>, or use the binary Windows installers on Github. Or you can look at the source on Github (<a href="https://github.com/bastibe/PySoundFile">PySoundFile</a>, <a href="https://github.com/bastibe/PySoundCard">PySoundCard</a>), because Open Source is awesome like that! Also, you might find some bugs, because I haven't found them all yet. Then, I would like you to open an issue on Github. Or if have a great idea of how to improve things, please let me know as well.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
You can use any block size you want. Less than 4 frames per block can be really taxing for your CPU though, so be careful or you start dropping frames.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
More precisely: Everything that <a href="http://www.portaudio.com/">portaudio</a> supports.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
More precisely: Everything that <a href="http://www.mega-nerd.com/libsndfile/">libsndfile</a> supports.
</p></div></div>


</div>
</div>]]></description>
  <link>http://bastibe.de/2013-11-27-audio-in-python.html</link>
  <pubDate>Wed, 27 Nov 2013 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Blogging with Emacs</title>
  <description><![CDATA[<p>
When I first started blogging, it was on <a href="http://blogger.com/">blogger.com</a> (on the now-abandoned domain <a href="http://daskrachen.com/">daskrachen.com</a>). On blogger, writing new posts (back then) involved typing raw HTML into a web form. Not what I would call ideal. This improved somewhat when they introduced a fancy rich text editor that would automatically transform beautiful text into a horrible formatting mess.
</p>

<p>
Thus I switched. Getting my blog posts out of blogger was&#x2026; Let's just say that I lost anything I didn't have a plain-text backup of. And <a href="http://bastibe.de/2012-07-18-blogging-with-pelican.html">I switched</a> to <a href="http://pelican.readthedocs.org/en/3.3.0/">Pelican</a>, a static site generator written in Python. It worked beautifully, until I updated something, at which point it resorted to just throwing errors. Now I don't have anything in particular against Python stack traces, but these particular traces traced deep into stuff that was (then?) too complex for me to understand.
</p>

<p>
Thus I switched again. This time to <a href="https://github.com/redline6561/coleslaw">C()λ∈slaw■</a>, a static site generator written in Common Lisp. Mainly because I was interested in Common Lisp at the time. It worked really well. However, this was supposed to give me a chance to delve into Common Lisp, and I failed to understand C()λ∈slaw■'s code. Realistically though, this is probably not C()λ∈slaw■'s fault. My knowledge of Common Lisp is far from perfect.
</p>

<p>
Thus it was time to switch again. Having been enamored with Emacs for the last few years, it made sense to blog with Emacs as well. Besides, I am kind of fed up with the many conflicting flavors of Markdown out there and have switched my personal note-taking to <a href="http://orgmode.org/">Org mode</a> long ago. So let's set up Emacs and Org as a blogging platform!
</p>

<p>
Before we start though, a short disclaimer: This will be a very bare bones blogging engine. It will consist of some articles, a front page, an archive page, and an RSS feed. And you will have to manage the front page and RSS feed semi-manually. No tags, no fancy history. Just what you see here.
</p>

<p>
On the plus side, this will be implemented entirely within Emacs and very simple to understand. Writing a new blog post will be as simple as writing an Org file and hitting a key combination! And you will get all of Org's fancy syntax highlighting and export magic for free!
</p>

<p>
Getting the pages to work is rather simple: You have to create a "publishing project" that specifies a <code>base-directory</code> where your Org files live and a <code>publishing-directory</code>, where the HTML files are going to be stored. Since this is Emacs, you could make your publishing directory any TRAMP path you like and insta-publish your workings!
</p>

<p>
(BTW, I am using Org 8.2.2 and I believe you need at least 8.0 for these examples to work)
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">require</span> '<span style="color: #111111;">ox-html</span>)
(<span style="color: #111111; font-weight: bold;">require</span> '<span style="color: #111111;">ox-rss</span>)
(<span style="color: #111111; font-weight: bold;">require</span> '<span style="color: #111111;">ox-publish</span>)
(setq org-publish-project-alist
      '((<span style="color: #303030;">"blog-content"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-directory</span> <span style="color: #303030;">"~/Projects/blog/posts"</span>
         <span style="color: #111111; background-color: #fffff8;">:html-extension</span> <span style="color: #303030;">"html"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-extension</span> <span style="color: #303030;">"org"</span>
         <span style="color: #111111; background-color: #fffff8;">:publishing-directory</span> <span style="color: #303030;">"~/Projects/blog/publish"</span>
         <span style="color: #111111; background-color: #fffff8;">:publishing-function</span> (org-html-publish-to-html)
         <span style="color: #111111; background-color: #fffff8;">:recursive</span> t          <span style="color: #303030; font-style: italic;">; </span><span style="color: #303030; font-style: italic;">descend into sub-folders?</span>
         <span style="color: #111111; background-color: #fffff8;">:section-numbers</span> nil  <span style="color: #303030; font-style: italic;">; </span><span style="color: #303030; font-style: italic;">don't create numbered sections</span>
         <span style="color: #111111; background-color: #fffff8;">:with-toc</span> nil         <span style="color: #303030; font-style: italic;">; </span><span style="color: #303030; font-style: italic;">don't create a table of contents</span>
         <span style="color: #111111; background-color: #fffff8;">:with-latex</span> t         <span style="color: #303030; font-style: italic;">; </span><span style="color: #303030; font-style: italic;">do use MathJax for awesome formulas!</span>
         <span style="color: #111111; background-color: #fffff8;">:html-head-extra</span> <span style="color: #303030;">""</span>   <span style="color: #303030; font-style: italic;">; </span><span style="color: #303030; font-style: italic;">extra &lt;head&gt; entries go here</span>
         <span style="color: #111111; background-color: #fffff8;">:html-preamble</span> <span style="color: #303030;">""</span>     <span style="color: #303030; font-style: italic;">; </span><span style="color: #303030; font-style: italic;">this stuff is put before your post</span>
         <span style="color: #111111; background-color: #fffff8;">:html-postamble</span> <span style="color: #303030;">""</span>    <span style="color: #303030; font-style: italic;">; </span><span style="color: #303030; font-style: italic;">this stuff is put after your post</span>
)))
</pre>
</div>

<p>
Now hit <code>M-x org-publish</code>, type in <code>blog-content</code>, and you have a blog! Awesome! We are done here.
</p>

<p>
Well, how about an archive page that lists all your previous blog entries?
</p>

<p>
Emacs can auto-generate this for you. Simply add these lines to <code>blog-content</code>:
</p>

<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #111111; background-color: #fffff8;">:auto-sitemap</span> t
<span style="color: #111111; background-color: #fffff8;">:sitemap-filename</span> <span style="color: #303030;">"archive.org"</span>
<span style="color: #111111; background-color: #fffff8;">:sitemap-title</span> <span style="color: #303030;">"Archive"</span>
<span style="color: #111111; background-color: #fffff8;">:sitemap-sort-files</span> anti-chronologically
<span style="color: #111111; background-color: #fffff8;">:sitemap-style</span> list
<span style="color: #111111; background-color: #fffff8;">:makeindex</span> t
</pre>
</div>

<p>
Also, you can put something like
</p>

<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #111111; text-decoration: underline;">a</span> <span style="color: #111111;">href</span>=<span style="color: #303030;">"archive.html"</span>&gt;Other posts&lt;/<span style="color: #111111; text-decoration: underline;">a</span>&gt;
</pre>
</div>

<p>
into your <code>:html-postamble</code> to make every page link to this. You can also add your <a href="https://disqus.com/">Disqus</a> snippet there to enable comments.
</p>

<p>
Adding a front page is simple, too. My front page is simply a normal page called <i>index.org</i>, which contains links and slugs for every article I want to have on the front page. For example:
</p>

<div class="org-src-container">

<pre class="src src-org"><span style="color: #7f7f7f;">#+TITLE:</span> <span style="color: #111111; font-size: 150%; text-decoration: underline;">RECENT POSTS</span>

<span style="color: #111111;">* </span><span style="color: #111111; text-decoration: underline;">Speeding up Matplotlib</span>
<span style="color: #303030; font-style: italic;">#+include: "~/Projects/blog/posts/2013-05-30-speeding-up-matplotlib.org" :lines "4-9"</span>
<span style="color: #111111; text-decoration: underline;">read more...</span>
</pre>
</div>

<p>
But a blog is more than just text. There are images and CSS, too. I keep all that stuff in a separate directory and use a separate publishing project to copy it over to the publishing directory. Just add to your <code>publishing-alist</code>:
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #303030;">"blog-static"</span>
 <span style="color: #111111; background-color: #fffff8;">:base-directory</span> <span style="color: #303030;">"~/Projects/blog/static"</span>
 <span style="color: #111111; background-color: #fffff8;">:base-extension</span> <span style="color: #303030;">"png</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">jpg</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">css"</span>
 <span style="color: #111111; background-color: #fffff8;">:publishing-directory</span> <span style="color: #303030;">"~/Projects/blog/publish/static"</span>
 <span style="color: #111111; background-color: #fffff8;">:recursive</span> t
 <span style="color: #111111; background-color: #fffff8;">:publishing-function</span> org-publish-attachment)
</pre>
</div>

<p>
Setting up the RSS feed works similarly. The RSS feed is created from a single Org file. Create a new publishing project and put it into your <code>publishing-alist</code>
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #303030;">"blog-rss"</span>
 <span style="color: #111111; background-color: #fffff8;">:base-directory</span> <span style="color: #303030;">"~/Projects/blog/posts"</span>
 <span style="color: #111111; background-color: #fffff8;">:base-extension</span> <span style="color: #303030;">"org"</span>
 <span style="color: #111111; background-color: #fffff8;">:publishing-directory</span> <span style="color: #303030;">"~/Projects/blog/publish"</span>
 <span style="color: #111111; background-color: #fffff8;">:publishing-function</span> (org-rss-publish-to-rss)
 <span style="color: #111111; background-color: #fffff8;">:html-link-home</span> <span style="color: #303030;">"http://bastibe.de/"</span>
 <span style="color: #111111; background-color: #fffff8;">:html-link-use-abs-url</span> t
 <span style="color: #111111; background-color: #fffff8;">:exclude</span> <span style="color: #303030;">".*"</span>
 <span style="color: #111111; background-color: #fffff8;">:include</span> (<span style="color: #303030;">"rss.org"</span>)
 <span style="color: #111111; background-color: #fffff8;">:with-toc</span> nil
 <span style="color: #111111; background-color: #fffff8;">:section-numbers</span> nil
 <span style="color: #111111; background-color: #fffff8;">:title</span> <span style="color: #303030;">"Bastis Scratchpad on the Internet"</span>)
</pre>
</div>

<p>
Make sure to exclude this <code>rss.org</code> from the <code>blog-content</code> project by adding it's name to the <code>:exclude</code> variable though. This <code>rss.org</code> file should contain headlines for every blog post. Every headline needs a publishing date and a permalink as property and the body of the post as content:
</p>

<div class="org-src-container">

<pre class="src src-org"><span style="color: #111111;">* Speeding up Matplotlib</span>
<span style="color: #111111;">:PROPERTIES:</span>
<span style="color: #111111;">:RSS_PERMALINK:</span> "<span style="color: #111111; text-decoration: underline;">http://bastibe.de/2013-05-30-speeding-up-matplotlib.html</span>"
<span style="color: #111111;">:PUBDATE:</span> &lt;2013-05-30&gt;
<span style="color: #111111;">:END:</span>
<span style="color: #303030; font-style: italic;">#+include: "~/Projects/blog/posts/2013-05-30-speeding-up-matplotlib.org" :lines "4-"</span>
</pre>
</div>

<p>
I exclude the first three lines, since they only contain <code>#+title</code>, <code>#+date</code>, and <code>#+tags</code>. You should at least exclude the <code>#+title</code> line. Otherwise, <code>ox-rss</code> will get confused about which title to choose for the feed.
</p>

<p>
You can even create a meta publishing project that executes all three projects in one fell swoop!
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #303030;">"blog"</span>
 <span style="color: #111111; background-color: #fffff8;">:components</span> (<span style="color: #303030;">"blog-content"</span> <span style="color: #303030;">"blog-static"</span> <span style="color: #303030;">"blog-rss"</span>))
</pre>
</div>

<p>
There is one more thing that is kind of fiddly though: As I said, I use Disqus for comments, but I don't want to have comment boxes on the front page or the archive. Thankfully though, <code>ox-html</code> allows you to set <code>:html-preamble</code> and <code>:html-postamble</code> to a function, in which case that function can decide what pre/postamble to draw! The function can take an optional argument that contains a <code>plist</code> of article metadata. In this case, I decide on the <code>:title</code> metadata whether to print the archive link and Disqus, only the archive link, or neither:
</p>

<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #111111; background-color: #fffff8;">:html-postamble</span>
(<span style="color: #111111; font-weight: bold;">lambda</span> (info)
  <span style="color: #111111;">"Do not show disqus for Archive and Recent Posts"</span>
  (<span style="color: #111111; font-weight: bold;">cond</span> ((string= (car (plist-get info <span style="color: #111111; background-color: #fffff8;">:title</span>)) <span style="color: #303030;">"Archive"</span>)
         <span style="color: #303030;">""</span>)
        ((string= (car (plist-get info <span style="color: #111111; background-color: #fffff8;">:title</span>)) <span style="color: #303030;">"Recent Posts"</span>)
         <span style="color: #303030;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;"</span>)
        (t
    <span style="color: #303030;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;</span>
<span style="color: #303030;">     &lt;div id=\"disqus_thread\"&gt;&lt;/div&gt;</span>
<span style="color: #303030;">     &lt;script type=\"text/javascript\"&gt;</span>
<span style="color: #303030;">     ..."</span>
</pre>
</div>

<p>
This should get you started! For completeness, here is my complete configuration:
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">require</span> '<span style="color: #111111;">ox-html</span>)
(<span style="color: #111111; font-weight: bold;">require</span> '<span style="color: #111111;">ox-rss</span>)
(<span style="color: #111111; font-weight: bold;">require</span> '<span style="color: #111111;">ox-publish</span>)
(setq org-publish-project-alist
      '((<span style="color: #303030;">"blog"</span>
         <span style="color: #111111; background-color: #fffff8;">:components</span> (<span style="color: #303030;">"blog-content"</span> <span style="color: #303030;">"blog-static"</span> <span style="color: #303030;">"blog-rss"</span>))
        (<span style="color: #303030;">"blog-content"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-directory</span> <span style="color: #303030;">"~/Projects/blog/posts"</span>
         <span style="color: #111111; background-color: #fffff8;">:html-extension</span> <span style="color: #303030;">"html"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-extension</span> <span style="color: #303030;">"org"</span>
         <span style="color: #111111; background-color: #fffff8;">:publishing-directory</span> <span style="color: #303030;">"~/Projects/blog/publish"</span>
         <span style="color: #111111; background-color: #fffff8;">:publishing-function</span> (org-html-publish-to-html)
         <span style="color: #111111; background-color: #fffff8;">:auto-sitemap</span> t
         <span style="color: #111111; background-color: #fffff8;">:sitemap-filename</span> <span style="color: #303030;">"archive.org"</span>
         <span style="color: #111111; background-color: #fffff8;">:sitemap-title</span> <span style="color: #303030;">"Archive"</span>
         <span style="color: #111111; background-color: #fffff8;">:sitemap-sort-files</span> anti-chronologically
         <span style="color: #111111; background-color: #fffff8;">:sitemap-style</span> list
         <span style="color: #111111; background-color: #fffff8;">:makeindex</span> t
         <span style="color: #111111; background-color: #fffff8;">:recursive</span> t
         <span style="color: #111111; background-color: #fffff8;">:section-numbers</span> nil
         <span style="color: #111111; background-color: #fffff8;">:with-toc</span> nil
         <span style="color: #111111; background-color: #fffff8;">:with-latex</span> t
         <span style="color: #111111; background-color: #fffff8;">:html-head-include-default-style</span> nil
         <span style="color: #111111; background-color: #fffff8;">:html-head-include-scripts</span> nil
         <span style="color: #111111; background-color: #fffff8;">:html-head-extra</span>
         <span style="color: #303030;">"&lt;link rel=\"alternate\" type=\"appliation/rss+xml\"</span>
<span style="color: #303030;">                href=\"http://bastibe.de/rss.xml\"</span>
<span style="color: #303030;">                title=\"RSS feed for bastibe.de\"&gt;</span>
<span style="color: #303030;">          &lt;link href='http://fonts.googleapis.com/css?family=Roboto&amp;subset=latin' rel='stylesheet' type='text/css'&gt;</span>
<span style="color: #303030;">          &lt;link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono' rel='stylesheet' type='text/css'&gt;</span>
<span style="color: #303030;">          &lt;link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span>
<span style="color: #303030;">          &lt;title&gt;Basti's Scratchpad on the Internet&lt;/title&gt;</span>
<span style="color: #303030;">          &lt;meta http-equiv=\"content-type\" content=\"application/xhtml+xml; charset=UTF-8\" /&gt;</span>
<span style="color: #303030;">          &lt;meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\"&gt;"</span>
         <span style="color: #111111; background-color: #fffff8;">:html-preamble</span>
         <span style="color: #303030;">"&lt;div class=\"header\"&gt;</span>
<span style="color: #303030;">              &lt;a href=\"http://bastibe.de\"&gt;Basti's Scratchpad on the Internet&lt;/a&gt;</span>
<span style="color: #303030;">              &lt;div class=\"sitelinks\"&gt;</span>
<span style="color: #303030;">                  &lt;a href=\"http://alpha.app.net/bastibe\"&gt;alpha.app.net&lt;/a&gt;  | &lt;a href=\"http://github.com/bastibe\"&gt;Github&lt;/a&gt;</span>
<span style="color: #303030;">              &lt;/div&gt;</span>
<span style="color: #303030;">          &lt;/div&gt;"</span>
         <span style="color: #111111; background-color: #fffff8;">:html-postamble</span>
         (<span style="color: #111111; font-weight: bold;">lambda</span> (info)
           <span style="color: #111111;">"Do not show disqus for Archive and Recent Posts"</span>
           (<span style="color: #111111; font-weight: bold;">cond</span> ((string= (car (plist-get info <span style="color: #111111; background-color: #fffff8;">:title</span>)) <span style="color: #303030;">"Archive"</span>) <span style="color: #303030;">""</span>)
                 ((string= (car (plist-get info <span style="color: #111111; background-color: #fffff8;">:title</span>)) <span style="color: #303030;">"Recent Posts"</span>)
                  <span style="color: #303030;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;"</span>)
                 (t
             <span style="color: #303030;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;</span>
<span style="color: #303030;">              &lt;div id=\"disqus_thread\"&gt;&lt;/div&gt;</span>
<span style="color: #303030;">              &lt;script type=\"text/javascript\"&gt;</span>
<span style="color: #303030;">              /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>
<span style="color: #303030;">              var disqus_shortname = 'bastibe';</span>
<span style="color: #303030;">              /* * * DON'T EDIT BELOW THIS LINE * * */</span>
<span style="color: #303030;">              (function() {</span>
<span style="color: #303030;">                var dsq = document.createElement('script');</span>
<span style="color: #303030;">                dsq.type = 'text/javascript';</span>
<span style="color: #303030;">                dsq.async = true;</span>
<span style="color: #303030;">                dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';</span>
<span style="color: #303030;">                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);</span>
<span style="color: #303030;">                  })();</span>
<span style="color: #303030;">              &lt;/script&gt;</span>
<span style="color: #303030;">              &lt;noscript&gt;Please enable JavaScript to view the</span>
<span style="color: #303030;">                  &lt;a href=\"http://disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span>
<span style="color: #303030;">              &lt;a href=\"http://disqus.com\" class=\"dsq-brlink\"&gt;comments powered by &lt;span class=\"logo-disqus\"&gt;Disqus&lt;/span&gt;&lt;/a&gt;"</span>)))
         <span style="color: #111111; background-color: #fffff8;">:exclude</span> <span style="color: #303030;">"rss.org</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">archive.org</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">theindex.org"</span>)
        (<span style="color: #303030;">"blog-rss"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-directory</span> <span style="color: #303030;">"~/Projects/blog/posts"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-extension</span> <span style="color: #303030;">"org"</span>
         <span style="color: #111111; background-color: #fffff8;">:publishing-directory</span> <span style="color: #303030;">"~/Projects/blog/publish"</span>
         <span style="color: #111111; background-color: #fffff8;">:publishing-function</span> (org-rss-publish-to-rss)
         <span style="color: #111111; background-color: #fffff8;">:html-link-home</span> <span style="color: #303030;">"http://bastibe.de/"</span>
         <span style="color: #111111; background-color: #fffff8;">:html-link-use-abs-url</span> t
         <span style="color: #111111; background-color: #fffff8;">:exclude</span> <span style="color: #303030;">".*"</span>
         <span style="color: #111111; background-color: #fffff8;">:include</span> (<span style="color: #303030;">"rss.org"</span>)
         <span style="color: #111111; background-color: #fffff8;">:with-toc</span> nil
         <span style="color: #111111; background-color: #fffff8;">:section-numbers</span> nil
         <span style="color: #111111; background-color: #fffff8;">:title</span> <span style="color: #303030;">"Bastis Scratchpad on the Internet"</span>)
        (<span style="color: #303030;">"blog-static"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-directory</span> <span style="color: #303030;">"~/Projects/blog/static"</span>
         <span style="color: #111111; background-color: #fffff8;">:base-extension</span> <span style="color: #303030;">"png</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">jpg</span><span style="color: #303030; font-weight: bold;">\\</span><span style="color: #303030; font-weight: bold;">|</span><span style="color: #303030;">css"</span>
         <span style="color: #111111; background-color: #fffff8;">:publishing-directory</span> <span style="color: #303030;">"~/Projects/blog/publish/static"</span>
         <span style="color: #111111; background-color: #fffff8;">:recursive</span> t
         <span style="color: #111111; background-color: #fffff8;">:publishing-function</span> org-publish-attachment)))
</pre>
</div>

<p>
All other sources, including the source code to all blog posts, can be found on <a href="https://github.com/bastibe/bastibe.github.com">Github</a> (the <i>master</i> branch contains HTML, the <i>source</i> branch contains Org).
</p>

<p>
<b>Addendum:</b> I have since discovered that <code>org-rss-publish-to-rss</code> only handles top-level headlines, but disregards second-level or higher-level headlines. Thus, if you have a post with nested headlines, your RSS feed will only include the text of the top-level one. To fix this, I advised <code>org-rss-publish-to-rss</code> to use <code>org-html-headline</code> for non-top-level headlines like this:
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">defadvice</span> <span style="color: #111111; text-decoration: underline;">org-rss-headline</span>
  (around my-rss-headline (headline contents info) activate)
  <span style="color: #111111;">"only use org-rss-headline for top level headlines"</span>
  (<span style="color: #111111; font-weight: bold;">if</span> (&lt; (org-export-get-relative-level headline info) 2)
      ad-do-it
    (setq ad-return-value (org-html-headline headline contents info))))
</pre>
</div>

<p>
Now, the RSS feed includes the full text of all articles.
</p>
]]></description>
  <link>http://bastibe.de/2013-11-13-blogging-with-emacs.html</link>
  <pubDate>Wed, 13 Nov 2013 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Speeding up Matplotlib</title>
  <description><![CDATA[<p>
For the record, <a href="http://matplotlib.org/">Matplotlib</a> is awesome! Its output looks amazing, it is extremely configurable and very easy to use. What more could you want?
</p>

<p>
Well&#x2026; speed. If there is one thing I could criticize about Matplotlib, it is its relative slowness. To measure that, lets make a very simple line plot and draw some random numbers as quickly as possible:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #111111; font-weight: bold;">as</span> plt
<span style="color: #111111; font-weight: bold;">import</span> numpy <span style="color: #111111; font-weight: bold;">as</span> np
<span style="color: #111111; font-weight: bold;">import</span> time

<span style="color: #111111;">fig</span>, <span style="color: #111111;">ax</span> = plt.subplots()

<span style="color: #111111;">tstart</span> = time.time()
<span style="color: #111111;">num_plots</span> = 0
<span style="color: #111111; font-weight: bold;">while</span> time.time()-tstart &lt; 1:
    ax.clear()
    ax.plot(np.random.randn(100))
    plt.pause(0.001)
    <span style="color: #111111;">num_plots</span> += 1
<span style="color: #111111; font-weight: bold;">print</span>(num_plots)
</pre>
</div>

<p>
On my machine, I get about 11 plots per second. I am using <code>pause()</code> here to update the plot without blocking. The correct way to do this is to use <code>draw()</code> instead, but due to a bug in the Qt4Agg backend, you can't use it there. If you are not using the Qt4Agg backend, <code>draw()</code> is supposedly the correct choice.
</p>

<p>
For a single plot, ten plots per second is not terrible. But then, this is really the simplest case possible, so ten frames per second in the simplest case probably means bad things for not so simple cases.
</p>

<p>
One thing that really takes time here is creating all the axes and text labels over and over again. So let's not do that.
</p>

<p>
Instead of calling <code>clear()</code> and then <code>plot()</code>, thus effectively deleting everything about the plot, then re-creating it for every frame, we can keep an existing plot and only modify its data:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">fig</span>, <span style="color: #111111;">ax</span> = plt.subplots()
line, = ax.plot(np.random.randn(100))

<span style="color: #111111;">tstart</span> = time.time()
<span style="color: #111111;">num_plots</span> = 0
<span style="color: #111111; font-weight: bold;">while</span> time.time()-tstart &lt; 1:
    line.set_ydata(np.random.randn(100))
    plt.pause(0.001)
    <span style="color: #111111;">num_plots</span> += 1
<span style="color: #111111; font-weight: bold;">print</span>(num_plots)
</pre>
</div>

<p>
which yields about 26 plots per second. Not bad for a simple change like this. The downside is that the axes are not re-scaled any longer when the data changes. Thus, they won't change their limits based on the data any more.
</p>

<p>
Profiling this yields some interesting results:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-right">ncalls</td>
<td class="org-right">tottime</td>
<td class="org-right">percall</td>
<td class="org-right">cumtime</td>
<td class="org-right">percall</td>
<td class="org-left">filename:lineno(function)</td>
</tr>

<tr>
<td class="org-right">15</td>
<td class="org-right">0.167</td>
<td class="org-right">0.011</td>
<td class="org-right">0.167</td>
<td class="org-right">0.011</td>
<td class="org-left">{built-in method sleep)</td>
</tr>
</tbody>
</table>

<p>
The one function that uses the biggest chunk of runtime is <code>sleep()</code>, of all things. Clearly, this is not what we want. Delving deeper into the profiler shows that this is indeed happening in the call do <code>pause()</code>. Then again, I <i>was</i> wondering if using <i>pause</i> really was a great idea for performance&#x2026;
</p>

<p>
As it turns out, <code>pause()</code> internally calls <code>fig.canvas.draw()</code>, then <code>plt.show()</code>, then <code>fig.canvas.start_event_loop()</code>. The default implementation of <code>fig.canvas.start_event_loop()</code> then calls <code>fig.canvas.flush_events()</code>, then sleeps for the requested time. To add insult to injury, it even insists on sleeping at least one hundredth of a second, which actually explains the profiler output of 0.167 seconds of <code>sleep()</code> for 15 calls very well.
</p>

<p>
Putting this all together now yields:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">fig</span>, <span style="color: #111111;">ax</span> = plt.subplots()
line, = ax.plot(np.random.randn(100))

<span style="color: #111111;">tstart</span> = time.time()
<span style="color: #111111;">num_plots</span> = 0
<span style="color: #111111; font-weight: bold;">while</span> time.time()-tstart &lt; 1:
    line.set_ydata(np.random.randn(100))
    fig.canvas.draw()
    fig.canvas.flush_events()
    <span style="color: #111111;">num_plots</span> += 1
<span style="color: #111111; font-weight: bold;">print</span>(num_plots)
</pre>
</div>

<p>
which now plots about 40 frames per second. Note that the call to <code>show()</code> mentioned earlier can be omitted since the figure is already on screen. <code>flush_events()</code> just runs the Qt event loop, so there is probably nothing to optimize there.
</p>

<p>
The only thing left to optimize now is thus <code>fig.canvas.draw()</code>. What this really is doing is drawing all the artists contained in the <code>ax</code>. Those artists can be accessed using <code>ax.get_children()</code>. For a simple plot like this, the artists are:
</p>

<ul class="org-ul">
<li>the background <code>ax.patch</code></li>
<li>the line, as returned from the <code>plot()</code> function</li>
<li>the spines <code>ax.spines</code></li>
<li>the axes <code>ax.xaxis</code> and <code>ax.yaxis</code></li>
</ul>

<p>
What we can do here is to selectively draw only the parts that are actually changing. That is, at least the background and the line. To only redraw these, the code now looks like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">fig</span>, <span style="color: #111111;">ax</span> = plt.subplots()
line, = ax.plot(np.random.randn(100))
plt.show(block=<span style="color: #111111;">False</span>)

<span style="color: #111111;">tstart</span> = time.time()
<span style="color: #111111;">num_plots</span> = 0
<span style="color: #111111; font-weight: bold;">while</span> time.time()-tstart &lt; 5:
    line.set_ydata(np.random.randn(100))
    ax.draw_artist(ax.patch)
    ax.draw_artist(line)
    fig.canvas.update()
    fig.canvas.flush_events()
    <span style="color: #111111;">num_plots</span> += 1
<span style="color: #111111; font-weight: bold;">print</span>(num_plots/5)
</pre>
</div>

<p>
Note that you have to add <code>fig.canvas.update()</code> to copy the newly rendered lines to the drawing backend.
</p>

<p>
This now plots about 500 frames per second. Five hundred times per second! Frankly, this is quite amazing!
</p>

<p>
Note that since we are only redrawing the background and the line, some detail in the axes will be overwritten. To also draw the spines, use <code>for spine in ax.spines.values(): ax.draw_artist(spine)</code>. To draw the axes, use <code>ax.draw_artist(ax.xaxis)</code> and <code>ax.draw_artist(ax.yaxis)</code>. If you draw all of them, you get roughly the same performance as <code>fig.canvas.draw()</code>. The axes in particular are quite expensive.
</p>

<p>
There is also <a href="http://stackoverflow.com/a/8956211/1034">a way</a> of drawing the complete figure once and copying the complete but empty background, then reinstating that and only plotting a new line on top of it. This is equally fast as the code above without any visual artifacts, but breaks if you resize the plot.
</p>

<p>
In conclusion, I am quite impressed with the flexibility of Matplotlib. Matplotlib by default values quality over performance. But if you really need the performance at some point, it is flexible and hackable enough to let you tweak it to your hearts content. Really, an amazing piece of technology!
</p>

<p>
<b>EDIT</b>: As it turns out, <code>fig.canvas.blit(ax.bbox)</code> is a bad idea since it leaks memory like crazy. What you should use instead is <code>fig.canvas.update()</code>, which is equally fast but does not leak memory.
</p>
]]></description>
  <link>http://bastibe.de/2013-05-30-speeding-up-matplotlib.html</link>
  <pubDate>Thu, 30 May 2013 10:50:00 +0200</pubDate>
</item>
<item>
  <title>A Python Primer for Matlab Users</title>
  <description><![CDATA[<blockquote>
<p>
Why would you want to use Python over Matlab?
</p>
</blockquote>

<ul class="org-ul">
<li>Because Python is free and Matlab is not.</li>
<li>Because Python is a general purpose programming language and Matlab is not.</li>
</ul>

<p>
Let me qualify that a bit. Matlab is a very useful programming environment for numerical problems. For a very particular set of problems, Matlab is an awesome tool. For many other problems however, it is just about unusable. For example, you would not write a complex GUI program in Matlab, you would not write your blogging engine in Matlab and you would not write a web service in Matlab. You can do all that and more in Python.
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Python as a Matlab replacement</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
The biggest strength of Matlab is its matrix engine. Most of the data you work with in Matlab are matrices and there is a host of functions available to manipulate and visualize those matrices. Python, by itself, does not have a convenient matrix engine. However, there are three packages (think Matlab Toolboxes) out there that will add this capability to Python:
</p>

<ul class="org-ul">
<li>Numpy (the matrix engine)</li>
<li>Scipy (matrix manipulation)</li>
<li>Matplotlib (plotting)</li>
</ul>

<p>
You can either grab the individual installers for <a href="http://python.org/">Python</a>, <a href="http://numpy.org/">Numpy</a>, <a href="http://scipy.org/">Scipy</a> and <a href="http://matplotlib.org/">Matplotlib</a> from their respective websites, or get them pre-packaged from <a href="https://code.google.com/p/pythonxy/">pythonxy()</a> or <a href="http://www.enthought.com/products/epd.php">EPD</a>.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">A 30,000 foot overview</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
Like Matlab, Python is <i>interpreted</i>, that is, there is no need for a compiler and code can be executed at any time as long as Python is installed on the machine. Also, code can be copied from one machine to another and will run without change.
</p>

<p>
Like Matlab, Python is <i>dynamically typed</i>, that is, every variable can hold data of any type, as in:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Python</span>
<span style="color: #111111;">a</span> = 5         <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">a number</span>
<span style="color: #111111;">a</span> = [1, 2, 3] <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">a list</span>
<span style="color: #111111;">a</span> = <span style="color: #303030;">'text'</span>    <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">a string</span>
</pre>
</div>

<p>
Contrast this with C, where you can not assign different data types to the same variable:
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #303030; font-style: italic;">// </span><span style="color: #303030; font-style: italic;">C</span>
<span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">a</span> = 5;
<span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">b</span>[3] = {1.0, 2.0, 3.0};
<span style="color: #111111; text-decoration: underline;">char</span> <span style="color: #111111;">c</span>[] = <span style="color: #303030;">"text"</span>;
</pre>
</div>

<p>
Unlike Matlab, Python is <i>strongly typed</i>, that is, you can not add a number to a string.
In Matlab, adding a single number to a string will convert that string into an array of numbers, then add the single number to each of the numbers in the array. Python will simply throw an error.
</p>

<div class="org-src-container">

<pre class="src src-octave"><span style="color: #303030; font-style: italic;">% </span><span style="color: #303030; font-style: italic;">Matlab</span>
a <span style="color: #111111; background-color: #fffff8;">=</span> <span style="color: #303030;">'text'</span>
b <span style="color: #111111; background-color: #fffff8;">=</span> a <span style="color: #111111; background-color: #fffff8;">+</span> 5 <span style="color: #303030; font-style: italic;">% [121 106 125 121]</span>
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Python</span>
<span style="color: #111111;">a</span> = <span style="color: #303030;">'text'</span>
<span style="color: #111111;">b</span> = a + 5 <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">TypeError: Can't convert 'int' object to str implicitly</span>
</pre>
</div>

<p>
Unlike Matlab, every Python file can contain as many functions as you like. Basically, you can organize your code in as many files as you want. To access functions from other files, use <code>import filename</code>.
</p>

<p>
Unlike Matlab, Python is very quick to start. In fact, most operating systems automatically start a new Python process whenever you run a Python program and quit that process once the program has finished. Thus, every Python program behaves as if it indeed were an independent program. There is no need to wait for that big Matlab mother ship to start before writing or executing code.
</p>

<p>
Unlike Matlab, the source code of Python is readily available. Every detail of Python's inner workings is available to everyone. It is thus feasible and encouraged to actively participate in the development of Python itself or some add-on package. Furthermore, there is no dependence on some company deciding where to go next with Python.
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Reading Python</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
When you start up Python, it is a rather empty environment. In order to do anything useful, you first have to <code>import</code> some functionality into your workspace. Thus, you will see a few lines of <code>import</code> statements at the top of every Python file. Moreover, Python has <i>namespaces</i>, so if you <code>import numpy</code>, you will have to prefix every feature of Numpy with its name, like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> numpy
<span style="color: #111111;">a</span> = numpy.zeros(10, 1)
</pre>
</div>

<p>
This is clearly cumbersome if you are planning to use Numpy all the time. So instead, you can import all of Numpy into the global environment like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> numpy <span style="color: #111111; font-weight: bold;">import</span> *
<span style="color: #111111;">a</span> = ones(30, 1)
</pre>
</div>

<p>
Better yet, there is a pre-packaged namespace that contains the whole Numpy-Scipy-Matplotlib stack in one piece:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> pylab <span style="color: #111111; font-weight: bold;">import</span> *
<span style="color: #111111;">a</span> = randn(100, 1)
plot(a)
show()
</pre>
</div>

<p>
Note that Python does not plot immediately when you type <code>plot()</code>. Instead, it will collect all plotting information and only show it on the screen once you type <code>show()</code>.
</p>

<p>
So far, the code you have seen should look pretty familiar. A few differences:
</p>

<ul class="org-ul">
<li>No semicolons at the end of lines;
In order to print stuff to the console, use the <code>print()</code> function instead.</li>

<li>No <code>end</code> anywhere.
In Python, blocks of code are identified by indentation and they always start with a colon like so:</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; background-color: #fffff8;">sum</span> = 0
<span style="color: #111111; font-weight: bold;">for</span> n <span style="color: #111111; font-weight: bold;">in</span> [1, 2, 3, 4, 5]:
    <span style="color: #111111; background-color: #fffff8;">sum</span> = <span style="color: #111111; background-color: #fffff8;">sum</span> + n
<span style="color: #111111; font-weight: bold;">print</span>(<span style="color: #111111; background-color: #fffff8;">sum</span>)
</pre>
</div>

<ul class="org-ul">
<li>Function definitions are different.
They use the <code>def</code> keyword instead of <code>function</code>.
You don't have to name the output variable names in the definition and instead use <code>return()</code>.</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Python</span>
<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">abs</span>(number):
    <span style="color: #111111; font-weight: bold;">if</span> number &gt; 0:
        <span style="color: #111111; font-weight: bold;">return</span> number
    <span style="color: #111111; font-weight: bold;">else</span>:
        <span style="color: #111111; font-weight: bold;">return</span> -number
</pre>
</div>

<div class="org-src-container">

<pre class="src src-octave"><span style="color: #303030; font-style: italic;">% </span><span style="color: #303030; font-style: italic;">Matlab</span>
<span style="color: #111111; font-weight: bold;">function</span> [out] <span style="color: #111111; background-color: #fffff8;">=</span> <span style="color: #111111; text-decoration: underline;">abs</span>(number)
    <span style="color: #111111; font-weight: bold;">if</span> number <span style="color: #111111; background-color: #fffff8;">&gt;</span> 0
        out <span style="color: #111111; background-color: #fffff8;">=</span> number
    <span style="color: #111111; font-weight: bold;">else</span>
        out <span style="color: #111111; background-color: #fffff8;">=</span> <span style="color: #111111; background-color: #fffff8;">-</span>number
    <span style="color: #111111; font-weight: bold;">end</span>
<span style="color: #111111; font-weight: bold;">end</span>
</pre>
</div>

<ul class="org-ul">
<li>There is no easy way to write out a list or matrix.
Since Python only gains a matrix engine by importing Numpy, it does not have a convenient way of writing arrays or matrices.   This sounds more inconvenient than it actually is, since you are probably using mostly functions like <code>zeros()</code> or <code>randn()</code> anyway and those work just fine. Also, many places accept Python lists (like this <code>[1, 2, 3]</code>) instead of Numpy arrays, so this rarely is a problem. Note that you <i>must</i> use commas to separate items and can not use semicolons to separate lines.</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">create a numpy matrix:</span>
<span style="color: #111111;">m</span> = array([[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]])
<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">create a Python list:</span>
<span style="color: #111111;">l</span> = [1 2 3]
</pre>
</div>

<ul class="org-ul">
<li>Arrays access uses brackets and is numbered from 0.
Thus, ranges <i>exclude</i> the last number (see below).
Mostly, this just means that array access does not need any <code>+1</code> or <code>-1</code> when indexing arrays anymore.</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">a</span> = linspace(1, 10, 10)
<span style="color: #111111;">one</span> = a[0]
<span style="color: #111111;">two</span> = a[1]

<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">"6:8" is a range of two elements:</span>
<span style="color: #111111;">a</span>[6:8] = [70, 80] <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">&lt;-- a Python list!</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">Common traps</h2>
<div class="outline-text-2" id="text-orgheadline4">
<ul class="org-ul">
<li>Array slicing does not copy.</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">a</span> = array([1 2 3 4 5])
<span style="color: #111111;">b</span> = a[1:4] <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">[2 3 4]</span>
<span style="color: #111111;">b</span>[1] = rand() <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">this will change a and b!</span>
<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">make a copy like this:</span>
<span style="color: #111111;">c</span> = array(a[1:4], copy=<span style="color: #111111;">True</span>) <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">copy=True can be omitted</span>
<span style="color: #111111;">c</span>[1] = rand() <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">changes only c</span>
</pre>
</div>
<ul class="org-ul">
<li>Arrays retain their data type.
You can slice them, you can dice them, you can do math on them, but a 16 bit integer array will never lose its data type. Use <code>new = array(old, dtype=double)</code> to convert an array of any data type to the default <code>double</code> type (like in Matlab).</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">pretend this came from a wave file:</span>
<span style="color: #111111;">a</span> = array([1000, 2000, 3000, 4000, 5000], dtype=int16)
<span style="color: #111111;">a</span> = a * 10 <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">int16 only goes to 32768!</span>
<span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">a is now [10000, 20000, 30000, -25536, -15536]</span>
</pre>
</div>
</div>
</div>


<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Going further</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
Now you should be able to read Python code reasonably well. Numpy, Scipy and Matplotlib are actually modeled after Matlab in many ways, so many functions will have a very similar name and functionality. A lot of the numerical code you write in Python will look very similar to the equivalent code in Matlab. For a more in-depth comparison of Matlab and Python syntax, head over to <a href="http://www.scipy.org/NumPy_for_Matlab_Users">the Numpy documentation for Matlab users</a>.
</p>

<p>
However, since Python is a general purpose programming language, it offers some more tools. To begin with, there are a few more data types like associative arrays, tuples (unchangeable lists), proper strings and a full-featured object system. Then, there is a plethora of add-on packages, most of which actually come with your standard installation of Python. For example, there are <a href="http://docs.python.org/3/library/internet.html">internet protocols</a>, <a href="http://www.riverbankcomputing.com/software/pyqt/intro">GUI programming frameworks</a>, <a href="https://people.csail.mit.edu/hubert/pyaudio/">real-time audio interfaces</a>, <a href="https://www.djangoproject.com/">web frameworks</a> and <a href="http://www.pygame.org/">game development libraries</a>. Even <a href="https://github.com/bastibe/bastibe.github.com/tree/source">this very blog</a> is created using a Python <a href="http://pelican.readthedocs.org/">static site generator</a>.
</p>

<p>
Lastly, Python has a great <a href="http://docs.python.org/3/">online documentation site</a> including a <a href="http://docs.python.org/3.3/tutorial/">tutorial</a>, there are <a href="http://wiki.python.org/moin/PythonBooks">many books</a> <a href="http://www.learnpythonthehardway.org/">on Python</a> and there is a helpful <a href="http://wiki.python.org/moin/BeginnersGuide">Wiki on Python</a>. There is also a <a href="http://scipy.org/Cookbook">tutorial</a> and <a href="http://scipy.org/Getting_Started">documentation</a> for Numpy, Scipy and <a href="http://matplotlib.org/contents.html">Matplotlib</a>.
</p>

<p>
A great way to get to know any programming language is to solve the first few problems on <a href="https://projecteuler.net/">project euler</a>.
</p>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2013-01-20-a-python-primer-for-matlab-users.html</link>
  <pubDate>Sun, 20 Jan 2013 10:55:00 +0100</pubDate>
</item>
<item>
  <title>Real Time Signal Processing in Python</title>
  <description><![CDATA[<p>
Wouldn't it be nice if you could do real time audio processing in a convenient programming language? Matlab comes to mind as a convenient language for signal processing. But while Matlab is pretty fast, it is really only fast for algorithms that can be vectorized. In audio however, we have many algorithms that need knowledge about the previous sample to calculate the next one, so they can't be vectorized.
</p>

<p>
But this is not going to be about Matlab. This is going to be about Python. Combine Python with Numpy (and Scipy and Matplotlib) and you have a signal processing system very comparable to Matlab. Additionally, you can do real-time audio input/output using PyAudio. PyAudio is a wrapper around PortAudio and provides cross platform audio recording/playback in a nice, pythonic way. (Real time capabilities were added in 0.2.6 with the help of yours truly).
</p>

<p>
However, this does not solve the problem with vectorization. Just like Matlab, Python/Numpy is only fast for vectorizable algorithms. So as an example, let's define an iterative algorithm that is not vectorizable:
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">A Simple Limiter</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
A limiter is an audio effect that controls the system gain so that it does not exceed a certain threshold level. One could do this by simply cutting off any signal peaks above that level, but that sounds awful. So instead, the whole system gain is reduced smoothly if the signal gets too loud and is amplified back to its original gain again when it does not exceed the threshold any more. The important part is that the gain change is done <i>smoothly</i>, since otherwise it would introduce a lot of distortion.
</p>

<p>
If a signal peak is detected, the limiter will thus need a certain amount of time to reduce the gain accordingly. If you still want to prevent all peaks, the limiter will have to know of the peaks in advance, which is of course impossible in a real time system. Instead, the signal is delayed by a short time to give the limiter time to adjust the system gain before the peak is actually played. To keep this delay as short as possible, this "attack" phase where the gain is decreased should be very short, too. "Releasing" the gain back up to its original value can be done more slowly, thus introducing less distortion.
</p>

<p>
With that out of the way, let me present you a simple implementation of such a limiter. First, lets define a signal envelope \(e[n]\) that catches all the peaks and smoothly decays after them:
</p>

<p>
\[
e[n] = \max( |s[n]|, e[n-1] \cdot f_r )
\]
</p>

<p>
where \(s[n]\) is the current signal and \(0 < f_r < 1\) is a release factor.
</p>

<p>
If this is applied to a signal, it will create an envelope like this:
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-11/envelope.png" alt="envelope.png" />
</p>
</div>

<p>
Based on that envelope, and assuming that the signal ranges from -1 to 1, the target gain \(g_t[n]\) can be calculated using
</p>

\begin{equation}
g_t[n] = \begin{cases}
    1 & e[n] < t \\\\
    1 + t - e[n] & e[n] > t
\end{cases}
\end{equation}

<p>
Now, the output gain \(g[n]\) can smoothly move towards that target gain using
</p>

<p>
\[
g[n] = g[n-1] \cdot f_a + g_t[n] \cdot (1-f_a)
\]
</p>

<p>
where \(0 < f_a \ll f_r\) is the attack factor.
</p>

<p>
Here you can see how that would look in practice:
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-11/gain.png" alt="gain.png" />
</p>
</div>

<p>
Zooming in on one of the limited section reveals that the gain is actually moving smoothly.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-11/detail.png" alt="detail.png" />
</p>
</div>

<p>
This gain can now be multiplied on the delayed input signal and will safely keep that below the threshold.
</p>

<p>
In Python, this might look like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">class</span> <span style="color: #111111; text-decoration: underline;">Limiter</span>:
    <span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">__init__</span>(<span style="color: #111111; font-weight: bold;">self</span>, attack_coeff, release_coeff, delay, dtype=float32):
        <span style="color: #111111; font-weight: bold;">self</span>.delay_index = 0
        <span style="color: #111111; font-weight: bold;">self</span>.envelope = 0
        <span style="color: #111111; font-weight: bold;">self</span>.gain = 1
        <span style="color: #111111; font-weight: bold;">self</span>.delay = delay
        <span style="color: #111111; font-weight: bold;">self</span>.delay_line = zeros(delay, dtype=dtype)
        <span style="color: #111111; font-weight: bold;">self</span>.release_coeff = release_coeff
        <span style="color: #111111; font-weight: bold;">self</span>.attack_coeff = attack_coeff

    <span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">limit</span>(<span style="color: #111111; font-weight: bold;">self</span>, signal, threshold):
        <span style="color: #111111; font-weight: bold;">for</span> i <span style="color: #111111; font-weight: bold;">in</span> arange(<span style="color: #111111; background-color: #fffff8;">len</span>(signal)):
            <span style="color: #111111; font-weight: bold;">self</span>.delay_line[<span style="color: #111111; font-weight: bold;">self</span>.delay_index] = signal[i]
            <span style="color: #111111; font-weight: bold;">self</span>.delay_index = (<span style="color: #111111; font-weight: bold;">self</span>.delay_index + 1) % <span style="color: #111111; font-weight: bold;">self</span>.delay

            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">calculate an envelope of the signal</span>
            <span style="color: #111111; font-weight: bold;">self</span>.envelope *= <span style="color: #111111; font-weight: bold;">self</span>.release_coeff
            <span style="color: #111111; font-weight: bold;">self</span>.envelope  = <span style="color: #111111; background-color: #fffff8;">max</span>(<span style="color: #111111; background-color: #fffff8;">abs</span>(signal[i]), <span style="color: #111111; font-weight: bold;">self</span>.envelope)

            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">have self.gain go towards a desired limiter gain</span>
            <span style="color: #111111; font-weight: bold;">if</span> <span style="color: #111111; font-weight: bold;">self</span>.envelope &gt; threshold:
                <span style="color: #111111;">target_gain</span> = (1+threshold-<span style="color: #111111; font-weight: bold;">self</span>.envelope)
            <span style="color: #111111; font-weight: bold;">else</span>:
                <span style="color: #111111;">target_gain</span> = 1.0
            <span style="color: #111111; font-weight: bold;">self</span>.gain = ( <span style="color: #111111; font-weight: bold;">self</span>.gain*<span style="color: #111111; font-weight: bold;">self</span>.attack_coeff +
                          target_gain*(1-<span style="color: #111111; font-weight: bold;">self</span>.attack_coeff) )

            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">limit the delayed signal</span>
            <span style="color: #111111;">signal</span>[i] = <span style="color: #111111; font-weight: bold;">self</span>.delay_line[<span style="color: #111111; font-weight: bold;">self</span>.delay_index] * <span style="color: #111111; font-weight: bold;">self</span>.gain
</pre>
</div>

<p>
Note that this limiter does not <i>actually</i> clip all peaks completely, since the envelope for a single peak will have decayed a bit before the target gain will have reached it. Thus, the output gain will actually be slightly higher than what would be necessary to limit the output to the threshold. Since the attack factor is supposed to be significantly smaller than the release factor, this does not matter much though.
</p>

<p>
Also, it would probably be more useful to define the factors \(f_a\) and \(f_r\) in terms of the time they take to reach their target and the threshold \(t\) in dB FS.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Implementing audio processing in Python</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
A real-time audio processing framework using PyAudio would look like this:
</p>

<p>
(<code>callback</code> is a function that will be defined shortly)
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> pyaudio <span style="color: #111111; font-weight: bold;">import</span> PyAudio, paFloat32

<span style="color: #111111;">pa</span> = PyAudio()

<span style="color: #111111;">stream</span> = pa.<span style="color: #111111; background-color: #fffff8;">open</span>(<span style="color: #111111; background-color: #fffff8;">format</span> = paFloat32,
                 channels = 1,
                 rate = 44100,
                 output = <span style="color: #111111;">True</span>,
                 frames_per_buffer = 1024,
                 stream_callback = callback)

<span style="color: #111111; font-weight: bold;">while</span> stream.is_active():
    sleep(0.1)

stream.close()
pa.terminate()
</pre>
</div>

<p>
This will open a <code>stream</code>, which is a PyAudio construct that manages input and output to/from one sound device. In this case, it is configured to use <code>float</code> values, only open one channel, play audio at a sample rate of 44100 Hz, have that one channel be output only and call the function <code>callback</code> every 1024 samples.
</p>

<p>
Since the <code>callback</code> will be executed on a different thread, control flow will continue immediately after <code>pa.open()</code>. In order to analyze the resulting signal, the <code>while stream.is_active()</code> loop waits until the signal has been processed completely.
</p>

<p>
Every time the <code>callback</code> is called, it will have to return 1024 samples of audio data. Using the class <code>Limiter</code> above, a sample counter <code>counter</code> and an audio signal <code>signal</code>, this can be implemented like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">limiter</span> = Limiter(attack_coeff, release_coeff, delay, dtype)

<span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">callback</span>(in_data, frame_count, time_info, flag):
    <span style="color: #111111; font-weight: bold;">if</span> flag:
        <span style="color: #111111; font-weight: bold;">print</span>(<span style="color: #303030;">"Playback Error: %i"</span> % flag)
    <span style="color: #111111;">played_frames</span> = counter
    <span style="color: #111111;">counter</span> += frame_count
    limiter.limit(signal[played_frames:counter], threshold)
    <span style="color: #111111; font-weight: bold;">return</span> signal[played_frames:counter], paContinue
</pre>
</div>

<p>
The <code>paContinue</code> at the end is a flag signifying that the audio processing is not done yet and the <code>callback</code> wants to be called again. Returning <code>paComplete</code> or an insufficient number of samples instead would stop audio processing after the current block and thus invalidate <code>stream.is_active()</code> and resume control flow in the snippet above.
</p>

<p>
Now this will run the limiter and play back the result. Sadly however, Python is just a bit too slow to make this work reliably. Even with a long block size of 1024 samples, this will result in occasional hickups and discontinuities. (Which the <code>callback</code> will display in the <code>print(...)</code> statement).
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Speeding up execution using Cython</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
The limiter defined above could be rewritten in C like this:
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #303030; font-style: italic;">// </span><span style="color: #303030; font-style: italic;">this corresponds to the Python Limiter class.</span>
<span style="color: #111111; font-weight: bold;">typedef</span> <span style="color: #111111; font-weight: bold;">struct</span> <span style="color: #111111; text-decoration: underline;">limiter_state_t</span> {
    <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">delay_index</span>;
    <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">delay_length</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">envelope</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">current_gain</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">attack_coeff</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">release_coeff</span>;
} <span style="color: #111111; text-decoration: underline;">limiter_state</span>;

<span style="color: #111111;">#define</span> <span style="color: #111111; text-decoration: underline;">MAX</span>(<span style="color: #111111;">x</span>,<span style="color: #111111;">y</span>) ((x)&gt;(y)?(x):(y))

<span style="color: #303030; font-style: italic;">// </span><span style="color: #303030; font-style: italic;">this corresponds to the Python __init__ function.</span>
<span style="color: #111111; text-decoration: underline;">limiter_state</span> <span style="color: #111111; text-decoration: underline;">init_limiter</span>(<span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">attack_coeff</span>, <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">release_coeff</span>, <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">delay_len</span>) {
    <span style="color: #111111; text-decoration: underline;">limiter_state</span> <span style="color: #111111;">state</span>;
    state.attack_coeff = attack_coeff;
    state.release_coeff = release_coeff;
    state.delay_index = 0;
    state.envelope = 0;
    state.current_gain = 1;
    state.delay_length = delay_len;
    <span style="color: #111111; font-weight: bold;">return</span> state;
}

<span style="color: #111111; text-decoration: underline;">void</span> <span style="color: #111111; text-decoration: underline;">limit</span>(<span style="color: #111111; text-decoration: underline;">float</span> *<span style="color: #111111;">signal</span>, <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">block_length</span>, <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">threshold</span>,
           <span style="color: #111111; text-decoration: underline;">float</span> *<span style="color: #111111;">delay_line</span>, <span style="color: #111111; text-decoration: underline;">limiter_state</span> *<span style="color: #111111;">state</span>) {
    <span style="color: #111111; font-weight: bold;">for</span>(<span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">i</span>=0; i&lt;block_length; i++) {
        delay_line[state-&gt;delay_index] = signal[i];
        state-&gt;delay_index = (state-&gt;delay_index + 1) % state-&gt;delay_length;

        <span style="color: #303030; font-style: italic;">// </span><span style="color: #303030; font-style: italic;">calculate an envelope of the signal</span>
        state-&gt;envelope *= state-&gt;release_coeff;
        state-&gt;envelope = MAX(fabs(signal[i]), state-&gt;envelope);

        <span style="color: #303030; font-style: italic;">// </span><span style="color: #303030; font-style: italic;">have current_gain go towards a desired limiter target_gain</span>
        <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">target_gain</span>;
        <span style="color: #111111; font-weight: bold;">if</span> (state-&gt;envelope &gt; threshold)
            target_gain = (1+threshold-state-&gt;envelope);
        <span style="color: #111111; font-weight: bold;">else</span>
            target_gain = 1.0;
        state-&gt;current_gain = state-&gt;current_gain*state-&gt;attack_coeff +
            target_gain*(1-state-&gt;attack_coeff);

        <span style="color: #303030; font-style: italic;">// </span><span style="color: #303030; font-style: italic;">limit the delayed signal</span>
        signal[i] = delay_line[state-&gt;delay_index] * state-&gt;current_gain;
    }
}
</pre>
</div>

<p>
In contrast to the Python version, the delay line will be passed to the <code>limit</code> function. This is advantageous because now all audio buffers can be managed by Python instead of manually allocating and deallocating them in C.
</p>

<p>
Now in order to plug this code into Python I will use Cython. First of all, a "Cython header" file has to be created that declares all exported types and functions to Cython:
</p>

<div class="org-src-container">

<pre class="src src-python">cdef extern <span style="color: #111111; font-weight: bold;">from</span> <span style="color: #303030;">"limiter.h"</span>:
    ctypedef struct limiter_state:
        <span style="color: #111111; background-color: #fffff8;">int</span> delay_index
        <span style="color: #111111; background-color: #fffff8;">int</span> delay_length
        <span style="color: #111111; background-color: #fffff8;">float</span> envelope
        <span style="color: #111111; background-color: #fffff8;">float</span> current_gain
        <span style="color: #111111; background-color: #fffff8;">float</span> attack_coeff
        <span style="color: #111111; background-color: #fffff8;">float</span> release_coeff

    limiter_state init_limiter(<span style="color: #111111; background-color: #fffff8;">float</span> attack_factor, <span style="color: #111111; background-color: #fffff8;">float</span> release_factor, <span style="color: #111111; background-color: #fffff8;">int</span> delay_len)
    void limit(<span style="color: #111111; background-color: #fffff8;">float</span> *signal, <span style="color: #111111; background-color: #fffff8;">int</span> block_length, <span style="color: #111111; background-color: #fffff8;">float</span> threshold,
               <span style="color: #111111; background-color: #fffff8;">float</span> *delay_line, limiter_state *state)
</pre>
</div>

<p>
This is very similar to the C header file of the limiter:
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #111111; font-weight: bold;">typedef</span> <span style="color: #111111; font-weight: bold;">struct</span> <span style="color: #111111; text-decoration: underline;">limiter_state_t</span> {
    <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">delay_index</span>;
    <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">delay_length</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">envelope</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">current_gain</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">attack_coeff</span>;
    <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">release_coeff</span>;
} <span style="color: #111111; text-decoration: underline;">limiter_state</span>;

<span style="color: #111111; text-decoration: underline;">limiter_state</span> <span style="color: #111111; text-decoration: underline;">init_limiter</span>(<span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">attack_factor</span>, <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">release_factor</span>, <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">delay_len</span>);
<span style="color: #111111; text-decoration: underline;">void</span> <span style="color: #111111; text-decoration: underline;">limit</span>(<span style="color: #111111; text-decoration: underline;">float</span> *<span style="color: #111111;">signal</span>, <span style="color: #111111; text-decoration: underline;">int</span> <span style="color: #111111;">block_length</span>, <span style="color: #111111; text-decoration: underline;">float</span> <span style="color: #111111;">threshold</span>,
           <span style="color: #111111; text-decoration: underline;">float</span> *<span style="color: #111111;">delay_line</span>, <span style="color: #111111; text-decoration: underline;">limiter_state</span> *<span style="color: #111111;">state</span>);
</pre>
</div>

<p>
With that squared away, the C functions are accessible for Cython. Now, we only need a small Python wrapper around this code so it becomes usable from Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">import</span> numpy <span style="color: #111111; font-weight: bold;">as</span> np
cimport numpy <span style="color: #111111; font-weight: bold;">as</span> np
cimport limiter

<span style="color: #111111;">DTYPE</span> = np.float32
ctypedef np.float32_t DTYPE_t

cdef <span style="color: #111111; font-weight: bold;">class</span> <span style="color: #111111; text-decoration: underline;">Limiter</span>:
    cdef limiter.limiter_state state
    cdef np.ndarray delay_line
    <span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">__init__</span>(<span style="color: #111111; font-weight: bold;">self</span>, <span style="color: #111111; background-color: #fffff8;">float</span> attack_coeff, <span style="color: #111111; background-color: #fffff8;">float</span> release_coeff,
                 <span style="color: #111111; background-color: #fffff8;">int</span> delay_length):
        <span style="color: #111111; font-weight: bold;">self</span>.state = limiter.init_limiter(attack_coeff, release_coeff, delay_length)
        <span style="color: #111111; font-weight: bold;">self</span>.delay_line = np.zeros(delay_length, dtype=DTYPE)

    <span style="color: #111111; font-weight: bold;">def</span> <span style="color: #111111; text-decoration: underline;">limit</span>(<span style="color: #111111; font-weight: bold;">self</span>, np.ndarray[DTYPE_t,ndim=1] signal, <span style="color: #111111; background-color: #fffff8;">float</span> threshold):
        limiter.limit(&lt;<span style="color: #111111; background-color: #fffff8;">float</span>*&gt;np.PyArray_DATA(signal),
                   &lt;<span style="color: #111111; background-color: #fffff8;">int</span>&gt;<span style="color: #111111; background-color: #fffff8;">len</span>(signal), threshold,
                   &lt;<span style="color: #111111; background-color: #fffff8;">float</span>*&gt;np.PyArray_DATA(<span style="color: #111111; font-weight: bold;">self</span>.delay_line),
                   &lt;limiter.limiter_state*&gt;&amp;<span style="color: #111111; font-weight: bold;">self</span>.state)
</pre>
</div>

<p>
The first two lines set this file up to access Numpy arrays both from the Python domain and the C domain, thus bridging the gap. The <code>cimport limiter</code> imports the C functions and types from above. The <code>DTYPE</code> stuff is advertising the Numpy <code>float32</code> type to C.
</p>

<p>
The class is defined using <code>cdef</code> as a C data structure for speed. Also, Cython would naturally translate every C struct into a Python dict and vice versa, but we need to pass the struct to <code>limit</code> <i>and</i> have <code>limit</code> modify it. Thus, <code>cdef limiter.limiter_state state</code> makes Cython treat it as a C struct only. Finally, the <code>np.PyArray_DATA()</code> expressions expose the C arrays underlying the Numpy vectors. This is really handy since we don't have to copy any data around in order to modify the vectors from C.
</p>

<p>
As can be seen, the Cython implementation behaves nearly identically to the initial Python implementation (except for passing the <code>dtype</code> to the constructor) and can be used as a plug-in replacement (with the aforementioned caveat).
</p>

<p>
Finally, we need to build the whole contraption. The easiest way to do this is to use a setup file like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> distutils.core <span style="color: #111111; font-weight: bold;">import</span> setup
<span style="color: #111111; font-weight: bold;">from</span> distutils.extension <span style="color: #111111; font-weight: bold;">import</span> Extension
<span style="color: #111111; font-weight: bold;">from</span> Cython.Distutils <span style="color: #111111; font-weight: bold;">import</span> build_ext
<span style="color: #111111; font-weight: bold;">from</span> numpy <span style="color: #111111; font-weight: bold;">import</span> get_include

<span style="color: #111111;">ext_modules</span> = [Extension(<span style="color: #303030;">"cython_limiter"</span>,
                         sources=[<span style="color: #303030;">"cython_limiter.pyx"</span>,
                                  <span style="color: #303030;">"limiter.c"</span>],
                         include_dirs=[<span style="color: #303030;">'.'</span>, get_include()])]

setup(
    name = <span style="color: #303030;">"cython_limiter"</span>,
    cmdclass = {<span style="color: #303030;">'build_ext'</span>: build_ext},
    ext_modules = ext_modules
    )
</pre>
</div>

<p>
With that saved as <i>setup.py</i>, <code>python setup.py build_ext --inplace</code> will convert the Cython code to C, and then compile both the converted Cython code and C code into a binary Python module.
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">Conclusion</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
In this article, I developed a simple limiter and how to implement it in both C and Python. Then, I showed how to use the C implementation from Python. Where the Python implementation is struggling to keep a steady frame rate going even at large block sizes, the Cython version runs smoothly down to 2-4 samples per block on a 2 Ghz Core i7. Thus, real-time audio processing is clearly feasable using Python, Cython, Numpy and PyAudio.
</p>

<p>
You can find all the source code in this article at <a href="https://github.com/bastibe/simple-cython-limiter">https://github.com/bastibe/simple-cython-limiter</a>
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Disclaimer</h2>
<div class="outline-text-2" id="text-orgheadline5">
<ol class="org-ol">
<li>I invented this limiter myself. I could invent a better sounding limiter, but this article is more about how to combine Python, Numpy, PyAudio and Cython for real-time signal processing than about limiter design.</li>
<li>I recently worked on something similar at my day job. They agreed that I could write about it so long as I don't divulge any company secrets. This limiter is not a descendant of any code I worked on.</li>
<li>Whoever wants to use any piece of code here, feel free to do so. I am hereby placing it in the public domain. Feel free to contact me if you have questions.</li>
</ol>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2012-11-02-real-time-signal-processing-in-python.html</link>
  <pubDate>Fri, 02 Nov 2012 10:53:00 +0100</pubDate>
</item>
<item>
  <title>An error occurred loading this content. Try again later.</title>
  <description><![CDATA[<p>
Since we moved, our Apple TV has been giving us trouble: we would rent a movie on the Apple TV, and instead of playing it, the Apple TV would just display
</p>

<blockquote>
<p>
An error occurred loading this content.
Try again later.
</p>
</blockquote>

<p>
Rebooting, then trying again, would sometimes solve the issue. Trying to play a trailer before trying to play the movie seemed to increase chances of the Apple TV actually downloading the movie, too.
</p>

<p>
Finally, some forum or other pointed me to the correct solution: For some reason, the Apple TV did not play nice with our ISP DNS server. Simply changing the DNS server in the Apple TV settings to one of the Google DNS servers (8.8.8.8 and 8.8.4.4) solved the issue. Any other DNS will probably work, too.
</p>
]]></description>
  <link>http://bastibe.de/2012-11-01-apple-tv.html</link>
  <pubDate>Thu, 01 Nov 2012 18:26:00 +0100</pubDate>
</item>
<item>
  <title>Names</title>
  <description><![CDATA[<blockquote>
<p>
Names are everywhere in software. We name our variables, our functions, our arguments, classes, and packages. We name our source files and the directories that contain them. We name our jar files and war files and ear files. We name and name and name. Because we do so much of it, we'd better do it well.
</p>
</blockquote>

<p>
&#x2013; from the Introduction to chapter 2 "Meaningful Names" of "Clean Code" by Robert C. Martin.
</p>

<p>
Indeed we name a lot of things in software. As The Structure and Interpretation of Computer Programs points out, the primary purpose of a function (lambda) is to provide names for its arguments that are independent of names elsewhere. A function provides a closure in which stuff has defined names. The closure itself can then be embedded into other closures to form composite structures. Take any complex program structure and decompose its names through all its lambdas and you will only find more names right until you reach turtles.
</p>

<p>
At its heart, programming is about naming things. If I squint my eyes a little, I can nearly convince myself that naming is really all there is. All the rest is just playing games with syntax.
</p>

<p>
It's situations like this that I realize that The Structure and Interpretation of Computer Programs really changed how I view programming.
</p>

<p>
If you like programming at all, I implore you to <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">read it</a>, or <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">watch it</a>, or <a href="http://mitpress.mit.edu/books/structure-and-interpretation-computer-programs">buy it</a>. It really blew my mind.
</p>
]]></description>
  <link>http://bastibe.de/2012-10-28-names.html</link>
  <pubDate>Sun, 28 Oct 2012 22:08:00 +0100</pubDate>
</item>
<item>
  <title>Matlab, Mex, Homebrew and OS X 10.8 Mountain Lion</title>
  <description><![CDATA[<p>
Now that I am a student again, I have to use Matlab again. Among the many joys of Matlab is the compilation of mex files.
</p>

<p>
Because it does not work. So angry.
</p>

<p>
Basically, <code>mex</code> does not work because it assumes that you have OS X 10.6 installed. In OS X 10.6 you had <code>gcc-4.2</code> and your system SDK was stored in <i>\/Developer\/SDKs\/MacOSX10.6.sdk</i>. However, as of 10.7 (I think), the <i>\/Developer</i> directory has been deprecated in favor of distributing the whole development environment within the App package of XCode. Also, <code>gcc</code> has been deprecated in favor of <code>clang</code>. While a <code>gcc</code> binary is still provided, <code>gcc-4.2</code> is not. Of course, that is what <code>mex</code> relies on. Lastly, <code>mex</code> of course completely disregards common system paths such as, say, <i>\/usr\/local\/bin</i>, so compiling against some homebrew library won't work.
</p>

<p>
At least these things are rather easy to fix, since all these settings are saved in a file called <i>mexopts.sh</i>, which is saved to <i>~\</i>.matlab\/R2012a\// by default. The relevant section on 64-bit OS X begins after <code>maci64)</code> and should look like this: (changes are marked by comments)
</p>

<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #303030; font-style: italic;">#</span><span style="color: #303030; font-style: italic;">----------------------------------------------------------------------------</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">StorageVersion: 1.0</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">CkeyName: GNU C</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">CkeyManufacturer: GNU</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">CkeyLanguage: C</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">CkeyVersion:</span>
            <span style="color: #111111;">CC</span>=<span style="color: #303030;">'gcc'</span> <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">used to be 'gcc-4.2'</span>

            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">used to be '/Developer/SDKs/MacOSX10.6.sdk'</span>
            <span style="color: #111111;">SDKROOT</span>=<span style="color: #303030;">'/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk'</span>
            <span style="color: #111111;">MACOSX_DEPLOYMENT_TARGET</span>=<span style="color: #303030;">'10.8'</span> <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">used to be '10.5'</span>
            <span style="color: #111111;">ARCHS</span>=<span style="color: #303030;">'x86_64'</span>
            <span style="color: #111111;">CFLAGS</span>=<span style="color: #303030;">"-fno-common -no-cpp-precomp -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"</span>
            <span style="color: #111111;">CFLAGS</span>=<span style="color: #303030;">"$CFLAGS  -fexceptions"</span>
            <span style="color: #111111;">CFLAGS</span>=<span style="color: #303030;">"$CFLAGS -I/usr/local/include"</span> <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Homebrew include path</span>
            <span style="color: #111111;">CLIBS</span>=<span style="color: #303030;">"$MLIBS"</span>
            <span style="color: #111111;">COPTIMFLAGS</span>=<span style="color: #303030;">'-O2 -DNDEBUG'</span>
            <span style="color: #111111;">CDEBUGFLAGS</span>=<span style="color: #303030;">'-g'</span>
<span style="color: #303030; font-style: italic;">#</span>
            <span style="color: #111111;">CLIBS</span>=<span style="color: #303030;">"$CLIBS -lstdc++"</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">C++keyName: GNU C++</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">C++keyManufacturer: GNU</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">C++keyLanguage: C++</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">C++keyVersion:</span>
            <span style="color: #111111;">CXX</span>=g++ <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">used to be 'g++-4.2'</span>
            <span style="color: #111111;">CXXFLAGS</span>=<span style="color: #303030;">"-fno-common -no-cpp-precomp -fexceptions -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"</span>
            <span style="color: #111111;">CXXLIBS</span>=<span style="color: #303030;">"$MLIBS -lstdc++"</span>
            <span style="color: #111111;">CXXOPTIMFLAGS</span>=<span style="color: #303030;">'-O2 -DNDEBUG'</span>
            <span style="color: #111111;">CXXDEBUGFLAGS</span>=<span style="color: #303030;">'-g'</span>
<span style="color: #303030; font-style: italic;">#</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">FortrankeyName: GNU Fortran</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">FortrankeyManufacturer: GNU</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">FortrankeyLanguage: Fortran</span>
            <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">FortrankeyVersion:</span>
            <span style="color: #111111;">FC</span>=<span style="color: #303030;">'gfortran'</span>
            <span style="color: #111111;">FFLAGS</span>=<span style="color: #303030;">'-fexceptions -m64 -fbackslash'</span>
            <span style="color: #111111;">FC_LIBDIR</span>=<span style="color: #303030;">`$FC -print-file-name=libgfortran.dylib 2&gt;&amp;1 | sed -n '1s/\/*libgfortran\.dylib//p'`</span>
            <span style="color: #111111;">FC_LIBDIR2</span>=<span style="color: #303030;">`$FC -print-file-name=libgfortranbegin.a 2&gt;&amp;1 | sed -n '1s/\/*libgfortranbegin\.a//p'`</span>
            <span style="color: #111111;">FLIBS</span>=<span style="color: #303030;">"$MLIBS -L$FC_LIBDIR -lgfortran -L$FC_LIBDIR2 -lgfortranbegin"</span>
            <span style="color: #111111;">FOPTIMFLAGS</span>=<span style="color: #303030;">'-O'</span>
            <span style="color: #111111;">FDEBUGFLAGS</span>=<span style="color: #303030;">'-g'</span>
<span style="color: #303030; font-style: italic;">#</span>
            <span style="color: #111111;">LD</span>=<span style="color: #303030;">"$CC"</span>
            <span style="color: #111111;">LDEXTENSION</span>=<span style="color: #303030;">'.mexmaci64'</span>
            <span style="color: #111111;">LDFLAGS</span>=<span style="color: #303030;">"-Wl,-twolevel_namespace -undefined error -arch $ARCHS -Wl,-syslibroot,$SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"</span>
            <span style="color: #111111;">LDFLAGS</span>=<span style="color: #303030;">"$LDFLAGS -bundle -Wl,-exported_symbols_list,$TMW_ROOT/extern/lib/$Arch/$MAPFILE"</span>
            <span style="color: #111111;">LDFLAGS</span>=<span style="color: #303030;">"$LDFLAGS -L/usr/local/lib"</span> <span style="color: #303030; font-style: italic;"># </span><span style="color: #303030; font-style: italic;">Homebrew library path</span>
            <span style="color: #111111;">LDOPTIMFLAGS</span>=<span style="color: #303030;">'-O'</span>
            <span style="color: #111111;">LDDEBUGFLAGS</span>=<span style="color: #303030;">'-g'</span>
<span style="color: #303030; font-style: italic;">#</span>
            <span style="color: #111111;">POSTLINK_CMDS</span>=<span style="color: #303030;">':'</span>
<span style="color: #303030; font-style: italic;">#</span><span style="color: #303030; font-style: italic;">----------------------------------------------------------------------------</span>
</pre>
</div>

<p>
To summarize:
</p>

<ul class="org-ul">
<li>changed <code>gcc-4.2</code> to <code>gcc</code></li>
<li>changed <code>/Developer/SDKs/MacOSX10.6.sdk</code> to <code>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk</code></li>
<li>changed <code>10.5</code> to <code>10.8</code></li>
<li>added <code>CFLAGS="$CFLAGS -I/usr/local/include"</code></li>
<li>changed <code>g++-4.2</code> to <code>g++</code></li>
<li>added <code>LDFLAGS="$LDFLAGS -L/usr/local/lib"</code></li>
</ul>

<p>
With those settings, the mex compiler should work and it should pick up any libraries installed by homebrew.
</p>
]]></description>
  <link>http://bastibe.de/2012-10-20-matlab-mex-and-osx.html</link>
  <pubDate>Sat, 20 Oct 2012 10:12:00 +0200</pubDate>
</item>
<item>
  <title>My Emacs customizations</title>
  <description><![CDATA[<p>
I don't host my <code>.emacs</code> in a repository. I tried it for a while, but it did not work for me. I think repos are great for managing multiple divergent versions of the same source tree. However, my dotfiles should never diverge, they should just be kept in sync. This is what Dropbox is great at. So I use Dropbox instead of git.
</p>

<p>
One downside of that is that it is not as easy to provide a public link to my dotfiles. Or maybe it is. Here goes
</p>

<p>
<a href="https://bitbucket.org/bastibe/.emacs.d/src/">My <i>.emacs</i></a>
</p>

<p>
Now on to the meat of this post: Some customizations I made that I think are cool.
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">When Emacs starts up, make it fit the left half of the screen</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
First, I need a function to set the size of a frame in terms of pixels. Emacs only provides <code>set-frame-size</code>, but that works on characters, not pixels.
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">set-frame-pixel-size</span> (frame width height)
  <span style="color: #111111;">"Sets size of FRAME to WIDTH by HEIGHT, measured in pixels."</span>
  (<span style="color: #111111; font-weight: bold;">let</span> ((pixels-per-char-width (/ (frame-pixel-width) (frame-width)))
        (pixels-per-char-height (/ (frame-pixel-height) (frame-height))))
    (set-frame-size frame
                    (floor (/ width pixels-per-char-width))
                    (floor (/ height pixels-per-char-height)))))
</pre>
</div>

<p>
Next, a function that uses the above to set the frame size to exactly fit the left half of the screen. Note that the <code>excess-...</code> variables account for things like the menu bar, the dock or the task bar so you might have to adapt these values to your particular windowing environment. The values given here work for dockless OSX.
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">use-left-half-screen</span> ()
  (interactive)
  (<span style="color: #111111; font-weight: bold;">let*</span> ((excess-width 32)
         (excess-height 48)
         (half-screen-width (- (/ (x-display-pixel-width) 2) excess-width))
         (screen-height (- (x-display-pixel-height) excess-height)))
    (set-frame-pixel-size (selected-frame) half-screen-width screen-height)))
</pre>
</div>

<p>
Finally, when Emacs starts up, make it use half the screen. Just how I like it!
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">if</span> window-system
    (use-left-half-screen))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Make shell split windows auto-resize</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
Usually when you open a new split window in Emacs, it takes up half the frame. For some kinds of windows, I like them to be smaller. So here is a little snippet that shrinks some kinds of windows to 15 lines of height.
</p>

<div class="org-src-container">

<pre class="src src-elisp">(add-hook 'window-configuration-change-hook
          (<span style="color: #111111; font-weight: bold;">lambda</span> ()
            (<span style="color: #111111; font-weight: bold;">when</span> (or (string-equal (buffer-name) <span style="color: #303030;">"*Python*"</span>)
                      (string-equal (buffer-name) <span style="color: #303030;">"*eshell*"</span>)
                      (string-equal (buffer-name) <span style="color: #303030;">"*tex-shell*"</span>))
              (<span style="color: #111111; font-weight: bold;">if</span> (not (eq (window-height) 15))
                  (enlarge-window (- 15 (window-height)))))))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Create a new line above/below the current one</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
There is one feature of Vim that I really missed: <code>o~/~O</code>, which 'opens' a new line above or below the current one without changing the current line.
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">vi-open-line-above</span> ()
  <span style="color: #111111;">"Insert a newline above the current line and put point at beginning."</span>
  (interactive)
  (<span style="color: #111111; font-weight: bold;">unless</span> (bolp)
    (beginning-of-line))
  (newline)
  (forward-line -1)
  (indent-according-to-mode))

(<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">vi-open-line-below</span> ()
  <span style="color: #111111;">"Insert a newline below the current line and put point at beginning."</span>
  (interactive)
  (<span style="color: #111111; font-weight: bold;">unless</span> (eolp)
    (end-of-line))
  (newline-and-indent))

(global-set-key (kbd <span style="color: #303030;">"C-o"</span>) 'vi-open-line-below)
(global-set-key (kbd <span style="color: #303030;">"M-o"</span>) 'vi-open-line-above)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">When editing LaTeX, show PDF output in Emacs</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
Emacs provides an awesome mode for editing LaTeX files. But isn't it sad that you always have to leave Emacs for viewing the PDF? Well, not any more.
</p>

<p>
This function will open or refresh a split window with the generated PDF file in it. Thus, when I edit LaTeX, I will hit C-c C-c to compile, then C-c C-v to see the PDF. All that without having to leave the LaTeX file.
</p>

<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #303030; font-style: italic;">;; </span><span style="color: #303030; font-style: italic;">open/show pdf file within Emacs using doc-view-mode</span>
(<span style="color: #111111; font-weight: bold;">defun</span> <span style="color: #111111; text-decoration: underline;">open-show-pdf</span> ()
  (interactive)
  (<span style="color: #111111; font-weight: bold;">let</span> ((tex-buffer-name (buffer-name))
        (pdf-buffer-name (concat (TeX-master-file) <span style="color: #303030;">".pdf"</span>)))
    (<span style="color: #111111; font-weight: bold;">if</span> (get-buffer pdf-buffer-name)
        (switch-to-buffer-other-window pdf-buffer-name)
      (find-file-other-window pdf-buffer-name))
    (<span style="color: #111111; font-weight: bold;">if</span> (not (eq major-mode 'doc-view-mode))
        (doc-view-mode))
    (doc-view-revert-buffer t t)
    (switch-to-buffer-other-window tex-buffer-name)))

(add-hook 'LaTeX-mode-hook
          (<span style="color: #111111; font-weight: bold;">lambda</span> ()
            (define-key LaTeX-mode-map (kbd <span style="color: #303030;">"C-c C-v"</span>) 'open-show-pdf)
            (visual-line-mode t)
            (turn-on-reftex))
          t)
</pre>
</div>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2012-10-14-emacs-customizations.html</link>
  <pubDate>Sun, 14 Oct 2012 09:14:00 +0200</pubDate>
</item>
<item>
  <title>Text editing with confidence and Emacs</title>
  <description><![CDATA[<p>
In college, I realized for the first time how a good text editor could save me serious time, when I dragged an image file into Textmate and it auto-inserted all the LaTeX boilerplate for a figure. A few years later, on my first job, I learned <a href="http://www.viemu.com/">Vim key bindings for Visual Studio</a> because I hated text editing in Visual Studio so much. This showed me another way how a good text editor could save me serious time. A year after that, I was bored and tried Emacs. With Emacs, I discovered the marvelous world of <a href="https://en.wikipedia.org/wiki/REPL">REPLs</a> and <a href="http://orgmode.org/">outlining</a>.
</p>

<p>
Note that this is not supposed to be a comparison between text editors. I have done that <a href="http://bastibe.de/text-editors.html">already</a>. This will be a collection of some of the coolest things my text editor of choice is capable of. Stuff I love!
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Text editing</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
In my admittedly short history of working with computers and text professionally I have realized a universal truth about the tools I like to use: A great tool is a tool I can trust. A tool I can use with confidence because I know that it will do what I want. Furthermore, a great tool is a tool that does what I want with a minimum amount of friction.
</p>

<p>
Here is one of my pet peeve with many text editors: Whenever I initiate a text search, a modal dialog box pops up where I have to enter the search phrase, then click a button to search for that word. In contrast <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Incremental-Search.html#Incremental-Search">great</a> <a href="http://vimdoc.sourceforge.net/htmldoc/usr_03.html#03.8">text</a> <a href="http://docs.sublimetext.info/en/latest/search_and_replace/search_and_replace.html">editors</a> allow searching for text without changing to a different window and show the results immediately while entering the search string. This is very fast and precise. In fact, it is so useful that searching is one of the most popular means of text navigation in text editors that have it.
</p>

<p>
This is a theme that goes through all these features: I look for stuff that is fast and precise, because this will enable more powerful applications of seemingly simple techniques.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Outlining and task management</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
Outlining is writing an hierarchical list of stuff that can be reordered and sub-trees can be hidden. I tried some graphical outliners before. I did not quite see the point of it. Instead, I always kept my todo lists in simple <a href="http://daringfireball.net/projects/markdown/">Markdown</a> files. It worked well enough.
</p>

<p>
But with Emacs, I found out about <a href="http://orgmode.org/">org-mode</a>, which is at its heart an outliner with a syntax somewhat like Markdown. It proved to be surprisingly powerful to be able to easily refile entries or whole sub-trees in my todo lists. Also, having trees be collapsible effectively enabled me to consolidate all my todo management into one file without that file becoming unmanageably big.
</p>

<p>
Add to that the more advanced task tracking features of org-mode, such as <a href="http://orgmode.org/features.html#clocking">time tracking</a> or <a href="http://orgmode.org/features.html#planning">advanced todo planning</a> and this has become one of the most pivotal tools I use daily.
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Shell interaction and operating system compatibility</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
Whenever my job required me to work on Windows, I often found it jarring to not have a command line available. Granted, there is <a href="http://cygwin.com/">Cygwin</a>, but that does not play with the Windows directory structure too well. Also, many programs behave slightly differently on Linux, Cygwin and OSX. Basically, it drove me nuts.
</p>

<p>
Again, Emacs came to the rescue though: <a href="http://www.gnu.org/software/emacs/manual/html_node/eshell/What-is-Eshell_003f.html">Eshell</a> is a shell implemented in Emacs with no external dependencies. Thus, it comes installed on all my machines and works the same way on every operating system. Sadly though, Eshell is not quite full-featured and compatibility with some shell programs is kind of rough. In particular, it does not work well with <code>less</code> like scrolling buffers. However, some of those, like <code>man</code> or <code>info</code> are automatically opened in a special mode in Emacs itself, so this is not as bad as it sounds.
</p>

<p>
At more than one point, Eshell probably saved my sanity.
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">Git interaction</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
Source control is a crucial tool when working with source code. In college we used <a href="http://subversion.tigris.org/">SVN</a>. Even cooler is <a href="http://git-scm.com/">Git</a>, though the initial learning curve is pretty bad. Personally, I learned it by mucking around on the command line and breaking stuff there, then using <a href="http://www.git-tower.com/">Tower</a> to restore the repository to some sane state. Sadly though, Tower is OSX only, so I was kind of screwed on Windows and Linux.
</p>

<p>
Again, enter Emacs: Emacs has this magical mode called <a href="http://magit.github.com/magit/magit.html#Introduction">magit</a>, which builds an interactive git interaction program within Emacs. With magit, all the major git commands are just a keystroke away and diffs or logs are easily accessible, too. It really is a major feat!
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Grab bag</h2>
<div class="outline-text-2" id="text-orgheadline5">
<ul class="org-ul">
<li>Emacs' integrated <a href="http://www.gnu.org/software/emacs/manual/html_node/ediff/Introduction.html">ediff</a> is a joy to use.</li>
<li>REPLs are one honking great idea and come with most language modes for dynamic languages in Emacs.</li>
<li>Emacs' <a href="http://www.gnu.org/software/auctex/">LaTeX mode</a> is amazingly powerful. Combine that with Emacs' ability to display PDF files <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html">graphically</a> in a buffer and you have an awesome LaTeX environment.</li>
<li>Emacs' documentation is wonderful. I learned many a trick just idly leafing through the built in Emacs documentation.</li>
<li>Built in package management for extensions is a great time saver. This is available in <a href="https://github.com/gmarik/vundle#about">Vim</a> and <a href="http://wbond.net/sublime_packages/package_control">Sublime Text</a> as an addon, too.</li>
<li>Lisp is indeed beautiful and elisp is quite joyful to program. I never really went beyond simple configuration in Vim. My <code>.emacs</code> file contains some quite sophisticated small programs though.</li>
</ul>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2012-10-13-emacs.html</link>
  <pubDate>Sat, 13 Oct 2012 11:30:00 +0200</pubDate>
</item>
<item>
  <title>A Story about Schemes</title>
  <description><![CDATA[<p>
<b>Disclaimer:</b> If you are a programmer, or wanting to be a programmer, or interested in programming, or, well, reading this, you should absolutely, positively watch the 1986 MIT lecture about <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/">The Structure and Interpretation of Computer Programs</a>. (Most conveniently available <a href="http://ia600401.us.archive.org/8/items/MIT_Structure_of_Computer_Programs_1986/">here</a>)
</p>

<p>
I tried reading <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">the book</a> numerous times, but it was too dry for my taste. The lecture however is juicy, brain-bending bliss. Especially if you don't know much functional programming yet. It certainly blew my mind. Frequently. Like, every ten minutes. Basically, I feel reborn as a programmer, with a new sense of what I am doing and how it should be done.
</p>

<p>
However, this is not about SICP, it is about Scheme, which happens to be the programming language that SICP uses to preach its sermons. Above all, Scheme beautiful. It is an astounding marriage of simplicity and power. It is also a mess in terms of implementations. There are dozens of implementations and they all implement a different, partly overlapping set of features that may or may not be part of the canonical Scheme&#x2013;if there is such a thing.
</p>

<p>
So, how to select the correct Scheme? Naively, I first chose the one SICP uses, <a href="http://www.gnu.org/software/mit-scheme/">MIT-Scheme</a>. However, I soon found out that it does not work well with Emacs (that is, it did not work at all with <code>scheme-mode</code> and <code>run-scheme</code>). Also, its prompt is weird: <code>]=&gt;</code>. Whatever.
</p>

<p>
So next, I tried <a href="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page">Gambit Scheme</a>, which works a lot better with Emacs. But then, I soon found out that it does not support functions like <code>filter</code>, which are kind of essential. I was quick to write my own version of that, but really, this stuff should be provided. Turns out, <code>filter</code> is part of a Scheme Request For Implementation, or SRFI. <code>filter</code> is part of SRFI1. There is a <a href="http://srfi.schemers.org/srfi-implementers.html">huge list</a> of different Schemes and the SRFIs they support. Also, there is a list of <a href="http://www.cs.utah.edu/~mflatt/benchmarks-20100126/log3/Benchmarks.html">Schemes sorted by performance</a>. With <a href="http://www.cs.utah.edu/~mflatt/benchmarks-20100126/log3/Benchmarks-plot.html">plots</a>, even. It's a mess.
</p>

<p>
So this left me profoundly confused. What Scheme would I use? Ideally, it should be fast, work with Emacs and implement a reasonable set of SRFIs. Homebrew lists these:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">bigloo</td>
<td class="org-left">chibi-scheme</td>
<td class="org-left">chicken</td>
</tr>

<tr>
<td class="org-left">gambit-scheme</td>
<td class="org-left">gauche</td>
<td class="org-left">guile</td>
</tr>

<tr>
<td class="org-left">kawa</td>
<td class="org-left">mit-scheme</td>
<td class="org-left">plt-racket</td>
</tr>

<tr>
<td class="org-left">scheme48</td>
<td class="org-left">scsh</td>
<td class="org-left">sisc-scheme</td>
</tr>

<tr>
<td class="org-left">stklos</td>
<td class="org-left">tinyscheme</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
Difficult decision. Frankly, I don't have an answer. That said, I found <code>plt-racket</code> to be a joy to work with. <code>(help filter)</code> will open your browser with the appropriate help page for <code>filter</code>. Amazing. Also, it implements <a href="http://srfi.schemers.org/srfi-implementers.html">a long list</a> of SRFIs that will probably satisfy my simplistic needs. And the <a href="http://docs.racket-lang.org/">documentation</a> is excellent. And then there is DrRacket, which is a nice REPL that comes right with <a href="http://racket-lang.org/">Racket</a>. I like it.
</p>
]]></description>
  <link>http://bastibe.de/2012-09-20-story-about-schemes.html</link>
  <pubDate>Thu, 20 Sep 2012 20:21:00 +0200</pubDate>
</item>
<item>
  <title>Kindle.app not starting on a case-sensitive file system</title>
  <description><![CDATA[<p>
So Kindle.app was updated through the App Store and did not start any more. It just crashed and the crash reporter came up.
</p>

<p>
A quick look at Console.app turns up a link to the actual crash report. And the crash report starts with
</p>

<pre class="example">
Dyld Error Message:
  Library not loaded: @executable_path/../Frameworks/libWEbCoreKRF.dylib
  Referenced from: /Applications/Kindle.app/Contents/Frameworks/libWebCoreViewer.dylib
  Reason: image not found
</pre>

<p>
<code>libWEbCoreKRF.dylib</code>? With a capitalized <code>E</code>? That looks very much like a spelling error. So, point your terminal to <code>/Applications/Kindle.app/Contents/Frameworks/</code>, type
</p>

<div class="org-src-container">

<pre class="src src-sh">sudo ln -s libWebCoreKRF.dylib libWEbCoreKRF.dylib
</pre>
</div>

<p>
to create a symlink with the misspelled name. Done.
</p>

<p>
Kindle works again.
</p>

<p>
Spelling is hard, it seems.
</p>
]]></description>
  <link>http://bastibe.de/2012-09-13-Kindle-app-does-not-start.html</link>
  <pubDate>Thu, 13 Sep 2012 20:19:00 +0200</pubDate>
</item>
<item>
  <title>On the Virtue of Contributing to and Using Open Source Software</title>
  <description><![CDATA[<p>
I am a mostly self-taught programmer. Apart from a few programming side jobs at the university, I have been programming professionally for the last two and a half years.
</p>

<p>
About two years ago, we wanted to buy a Matlab license for our company. However, our investors declined for dubious reasons. So I started looking for alternatives. Inspired by a good friend (thank you, Marc), I looked into Python. Python has this brilliant environment for <a href="http://numpy.scipy.org/">numpy</a> <a href="http://scipy.org/">scipy</a> and <a href="http://matplotlib.sourceforge.net/">matplotlib</a> that, for my particular purposes, rivals Matlab.
</p>

<p>
However, just like Matlab, Python lacked a way of playing real time audio out of the box. At the university, we used <a href="http://playrec.co.uk/">Playrec</a> for that purpose, which implements <a href="http://www.portaudio.com/">PortAudio</a> bindings for Matlab. Luckily, there was a similar package available for Python, called <a href="http://people.csail.mit.edu/hubert/pyaudio/">PyAudio</a>.
</p>

<p>
But, it had one crucial flaw: it only implemented blocking-mode audio I/O, so not much luck for my real time requirements. (Blocking mode means that whenever you want to play some audio, you have to wait until the piece of audio finishes playing before you can begin to play the next piece or do some computation. Clearly, you can not process audio while it is playing with such a scheme). After a lot of research, I figured that my best bet would be to dive in and add non blocking I/O to PyAudio.
</p>

<p>
At the time, I knew nothing of the Python C API (or Python, really), so those first attempts were riddled with subtle bugs and memory leaks. Nevertheless, it got the job done. I could play back audio in real time using Python!
</p>

<p>
This was a revelation to me: I could not only <i>use</i> a piece of software, I could also <i>change</i> it and mold it to my special needs!
</p>

<p>
Thus, I put up my changes on <a href="https://github.com/bastibe/PyAudio">github</a> and emailed the PyAudio maintainer. While the maintainer at the time did not have the time to incorporate my changes into the official PyAudio distribution, a few people discovered my version of it on github and contributed to it!
</p>

<p>
This, again, was a revelation to me: Not only could <i>I</i> change stuff other people did, wonderful people from around the world could collaborate and help each other. It always gave me a warm feeling of appreciation when some stranger on the internet chose to work with me!
</p>

<p>
Then, finally, I decided to take the plunge to Python 3. The main obstacle for this was that PyAudio did not support Python 3. So, again, I dove in and figured out how to make it compatible with Python 3. Again, I put the changes up on github and emailed the official PyAudio maintainer. This time, he took immediate notice and we started working on an official release of PyAudio including Python 3 support and non-blocking I/O.
</p>

<p>
And during those weeks, I had my third, and biggest, revelation about Open Source Software: The PyAudio maintainer is a brilliant mind, and I was humbled to find that I could learn a lot from this man.
</p>

<p>
<b>By working on Open Source Software, you can work with really smart people, and learn from them. And the fruits of that labor can serve as instructions to yet more people to learn from.</b>
</p>
]]></description>
  <link>http://bastibe.de/2012-09-08-on-the-virtue-of-oss.html</link>
  <pubDate>Sat, 08 Sep 2012 08:44:00 +0200</pubDate>
</item>
<item>
  <title>Fixing Errors in Epydoc</title>
  <description><![CDATA[<p>
I ran into this error twice now and wasted an hour both times, so it is time to put this on my universal scratchpad, i.e. this blog.
</p>

<p>
If you ever get this error when using <a href="http://epydoc.sourceforge.net/">epydoc</a>:
</p>

<pre class="example">
UNEXPECTED ERROR:
'Text' object has no attribute 'data'
</pre>

<p>
You are probably running a version of Python that is greater than the latest one that is supported by epydoc. This is because epydoc has not been updated since 2008 and Python 2.5.
</p>

<p>
Luckily, some <a href="http://www.agapow.net/programming/python/epydoc-go-boom">fine</a> <a href="http://stackoverflow.com/questions/6704770/epydoc-attributeerror-text-object-has-no-attribute-data">folks</a> on the internet have figured out how to fix these things.
</p>

<p>
Short answer: Find your <i>site-packages</i> directory:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">from</span> distutils.sysconfig <span style="color: #111111; font-weight: bold;">import</span> get_python_lib
<span style="color: #111111; font-weight: bold;">print</span>(get_python_lib())
</pre>
</div>

<p>
Go there, navigate to the <i>epydoc\/markup</i> directory and change line 307 of the file <i>restructuredtext.py</i> from
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111;">m</span> = <span style="color: #111111; font-weight: bold;">self</span>._SUMMARY_RE.match(child.data)
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #111111; font-weight: bold;">try</span>:
    <span style="color: #111111;">m</span> = <span style="color: #111111; font-weight: bold;">self</span>._SUMMARY_RE.match(child.data)
<span style="color: #111111; font-weight: bold;">except</span> <span style="color: #111111; text-decoration: underline;">AttributeError</span>:
    <span style="color: #111111;">m</span> = <span style="color: #111111;">None</span>
</pre>
</div>

<p>
This should fix that problem.
</p>
]]></description>
  <link>http://bastibe.de/2012-08-28-errors-in-epydoc.html</link>
  <pubDate>Tue, 28 Aug 2012 12:14:00 +0200</pubDate>
</item>
<item>
  <title>Using a Raspberry Pi as a Time Capsule for Mountain Lion</title>
  <description><![CDATA[<p>
A while ago, I bought a Time Capsule to take care of my backups. I can't say it has been smooth sailing. Every now and then, the Time Capsule would claim that the backup did fail. Sometimes a reboot would help, sometimes not. Sometimes <code>hdiutil</code> would be able to salvage the backups, sometimes not. Sometimes, the backup disk image would simply be corrupted and the only option would be to delete it and start over.
</p>

<p>
This might be bad luck or it might be due to a defective Time Capsule or it might be due to my computer. I have no idea. But the thing is, if I have to hack on my backup system anyway, lets do it in style, at least. So here goes:
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Ingredients: <a href="http://www.raspberrypi.org/">A Raspberry Pi</a>, an external hard drive, some patience</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
Format an SD card as described <a href="http://elinux.org/RPi_Easy_SD_Card_Setup">in the wiki</a>. I just installed the version of Debian that is provided on <a href="http://www.raspberrypi.org/downloads">the official website</a>. Now just boot up.
</p>

<p>
Next, I was stumped because I only have an Apple LED display and no convenient way of connecting the Raspberry Pi's HDMI output to the LED display's Mini Display Port. After some searching and a combination of three adapter cables, I finally got it connected and could see it boot. Really, I have no use whatsoever for the HDMI port on the Raspberry pi. So the first thing I did was to enable SSH, which luckily is available right there in the configuration utility that starts when you boot the thing for the first time.
</p>

<p>
After that, I disconnected the display and immediately was stumped because I now had no way of finding the Pi's IP address. Actually, I did not even have a network to connect it to. So I strung an ethernet cable from my laptop to the Pi and enabled <i>Internet Sharing</i> in order to (1) start the DHCP server and (2) give the Pi internet access. The IP address was then easily found using <code>arp -a</code>.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Setting up the hard drive</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
First off, I needed to format and mount my external hard drive to be usable as a Time Machine volume. <code>ls /dev</code> showed the hard drive as <code>/dev/sda</code>. Thus, I installed <code>parted</code> using <code>sudo apt-get install parted</code> and used it <code>sudo parted</code>. In parted, <code>select /dev/sda</code> sets it up to modify the external hard drive, <code>rm 1</code> deleted its main partition, <code>q</code> to quit parted. Next, creating a new partition: <code>sudo fdisk</code>, then in there <code>n</code> with <code>p</code> and <code>1</code> to create a new primary partition, then <code>w</code> to apply the changes and exit. Lastly, I created the file system with <code>sudo mkfs -t ext4 /dev/sda1</code> with the whole partition as its size. Now lastly, I created a mount point for it using <code>mkdir ~/TimeMachine</code> (don't use <code>sudo</code>!) and auto-mounted it by appending this to <i>/etc/fstab</i>
</p>

<pre class="example">
/dev/sda1 /home/pi/TimeMachine ext4 rw,auto,user,exec,sync 0 0
</pre>

<p>
Note: <code>sync</code> specifies that all file system changes have to be written to disk immediately, without caching. This might be bad for performance, but on the other hand, this behavior is probably a good idea for a backup system. I once read something somewhere that Apple is enforcing a similar behavior on their Time Capsules and that this is the reason why they won't allow any other network drive as Time Capsules.
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Setting up the shared folder</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
First up, this requires <code>netatalk</code>, so I did <code>sudo apt-get update</code> and <code>sudo apt-get install netatalk</code> to install it. Next, netatalk has to be configured to actually share the drive on the network. This is accomplished by appending this line to <i>/etc/netatalk/AppleVolumes.default</i>:
</p>

<pre class="example">
/home/pi/TimeMachine TimeMachine allow:pi cnidscheme:dbd options:upriv,usedot,tm
</pre>

<p>
Also, the afp daemon should be configured to use the proper authentification schemes. Thus, add this to <i>/etc/netatalk/afpd.conf</i>:
</p>

<pre class="example">
- -transall -uamlist uams_randnum.so,uams_dhx.so,uams_dhx2.so -nosavepassword -advertise_ssh
</pre>

<p>
<del>(maybe append <code>mdns</code> to the hosts in <i>/etc/nsswitch.conf</i>? Probably not necessary.)</del>
</p>

<p>
<del>I am also not quite sure whether I actually had to create a new file <i>/etc/avahi/services/afpd.service</i> and write into it:</del>
</p>

<div class="org-src-container">

<pre class="src src-xml">&lt;?<span style="color: #111111; font-weight: bold;">xml</span> <span style="color: #111111;">version</span>=<span style="color: #303030;">"</span><span style="color: #303030;">1.0</span><span style="color: #303030;">"</span> <span style="color: #111111;">standalone</span>=<span style="color: #303030;">'</span><span style="color: #303030;">no</span><span style="color: #303030;">'</span>?&gt;<span style="color: #303030; font-style: italic;">&lt;!--</span><span style="color: #303030; font-style: italic;">*-nxml-*</span><span style="color: #303030; font-style: italic;">--&gt;</span>
&lt;!<span style="color: #111111; font-weight: bold;">DOCTYPE</span> service-group <span style="color: #111111; font-weight: bold;">SYSTEM</span> <span style="color: #111111;">"</span><span style="color: #111111;">avahi-service.dtd</span><span style="color: #111111;">"</span>&gt;
&lt;<span style="color: #111111; text-decoration: underline;">service-group</span>&gt;
    &lt;<span style="color: #111111; text-decoration: underline;">name</span> <span style="color: #111111;">replace-wildcards</span>=<span style="color: #303030;">"</span><span style="color: #303030;">yes</span><span style="color: #303030;">"</span>&gt;%h&lt;/<span style="color: #111111; text-decoration: underline;">name</span>&gt;
    &lt;<span style="color: #111111; text-decoration: underline;">service</span>&gt;
        &lt;<span style="color: #111111; text-decoration: underline;">type</span>&gt;_afpovertcp._tcp&lt;/<span style="color: #111111; text-decoration: underline;">type</span>&gt;
        &lt;<span style="color: #111111; text-decoration: underline;">port</span>&gt;548&lt;/<span style="color: #111111; text-decoration: underline;">port</span>&gt;
    &lt;/<span style="color: #111111; text-decoration: underline;">service</span>&gt;
    &lt;<span style="color: #111111; text-decoration: underline;">service</span>&gt;
        &lt;<span style="color: #111111; text-decoration: underline;">type</span>&gt;_device-info._tcp&lt;/<span style="color: #111111; text-decoration: underline;">type</span>&gt;
        &lt;<span style="color: #111111; text-decoration: underline;">port</span>&gt;0&lt;/<span style="color: #111111; text-decoration: underline;">port</span>&gt;
        &lt;<span style="color: #111111; text-decoration: underline;">txt-record</span>&gt;model=Xserve&lt;/<span style="color: #111111; text-decoration: underline;">txt-record</span>&gt;
    &lt;/<span style="color: #111111; text-decoration: underline;">service</span>&gt;
&lt;/<span style="color: #111111; text-decoration: underline;">service-group</span>&gt;
</pre>
</div>

<p>
<del>And maybe, you have to create an empty file that signifies the drive as Time Machine compatible using <code>touch ~/TimeMachine/.com.apple.timemachine.supported</code>.</del>
</p>

<p>
<b>Edit:</b> Turns out, all these were not necessary. Thank you, reader Philipp, for trying them out!
</p>

<p>
I certainly did all that, but I am not quite sure which of these steps were strictly necessary. If you know, please let me, too.
</p>

<p>
Anyway, with all that done, restart both the netatalk and the Bonjour daemon using <code>sudo /etc/init.d/netatalk restart</code> and <code>sudo /etc/init.d/avahi-daemon restart</code>.
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">Setting up the Time Machine</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
<del>Now, back to the Mac. In order to make Time Machine accept the new network share, run</del>
</p>

<p>
<del><code>defaults write com.apple.systempreferences TMShowUnsupportedNetworkVolumes 1</code></del>
</p>


<p>
<b>Edit:</b> Turns out, this setting is not necessary. OSX just picks the Raspberry Pi as a usable Time Machine drive by default.
</p>

<p>
Finally, the TimeMachine folder on the Raspberry Pi was available as one of the backup drives. Halleluja!
</p>

<p>
Now transfer speeds for the initial backup are not exactly what I would call fast, but this might not be the Pi's fault. For one thing, the Pi is reporting to only run at half load. For another thing, the external hard drive and its USB connection is probably not very speedy. And lastly, I seem to remember that initial backups always were slow. But really, only time will tell how well this thing can do the job of a Time Capsule.
</p>

<p>
Further testing shows that transfer speeds are very comparable to the Time Capsule. Thus, I declare this a raging success!
</p>

<p>
This article heavily steals from these fine folks on the internet:
</p>

<ul class="org-ul">
<li><a href="http://kremalicious.com/ubuntu-as-mac-file-server-and-time-machine-volume/">Matthias Kretschmann</a></li>
<li><a href="http://www.trollop.org/2011/07/23/os-x-10-7-lion-time-machine-netatalk-2-2/">Steffen L. Norgren</a></li>
<li><a href="http://www.mikepalmer.net/build-a-netatalk-time-machine-for-osx-lion-using-debian-6-0-squeeze/">Mike Palmer</a></li>
</ul>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2012-07-29-using-raspberry-pi-as-time-machine.html</link>
  <pubDate>Sun, 29 Jul 2012 21:18:00 +0200</pubDate>
</item>
<item>
  <title>How Apple is Failing Me</title>
  <description><![CDATA[<p>
I bought my first Apple computer in 2007 after a long time of gaming on Windows and a few years of Linux. In the beginning, I was just amazed at the consistency, practicality and sanity of the whole experience. I think I had a bad case of tinkeritis and neophilia in my Linux days, so this was probably to be expected.
</p>

<p>
Later, I marveled at the level of polish in the third party software ecosystem around Macs. Then I was just glad to have a slick GUI with actual Unix underpinnings. For reference, this happened in the time span from OS X 10.5 Leopard until 10.7 Lion. However, in that same time frame, I also noticed a gradual increase in problems. The computer seems to crash slightly more often, programs seemed to become more buggy, behavior less logical. At first, I marked this up as mostly a matter of my own increasing knowledge of the system, but as time went on, I became more and more convinced that it was actually the system getting worse, not myself becoming more sensitive.
</p>

<p>
So here are some of those problems:
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Lack of Uninstallers</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
Computer people like to try new software. Some new software is crap. You should delete crap from your computer. Amazingly however, the Mac does not have any way of uninstalling some software.
</p>

<p>
At the moment, there are three ways of getting software on your Mac.
</p>

<ol class="org-ol">
<li>Install from the App Store. Installation and un-installation work through the App Store.</li>
<li>Install by dragging n <code>*.app</code> bundle onto your computer. Uninstall by deleting the bundle. Works fine unless the app installed some stuff outside the bundle.</li>
<li>Install by executing a <code>*.pkg</code> file. No way to uninstall whatsoever unless the developer provides a separate uninstall mechanism.</li>
</ol>

<p>
Really, this is beyond ridiculous. There is no way of uninstalling software that has been installed from a <code>*.pkg</code>. How the heck am I supposed to use my computer without uninstalling software? Seriously, Apple? Is this a joke?
</p>

<p>
(So as a rule, I will only install <code>*.pkg</code> if there is absolutely no other way. Most of the time, I use or abuse <a href="http://mxcl.github.com/homebrew/">homebrew</a> to mitigate this problem.)
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Failing Time Machine</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
So the Mac comes with this awesome backup solution called Time Machine. Just plug in your external hard drive, and it will magically keep all your data save, at all times. Better yet, buy a Time Capsule and this will happen over the wireless network so you don't even need to plug in that hard drive any more. Magic!
</p>

<p>
Except, every few weeks the Time Machine icon in the menu bar will have a small exclamation point, which indicates that something went wrong. Usually, it means that Time Machine somehow lost track of what it was doing and silently corrupted all backups beyond repair. This happens across several computers and Time Machines. The only solution is to delete all backups and start anew.
</p>

<p>
So, backups that are not backing up. How amazing is that?
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">Living in the Cloud</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
OS X is this astonishingly modern operating system, where all your email, contacts, calendars and settings are synced in the cloud, accessible from anywhere and any device or service you use. In theory.
</p>

<p>
Synchronization is cool. I used to live within the Googleverse, and all my contacts, calendars and email accounts would sync through Google to all my Apple devices. Life was good! Until things started to go bad. At some point, Mail.app lost an email or two. Not a big deal. Then iCal would not connect any more, and would need to be restarted every other day. And finally, Address Book deleted all my contacts from Google. Actually, it did not delete the whole contacts, just all the information inside them, and leave empty husks with only a name and maybe a partial email address.
</p>

<p>
I wish I was making this up. I tested this quite thoroughly. Whenever Contacts was set up to sync with Google, after a few days or weeks it would delete all my contacts. Of course, this being cloud backed, it would delete them everywhere on all my devices, without any backup or anything. Thankfully, Address Book on iOS seems to not have this problem.
</p>

<p>
Things can go wrong, I understand that. But deleting all my contacts? Not cool. Not. Cool.
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">iPhoto</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
My grandfather has this G4 PowerBook. He stores all his photos on it. So at one point, we just could not stand it any more to support his software problems and set him up with a newer MacBook (2007) just so we could at least roughly recreate his problems on our machines.
</p>

<p>
But to do that, we had to convert his old library from iPhoto 1876 to iPhoto 2008. iPhoto itself claims to be able to do that, and lo and behold, it magically imported the old library, started an update program, then another, then another, then another, then another, and updated the old library through the ages up to the most recent version. And everything seemed to work fine, all the albums were there, all the thumbnails looked right, just perfect. Except if you opened any image, it would only show black. I mean, I can understand that an import of a library that old does not work. But at least tell me so. Don't silently corrupt everything!
</p>

<p>
And then there was my own library, started in late 2007 and handed through different revisions of iPhoto to today. It countains about 25 Gb worth of photos. Funny enough, its size on disk is actually 65 Gb. What. The. Heck?
</p>

<p>
At this point, a giant <b>thank you</b> to the <a href="http://www.fatcatsoftware.com/iplm/">iPhoto Library Manager</a> by Fat Cat Software, which saved both my library and my sanity! Those guys rock!
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">OS X Lion with Auto Save and Versions</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
The newest and brightest  in the land of Apple is OS X 10.7 Lion (at the time of writing). This amazing piece of software has a life-changing new feature: It friggin breaks one of the oldest tradition in computer history: Saving files.
</p>

<p>
Now normally, I would applaud this. Just save everything automatically and give me a sensible undo mechanism instead. Great!
</p>

<p>
However, in a stroke of genius, they also got rid of the possibility of <i>save as&#x2026;</i>, which is just an easy way of duplicating a document. Say, because you received it in an email and want to file it somewhere else on your hard drive. Or because the document is saved on a thumb drive and you want to copy it over to your hard drive. No sir, you have to navigate to the document in the finder and copy it by hand from there. Thank you for your patience.
</p>

<p>
But the worst offender is Preview. Every program on the Mac has this very handy <i>proxy icon</i> in the window title. Whenever a window is representing a file on your computer, it will show that very file in the title, so you can drag and drop it somewhere else. Except preview won't give you the actual document. Instead, it will give you an alias to that document. Which is worth <i>nothing at all</i> if you drag it into an email, your Dropbox or a thumb drive.
</p>

<p>
Or try to enable File sharing on your local network, which works <i>sometimes</i>, but not all the time. Or Internet Sharing, which might share your internet connection, or break your DNS settings. Or take Bluetooth, which for the life of me, I can not make work for tethering with my iPhone, even though the same works just fine with the iPad and other Macs. Or take networking in general, which every once in a while just completely breaks down on my company's network and just refuses to send or receive any data over the Ethernet cable until I reboot my computer.
</p>

<p>
I could go on. Let's just say that Lion increased my WTF-per-minute rate significantly.
</p>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6">Performance, Memory and File System</h2>
<div class="outline-text-2" id="text-orgheadline6">
<p>
Lets talk performance. I can't really complain here. In my MacBook Pro I have four cores, eight Gb of memory and a fast, Apple-sanctioned SSD. Life is good. Except that I happen to use virtual machines a whole lot and regardless of whether I use Linux (Ubuntu, Fedora, OpenSuse) or Windows (7, 8) on there, they feel faster.
</p>

<p>
I mean, you don't feel the pain of starting applications much on OS X, because in general, you simply keep your programs running all the time. But even so, Firefox starts up on Windows in, like, no time at all, but takes noticeable time on OS X (same configuration and plugins). I have an SSD, so I mostly don't care, but still.
</p>

<p>
Or take boot times. Even in a virtual machine, both Windows 7 and 8 and Ubuntu 12.04 and Fedora 17 boot up in less than half a minute. In comparison, OS X Lion takes significantly longer, sometimes minutes. Again, you usually don't feel that pain too much because you don't reboot your Mac all that often (unless you run Bootcamp for gaming regularly). Still, OS X boot and shutdown times are downright shameful these days.
</p>

<p>
Lets run a few virtual machines. I have eight Gb of memory. Lets boot up a Windows VM and give it two Gb. Do anything you want, run Eclipse <i>and</i> Visual Studio <i>and</i> Firefox with loads of tabs <i>and</i> Steam. Windows will do just fine. Those two Gb are plenty for anything except gaming and photo/video editing. Do the same thing with Linux, same result. In fact, Linux will work just fine with even less memory. But OS X? Don't even <i>think</i> of running it with less than two Gb. Four Gb will give you a workable system if you don't run too many memory intensive applications. But start up XCode and Eclipse and you are done for. This is a huge waste.
</p>

<p>
And lastly, let's talk HFS+. Did you know that HFS+ has a global lock that prevents any program from accessing the hard drive while another program is doing so? That explains why OS X is so friggin slow on non-SSD drives. And did you ever notice that HFS+ is slowly corrupting your data, even if there are no power failures or anything? I fire up Disk Utility every so often and it will always find some file system corruptions. It rarely breaks stuff, but really, the file system is the very last part of my system I want to see failing randomly.
</p>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7">So, what now?</h2>
<div class="outline-text-2" id="text-orgheadline7">
<p>
With all this love, why am I still using a Mac? Well, for one thing, the hardware is seriously great. I would love to see some laptop manufacturer build something equally sturdy, light and good looking as a MacBook Pro. I would love to see someone build a great touch pad into a non-Apple device. I would love to see Retina displays everywhere<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. But I don't.
</p>

<p>
And then there is software. Where is <a href="http://www.git-tower.com/">Tower</a> for Windows or Linux? Or <a href="http://www.sparrowmailapp.com/">Sparrow</a> or <a href="http://tapbots.com/blog/tweetbot/tweetbot-for-mac">Tweetbot</a> or <a href="http://reederapp.com/mac/">Reeder</a> or <a href="http://www.pixelmator.com/">Pixelmator</a> or iPhoto? I'm not saying there are no alternatives, but I certainly have not been able to find any that were really up to the same level of polish.
</p>

<p>
That said, I have recently been playing around with Windows 8, Ubuntu 12.04 and Fedora 17 and I must say, I am quite taken with them. All of them. As for the next computer I am going to buy, I am doubtful if it will be an Apple computer again.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
As a matter of fact, I would love to see well enough to see Retina at all, but that is beside the point
</p></div></div>


</div>
</div>]]></description>
  <link>http://bastibe.de/2012-07-09-apple-is-failing-me.html</link>
  <pubDate>Thu, 19 Jul 2012 19:49:00 +0200</pubDate>
</item>
<item>
  <title>Blogging with Pelican (and not Octopress)</title>
  <description><![CDATA[<p>
For a while now, I have been moving more and more services I use off Google. The reasons for that are manyfold, and few of them have anything to do with Google being evil or not&#x2013;just to get that out of the way.
</p>

<p>
One of the last holdouts has been <a href="http://daskrachen.com/">my neglected Blogspot blog</a>. And one of the reasons for it being neglected is that it was hosted on Blogspot. Now don't get me wrong here, Blogspot is a terriffic blogging platform. You have this very nice nearly-WYSIWYG text editor right in your browser, you can upload images, you can publish instantly to your blog&#x2026; Basically everything is taken care of for you conveniently right there in your browser. Google Style.
</p>

<p>
Its just that I don't like to work that way. I like plain text. I like typing stuff into a plain text editor. I like to be in control. And Blogspot might be convenient, but it did not make me feel like I was in control. In fact, I lost at least one article to Blogspot for unknown reasons.
</p>

<p>
Enter static site generators. The idea is that instead of writing rich text into some website, you create you content however you want on your own computer, then use a static generator which converts it into a set of static HTML pages and upload those to your website. Now all of the creation process is happening on your computer. You are in control. Probably the most popular program to do that is <a href="https://github.com/mojombo/jekyll">Jekyll</a>.
</p>

<p>
The second part of the equation is some kind of publishing platform. With these static site generators, really any web server does that trick. Just push your generated HTML files to the server and be done with it. Even cooler is Github. Using <a href="http://pages.github.com/">Github pages</a>, you can use your existing Github account and infrastructure to publish your blog just by pushing the HTML to Github. This is seriously cool!
</p>

<p>
So, I set out and tried <a href="http://octopress.org/">Octopress</a>, which combines these two things into a nice blogging platform. Honestly though, I don't know much Ruby and all that <code>rake</code> workflow did not make me much more comfortable than pushing stuff into Blogspot.
</p>

<p>
Hence, I looked for alternatives. What I ended up with is <a href="http://pelican.notmyidea.org/">Pelican</a>, a very simple static site generator written in Python. Finally, this is a codebase that is easy enough for me to understand and modify. If there is any trouble with my blog, I will be (and have been) able to just look at the source code and figure out what is going wrong. I like this!
</p>

<p>
To publish a new blog post, I will start by writing the post in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> (a format I understand), process it using the very simple command line <code>pelican -s my_config_file.py posts/</code>, and push the result to GitHub. Easy as pie. And I feel like I am in control again!
</p>

<p>
Actually, if this is just a bit too technical for you, check out <a href="http://calepin.co/">Calepin</a> instead. It uses the very same Pelican engine, but instead of fiddling with Git, you just put your markdown files into your Dropbox, and&#x2013;poof&#x2013;you magically have a Blog!
</p>

<p>
If you want to see my blog as a repo on Github, just <a href="https://github.com/bastibe/bastibe.github.com/">go have a look</a> (the <code>master</code> branch contains the HTML, the <code>source</code> branch contains the configuration and Markdown).
</p>
]]></description>
  <link>http://bastibe.de/2012-07-18-blogging-with-pelican.html</link>
  <pubDate>Wed, 18 Jul 2012 21:11:00 +0200</pubDate>
</item>
<item>
  <title>How to get solarized syntax highlighting on your blog</title>
  <description><![CDATA[<p>
Yesterday, I spent a few hours creating a solarized like CSS file for use with my new blogging tool. You could just scrape the settings from this very website, but for convenience, here they are:
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Text </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .t   { <span style="color: #111111;">color</span>: #586e75 }

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Whitespace </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .w   { <span style="color: #111111;">color</span>: #073642 }

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Error </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .err { <span style="color: #111111;">color</span>: #cb4b16; }

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Keyword </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .k   { <span style="color: #111111;">color</span>: #859900 }
.codehilite .kc  { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Keyword.Constant </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .kd  { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Keyword.Declaration </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .kn  { <span style="color: #111111;">color</span>: #b58900 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Keyword.Namespace </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .kp  { <span style="color: #111111;">color</span>: #859900 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Keyword.Pseudo </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .kr  { <span style="color: #111111;">color</span>: #073642 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Keyword.Reserved </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .kt  { <span style="color: #111111;">color</span>: #b58900 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Keyword.Type </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .n   { <span style="color: #111111;">color</span>: #586e75 }
.codehilite .na  { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Attribute </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .nb  { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Builtin </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .nc  { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Class </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .ne  { <span style="color: #111111;">color</span>: #cb4b16 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Error </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .no  { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Constant </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .nd  { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Decorator </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .ni  { <span style="color: #111111;">color</span>: #2aa198; font-weight: bold } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Entity </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .nf  { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Function </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .nn  { <span style="color: #111111;">color</span>: #586e75; } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Namespace </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .nt  { <span style="color: #111111;">color</span>: #2aa198; font-weight: bold } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Tag </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .nv  { <span style="color: #111111;">color</span>: #cb4b16 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Variable </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Builtin </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .b   { <span style="color: #111111;">color</span>: #859900 }
.codehilite .bp  { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Builtin.Pseudo </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Variable </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .v   { <span style="color: #111111;">color</span>: #586e75 }
.codehilite .vc  { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Variable.Class </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .vg  { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Variable.Global </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .vi  { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Name.Variable.Instance </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Number </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .m { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Number </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .mf { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Number.Float </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .mh { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Number.Hex </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .mi { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Number.Integer </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .mo { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Number.Oct </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .s { <span style="color: #111111;">color</span>: #2aa198 }
.codehilite .sb { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Backtick </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .sc { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Char </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .sd { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Doc </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .s2 { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Double </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .se { <span style="color: #111111;">color</span>: #cb4b16 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Escape </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .sh { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Heredoc </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .si { <span style="color: #111111;">color</span>: #cb4b16 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Interpol </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .sx { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Other </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .sr { <span style="color: #111111;">color</span>: #cb4b16 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Regex </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .s1 { <span style="color: #111111;">color</span>: #2aa198 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Single </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .ss { <span style="color: #111111;">color</span>: #cb4b16 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.String.Symbol </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Integer </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .il { <span style="color: #111111;">color</span>: #268bd2 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Literal.Number.Integer.Long </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Operator </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .o  { <span style="color: #111111;">color</span>: #586e75 }
.codehilite .ow { <span style="color: #111111;">color</span>: #859900 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Operator.Word </span><span style="color: #303030; font-style: italic;">*/</span>

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Punctuation </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .p  { <span style="color: #111111;">color</span>: #586e75 }

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Comment </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .c { <span style="color: #111111;">color</span>: #93a1a1; font-style: italic }
.codehilite .cm { <span style="color: #111111;">color</span>: #93a1a1; } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Comment.Multiline </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .cp { <span style="color: #111111;">color</span>: #93a1a1 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Comment.Preproc </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .c1 { <span style="color: #111111;">color</span>: #93a1a1; } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Comment.Single </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .cs { <span style="color: #111111;">color</span>: #93a1a1; } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Comment.Special </span><span style="color: #303030; font-style: italic;">*/</span>

.codehilite .hll { background-color: #dc322f }

<span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .g { <span style="color: #111111;">color</span>: #586e75 }
.codehilite .gd { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Deleted </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .ge { font-style: italic } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Emph </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .gr { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Error </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .gh { <span style="color: #111111;">color</span>: #586e75; font-weight: bold } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Heading </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .gi { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Inserted </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .go { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Output </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .gp { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Prompt </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .gs { font-weight: 586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Strong </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .gu { <span style="color: #111111;">color</span>: #586e75; font-weight: bold } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Subheading </span><span style="color: #303030; font-style: italic;">*/</span>
.codehilite .gt { <span style="color: #111111;">color</span>: #586e75 } <span style="color: #303030; font-style: italic;">/* </span><span style="color: #303030; font-style: italic;">Generic.Traceback </span><span style="color: #303030; font-style: italic;">*/</span>
</pre>
</div>

<div class="org-src-container">

<pre class="src src-c">code, pre {
    <span style="color: #111111;">background</span>: #fdf6e3;
    -webkit-box-shadow: inset 0 0 2px #000000;
    -moz-box-shadow: inset 0 0 2px #000000;
    box-shadow: inset 0 0 2px #000000;
    <span style="color: #111111;">color</span>: #586e75;
    margin-left: 0px;
    font-family: <span style="color: #303030;">'Droid Sans Mono'</span>, monospace;
    <span style="color: #111111;">padding</span>: 2px;
    -webkit-border-radius: 4px;
    -moz-border-radius: 4px;
    border-radius: 4px;
    -moz-background-clip: padding;
    -webkit-background-clip: padding-box;
    background-clip: padding-box;
}
</pre>
</div>

<p>
Keep in mind though that I have no formal knowledge of CSS whatsoever beyond what I could gather from these very files.
</p>
]]></description>
  <link>http://bastibe.de/2012-07-15-solarized-for-pygments.html</link>
  <pubDate>Sun, 15 Jul 2012 14:33:00 +0200</pubDate>
</item>
<item>
  <title>How to gem install rlua on OSX/homebrew</title>
  <description><![CDATA[<p>
If you want to use rlua, you need to have Lua installed. However, OSX does not come with Lua preinstalled, so you install it using
</p>

<p>
#+begin src sh
    brew install lua
#end<sub>src</sub>
</p>

<p>
Oh, would it be nice if everyone agreed on how to install stuff like this. Case in point, homebrew installs liblua (quite reasonable) in <code>/usr/local/lib/liblua.[5.1[.4]].dylib</code>
</p>

<p>
rlua however expects it to be called <code>liblua5.1.dylib</code> (notice the missing <code>.</code>).
</p>

<p>
Similarly, the headers are installed plainly into <code>/usr/local/include</code>, whereas rlua expects them to be in a folder called <code>lua5.1</code>.
</p>

<p>
Hence, here is how you get rlua to install:
</p>

<div class="org-src-container">

<pre class="src src-sh">ln -s /usr/local/Cellar/lua/5.1.4/lib/liblua.5.1.4.dylib /usr/local/lib/liblua5.1.dylib
ln -s /usr/local/Cellar/lua/5.1.4/include/ /usr/local/include/lua5.1
</pre>
</div>

<p>
Not exactly a beautiful solution, but it works.
</p>
]]></description>
  <link>http://bastibe.de/2012-02-22-how-to-gem-install-rlua-on-osx-slash-homebrew.html</link>
  <pubDate>Wed, 22 Feb 2012 11:43:00 +0100</pubDate>
</item>
<item>
  <title>Text Editors</title>
  <description><![CDATA[<p>
As far as I can tell, there has been a resurgence of development in the landscape of text editors of late. Only a few years ago, the text editing scene one the Mac seemed to be dominated by
</p>

<ul class="org-ul">
<li>Crazy unix farts using Vim or Emacs</li>
<li>BBEdit users</li>
<li>Textmate users</li>
</ul>

<p>
During a very short period of time though, a raft of new text editors became available. Sublime Text in particular has been getting a lot of attention and rave reviews by many people. To me, this warrants another look at what these new (and old) text editors are offering.
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><a href="http://www.vim.org/">Vim</a></h2>
<div class="outline-text-2" id="text-orgheadline1">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/vim_small.png" alt="vim_small.png" />
</p>
</div>

<p>
Vim is very old software. It is a more or less direct descendant of ed from the early 1970s. It grew up in text based terminals without any graphical windows or mouses. Hence, all of its functionality is really meant to be used from the keyboard only, even though mousing is supported these days.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/vim_window_small.png" alt="vim_window_small.png" />
</p>
</div>

<p>
The terminal inheritance limits its graphical capabilities somewhat. There are no graphical drawers or animations or pixel-precise scrolling. Everything is displayed in terms of rectangular characters, hence scrolling can only ever scroll one line at a time and there are no graphical images anywhere. Since Vim predates graphical displays altogether, it does not adhere to its standards much. In fact, in its normal mode it won't even type out the characters you hit on your keyboard.
</p>

<p>
This is at really Vim's greatest strength and weakness: In its 'normal mode', all key presses are interpreted like keyboard shortcuts in other programs. And what shortcuts there are! Pretty much every key on the keyboard has some special function, most keys even serve multiple functions depending on what mode you are in at the moment. Thus it should come as no surprise that you can do anything with these shortcuts at astounding speed. Watching a seasoned Vimmer do his keyboard dance is something to behold. Moving the cursor is especially powerful. Usually, any place in the current file is reachable using just a few key strokes. But of course, you are not limited to just viewing one file at a time either: Vim supports arbitrary split views and can even be used for efficient diffing or merging. And when it comes to changing that text, Vim is no slouch, either. There are various registers for saving text or locations, there is an increadibly powerful macro system, amazing searching capabilities, command line integration, there are specialized functions for programming… Really, when it comes to pure text editing chops, nothing beats Vim.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/vim_full_window_small.png" alt="vim_full_window_small.png" />
</p>
</div>

<p>
Vim is also incredibly customizable. Of course, there is no graphical preferences windows to do the customization in. You customize Vim by editing simple text files. Vim even includes its very own scripting language, VimScript, to enable users to extend it. There is a huge wealth of plugins available. These range from file browsers to support for new languages, or even some limited integration with compilers or source control tools. However, VimScript is not exactly a very pleasant language to code in and Vim does not actually like to interface with external tools much. These two issues limit the scope of what is possible with Vim somewhat–deep compiler integration and graphical debugging are fiddly at best, so you will probably just keep a terminal open and do them there. That said, the plugin ecosystem for Vim is probably still leaps and bounds beyond what is possible with most other text editor out there, but it does not quite reach the same breadth or integration as some IDEs or Emacs do.
All that power comes at a price. Learning Vim is hard. If you start out with Vim, it will probably take at least a week or so until you can approach your old productivity again. Mastering Vim will take years. Even after months and months of diligent learning, you will find some new tricks and features to increase your speed.
</p>

<p>
At the end of the day though, Vim is an amazingly powerful tool, and it is certainly worth it to at least learn the basics of it. Actually, most people I know who tried it have actually stuck with it. Myself, I have some two years of Vimming under my belt, too, and it has proven to be a very important tool for me.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"><a href="http://www.gnu.org/software/emacs/">Emacs 24</a></h2>
<div class="outline-text-2" id="text-orgheadline2">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/emacs_small.png" alt="emacs_small.png" />
</p>
</div>

<p>
The thing you have to realize about Emacs is that… Emacs is powerful. People have called it <a href="http://www.emacswiki.org/emacs/NealStephenson">the thermonuclear text editor</a>, and for a reason. Emacs can edit text, of course, but that is really only the most mundane of its features. Really, Emacs is a little world of its own. You can read and write your mail from within Emacs, you can do spreadsheets, calendaring, it can host terminals, debuggers, compilers, there is Tetris, hell, it even includes its very own psychiatrist! Speaking off the record here, I have a suspicion that Emacs might achieve sentience pretty soon.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/emacs_window_small.png" alt="emacs_window_small.png" />
</p>
</div>

<p>
Similar to Vim, Emacs is old software. It was invented in the late 1970s at MIT and has been growing ever since. Also like Vim, its terminal inheritance shows its teeth sometimes: mouseweel scrolling can be awkward, especially if you like your inertial scrolling, the menu bar seems to not get much love and keyboard shortcuts are not conformant with what you might be used to from other text editors. On the other hand, Emacs has some very modern features like mixing of proportional fonts and fixed-width fonts or inline image display.
</p>

<p>
The upside of being old is that Emacs is very mature software. There is a ginormous selection of extensions available for Emacs, most of it actually distributed right with Emacs itself and a lot of it is superbly documented. Besides that, there are <a href="http://tromey.com/elpa/">several</a> <a href="http://marmalade-repo.org/">integrated</a> <a href="http://elpa.gnu.org/">repositories</a> for additional tools that can be downloaded and installed from the internet.
</p>

<p>
The real power of Emacs is in that it is really not so much a text editor but a virtual machine for a programming language called eLisp. Really anything that can possibly be written in Lisp and remotely involves text editing is possible and probably already available in Emacs. As such, Emacs probably has the most diverse feature set of any text editor out there. Most relevant to programmers will be debugger integration, automatic syntax and spell checking, powerful and context-aware autocompletion, refactoring capabilities and much much more. Emacs is the only program in this list which can actually be used as a full fledged IDE on its own.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/emacs_full_window_small.png" alt="emacs_full_window_small.png" />
</p>
</div>

<p>
But Emacs is not limited to programming at all. As mentioned before, it includes an Email client, a great calendar with an agenda, several IM clients, RSS readers, an <a href="http://orgmode.org/">astoundingly powerful outliner</a> and spreadsheet editor, it is frequently used for blogging, writing screen plays, books or really anything you can think of.
</p>

<p>
The only real downside to this is that Emacs is, well, old. There is great power there, but is is only accessible to those willing to learn the myriad key combinations to invoke it. Rellay, mastering Emacs is a task for years, not weeks. But of course, you are not forced to wield all the power Emacs has to offer at once. Getting up to speed with basic text editing in Emacs will only take a few minutes, and the built-in help system and tutorial will guide you further whenever you feel the need to explore.
</p>

<p>
I have been using Emacs for several months now and I am really enjoying it. It has a few shortcomings, but it is constantly being improved and getting more modern every day. I can see myself giving in to it and just live in Emacs all day long, but for now, I'm happy with it just being my primary text editor. However, I can't quite get beyond the fact that its pure text editing chops are nowhere near Vim. Then again, Emacs does <a href="http://gitorious.org/evil/pages/Home">support Vim key bindings</a>, so this might turn out not to bother me in the long run.
</p>

<p>
At any rate, I would recommend anyone to give Emacs a shot at least for a short while. The power of Emacs can be an exhilarating experience, really.
</p>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><a href="http://macromates.com/">Textmate (2)</a></h2>
<div class="outline-text-2" id="text-orgheadline3">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/textmate_small.png" alt="textmate_small.png" />
</p>
</div>

<p>
For the longest time, all GUI text editors could generally be classified as either Vim-based, Emacs-based or shortcut-based. The prevalent crop of shortcut-based GUI text editors mapped all its advanced functions to certain modifier-letter combinations and/or menu bar items.
</p>

<p>
When Textmate was introduced, it introduced a new concept: snippets. Snippets are short pieces of text which, upon activating a certain trigger, would expand to arbitraryly complex constructs.
</p>

<p>
Thus, to define a class in some programming language, you would type <code>class</code>, then hit TAB, and it would expand to a complete class declaration with constructor, destructor and documentation. Further yet, the class name would be highlighted immediately, so you could start editing it to your liking. These edits would even automatically percolate to all the relevant places in the class declaration and thus automatically change all scope declarations and the like.
Or, you could drag some image file into some LaTeX code and it would expand (dragging being the trigger here) to a whole <code>\begin{figure}</code> complete with <code>\caption</code>, <code>\label</code>, the correct path to the image and everything else you need.
</p>

<p>
This has proven to be such a popular feature that since Textmate's inception, implementations of snippets have been developed for pretty much every IDE or text editor out there.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/textmate_window_small.png" alt="textmate_window_small.png" />
</p>
</div>

<p>
Textmate also featured a very flexible and easily extensible regex based syntax parser, beautiful color schemes, a very elegant project management system and a vibrant community extending it in many directions. This was even more fascinating in that most of this functionality was implemented using a convenient shell scripting engine that could utilize any programming language your shell supported.
</p>

<p>
Sadly though, its main developer got stuck somewhere along the way and development all but dried up for five years. This primarily meant that some issues just would not be fixed and thus, got all the more jarring. Most prominently, Textmate lacked split views, regex incremental search and would only do single character undo/redos. Many people left Textmate because of this lack of progress.
</p>

<p>
While I was in college, I used Textmate extensively and it proved to be a veritable tool for many editing tasks. It is somewhat limited in its integration with programming tools, though, so don't expect any complex compiler or debugger integration. Ultimately, I left it behind for lack of cross platform compatibility and lack of development. There used to be a Windows program called <a href="http://e-texteditor.com/">E Text Editor</a>, which wanted to become a fully compatible Textmate alternative for Windows and Linux, but development never even reached production quality.
</p>

<p>
Recently however, an early alpha version of Textmate 2 has been released that could reinvigorate the community and fix long standing issues. Whether that will actually happen will remain to be seen.
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><a href="http://www.vicoapp.com/">Vico</a></h2>
<div class="outline-text-2" id="text-orgheadline4">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/vico_small.png" alt="vico_small.png" />
</p>
</div>

<p>
Vico is a very new application that has spung to live only in 2011 and is not finished yet. It aims to be a modern Vim, combining the virtue of the powerful mode-based editing system of Vim with a modern Cocoa interface. It even merges Vim's editing capabilities with Textmate-derived snippets and syntax highlighting.
</p>

<p>
Really, it tries to be an organic symbiosis of Vim and Textmate. And for most purposes, it very much succeeds in this. Syntax highlighting is very solid, there is a code browser, a nice file browser and full support for Textmate snippets. Vico even includes a powerful scripting environment that enables you to extend it in a language called Nu, which has the interesting aspect of being able to call into every object or method in the Cocoa libraries, thus opening the doors to a boundless world of wonders. Its Vim integration is well on its way, too. The most notable omission at this point are macros. The developer is working on it though and has promised to implement them in the near future. Some other areas are lacking, too, but if development continues I see no reason why it should not become a very nice text editor.
</p>

<p>
As it stands though, development of Vico is going slow and its community is not very large yet. Vico is a very nice tool, but at the end of the day, I miss the raw power of an actual Vim just as I miss the vibrant community around Textmate. If you are not spoiled by Vim yet or find Vim just a bit too ugly for your taste, you could give Vico a try though.
</p>

<p>
Personally, I like it quite a bit and I am hoping very much that it will not be forgotten as a failed attempt to modernize Vim. That said, what with Sublime Text 2 including a limited support for Vim key bindings, I can't really see Vico taking off.
</p>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><a href="http://www.sublimetext.com/">Sublime Text 2</a></h2>
<div class="outline-text-2" id="text-orgheadline5">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/sublimetext_small.png" alt="sublimetext_small.png" />
</p>
</div>

<p>
Sublime Text is a fairly recent development. It is a one-man project that has gained a lot of enthusiastic following in the last few months. In many ways, it feels like the next step in text editor development. Much like several other text editors out there, it has adopted Textmate snippets, color themes and syntax definitions as its core feature set. On top of that though, it has built a very powerful and flexible extension system that really sets it apart.
</p>

<p>
Do you remember CMD-T from Textmate? To open some file, you would hit CMD-T and start typing a file name. The name would be fuzzy matched to select from all available files. Thus, typing <code>bcc</code> would select <code>BeaconController.cpp</code>. This form of selection is increadibly intuitive and fast. It is also the basis for the extension system of Sublime Text. If there is no keyboard shortcut for a command, hit CMD-Shift-P and start typing to invoke the command.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/sublimetext_window_small.png" alt="sublimetext_window_small.png" />
</p>
</div>

<p>
In very much the same way as M-x in Emacs (though with fuzzy matching), this can invoke arbitrarily complex commands such as <code>install bundle</code> or using some refactoring library. Additionally, the same mechanism can be used to jump to method names or opening files. Really, these features are very efficient implementations of a code browser and file browser.
</p>

<p>
The second big thing about Sublime Text is just the ridiculous amount of polish it received. For example, if you have two files with the same name, it will prefix the tab titles with the folder they reside in. Simple, but so useful! If you jump around in a file, there is always a subtle scrolling animation. Even simple text selections have slightly rounded borders and just look amazingly beautiful.
</p>

<p>
Also of note is that Sublime Text supports multiple cursors. Want to change then name of all occurrences of a variable? Just select them all (!) and change them all at once. This is another amazingly useful feature.
Its plugin system is based in Python, which is a refreshingly non-awkward choice for a text editor and spawned an astonishing amount of very interesting plugins already. Indeed the plugin system is flexible enough to support things like linters, source control integration and even something akin to Emacs's org-mode.
And it also supports <a href="http://www.sublimetext.com/docs/2/vintage.html">Vim key bindings</a>. Not very complete, but easily enough to be useful. Oh, and it is available cross-platform on Mac, Windows and Linux, too.
</p>

<p>
I think there are three big families of text editors: Emacs, Vim, and shortcut-based text editors. Since I discovered Textmate however, I started believing that it represents a new branch in the big tree of text editors. Sublime Text seems to be the next step in the evolution of the Textmate branch.
</p>

<p>
Really, Sublime Text is an amazing achievement. Maybe not quite as hackable as Emacs and not quite as flexible as Vim, but easily beating both in terms of elegance and modernity. If you don't want to learn Emacs or Vim, Sublime Text is what you should use. In fact, it is the first text editor ever that has tempted me to leave Emacs and Vim behind. Nuff said.
</p>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6">What else is out there</h2>
<div class="outline-text-2" id="text-orgheadline6">
<p>
Of course, that little list up there is by no means complete. Neither does it list all the amazing features these text editors have to offer, nor does it represent an exhaustive list of them. To the best of my knowledge, this is a short list of other text editors for the Mac platform. Note however, that I have never used any of them extensively and can only tell you stuff from heresay.
</p>
</div>

<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7"><a href="http://www.barebones.com/products/bbedit/index.html">BBEdit</a></h3>
<div class="outline-text-3" id="text-orgheadline7">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/bbedit.png" alt="bbedit.png" />
</p>
</div>

<p>
BBEdit is the big daddy of Mac text editors. It is currently available in version 10 and has a huge follwing predominantly amongst web developers. As far as I can tell, it includes amazing features for editing HTML. Maybe amongst the best out there.
The remainder of its feature set seems rather standard crop though. There is some support for compilation, source code control, snippets, plugins… Though nothing on the level of Vim or Emacs really. Its most important disadvantage is probably its lack of cross-platform availability and extensibility.
</p>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8"><a href="http://www.barebones.com/products/textwrangler/">TextWrangler</a></h3>
<div class="outline-text-3" id="text-orgheadline8">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/textwrangler.png" alt="textwrangler.png" />
</p>
</div>

<p>
TextWrangler is the free smaller brother of BBEdit. Its feature set is somewhat pared down in comparison with BBEdit. In particular, it is missing BBEdit's famous HTML magic and some advanced external tool integration.
Even for free, there are probably more capable candidates available, though maybe not at the same level of platform integration. That said, TextWrangler is not a bad choice and probably just fine for some casual text editing.
</p>
</div>
</div>

<div id="outline-container-orgheadline9" class="outline-3">
<h3 id="orgheadline9"><a href="http://www.jedit.org/">JEdit</a></h3>
<div class="outline-text-3" id="text-orgheadline9">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/jedit.png" alt="jedit.png" />
</p>
</div>

<p>
I really don't know much about JEdit other than that it is written in Java, it has a sizeable following and it is available cross-platform. It seems like it could be about as useful as any shortcut based text editor can ever be, which is no small achievement. Also, it features a rich plugin system, of which I only heard good things.
For all I know, this could be a very worthy alternative if you are on a budget (no Sublime Text) and don't want to learn Emacs or Vim.
</p>
</div>
</div>

<div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><a href="http://chocolatapp.com/">Chocolat</a></h3>
<div class="outline-text-3" id="text-orgheadline10">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/chocolat.png" alt="chocolat.png" />
</p>
</div>

<p>
Chocolat is yet another text editor that came into being in the post-Textmate void. It offers a good range of standard features, though notably missing advanced plugins apparently. Apart from that, it seems to be a solid shortcut based Mac text editor that is relatively cheap and actively developed.
</p>
</div>
</div>

<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><a href="http://www.kodapp.com/">Kod</a></h3>
<div class="outline-text-3" id="text-orgheadline11">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/kod.png" alt="kod.png" />
</p>
</div>

<p>
Kod started out as an open source alternative to Textmate. This is quite uncommon for a post-Textmate text editor and worth supporting. After a good start however, the developer found a new job and development has pretty much stalled.
</p>
</div>
</div>

<div id="outline-container-orgheadline12" class="outline-3">
<h3 id="orgheadline12"><a href="http://www.codingmonkeys.de/subethaedit">SubEthaEdit</a></h3>
<div class="outline-text-3" id="text-orgheadline12">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/subethaedit.png" alt="subethaedit.png" />
</p>
</div>

<p>
The great thing about SubEthaEdit is collaborative editing. if you want to edit text collaboratively with several people, SubEthaEdit performs the task seamlessly and elegantly.
Beyond that, it is a capable shortcut-based text editor. If you don't need the collaboration feature, you should probably look elsewhere though.
</p>
</div>
</div>

<div id="outline-container-orgheadline13" class="outline-3">
<h3 id="orgheadline13"><a href="http://www.peterborgapps.com/smultron/">Smultron</a></h3>
<div class="outline-text-3" id="text-orgheadline13">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/smultron.png" alt="smultron.png" />
</p>
</div>

<p>
Another venerable veteran on the Mac, Smultron used to be a free open source text editor that had a sizeable following. However, the developer ceased development at some point and later restarted the effort as a paid app in the Mac App Store.
Smultron lost most of its following in that transition.
</p>
</div>
</div>

<div id="outline-container-orgheadline14" class="outline-3">
<h3 id="orgheadline14"><a href="http://www.slickedit.com/products/slickedit">SlickEdit</a></h3>
<div class="outline-text-3" id="text-orgheadline14">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/slickedit.png" alt="slickedit.png" />
</p>
</div>

<p>
SlickEdit is easily the most expensive text editor in this list. A single user license for one platform and one developer costs a scant 300 bucks. That is a lot of money for a text editor and is usually only shelled out only for business critical platform exclusive IDEs. It seems as if SlickEdit tries to be exactly that for general purpose text editing.
It's feature list reads very well and checks all mayor boxes. It is available on pretty much any platform out there and is probably only rivalled by Emacs or Vim in that regard. It also supports emulation for Emacs or Vim key bindings.
That said, 300-600 $ per developer is a pretty hefty price tag. Personally, I doubt that SlickEdit can live up to that price if you compare it to some of the other examples in this list. It is undoubtedly a well-maintained and powerful text editor though.
</p>
</div>
</div>

<div id="outline-container-orgheadline15" class="outline-3">
<h3 id="orgheadline15"><a href="http://www.activestate.com/komodo-edit">Komodo Edit</a></h3>
<div class="outline-text-3" id="text-orgheadline15">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/komodo.png" alt="komodo.png" />
</p>
</div>

<p>
Komodo Edit is the free open source offspring of ActiveState's Komodo IDE. It's feature set is very complete and seems to be very worthy for many editing tasks. Being of IDE ancestry provides it with nice plugin support and very helpful deep language integration like sophisticated autocompletion and syntax checking.
There are also quite good Vim key bindings and it is available on the three major platforms. However, its language support is limited to Perl, Python, Tcl, PHP, Ruby and Javascript. Probably not a bad choice if you can live with the language selection and are on a budget.
</p>
</div>
</div>

<div id="outline-container-orgheadline16" class="outline-3">
<h3 id="orgheadline16">TextEdit</h3>
<div class="outline-text-3" id="text-orgheadline16">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/textedit.png" alt="textedit.png" />
</p>
</div>

<p>
The built-in text editor in OSX. No syntax highlighting, project management or any programming support whatsoever make this a rather poor choice. There are plenty of free alternatives out there.
That said, TextEdit does support rich text editing and might be of value for the odd letter to your grandma.
</p>
</div>
</div>

<div id="outline-container-orgheadline17" class="outline-3">
<h3 id="orgheadline17">Text editors for web development</h3>
<div class="outline-text-3" id="text-orgheadline17">
<p>
Strangely, all the major Mac text editors that cater specifically for web development are not cross platform. If web development is all you are ever doing though, these text editors might be well worth their money.
</p>
</div>

<div id="outline-container-orgheadline18" class="outline-4">
<h4 id="orgheadline18"><a href="http://www.panic.com/coda/">Coda</a></h4>
<div class="outline-text-4" id="text-orgheadline18">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/coda.png" alt="coda.png" />
</p>
</div>

<p>
Combine the SubEthaEdit text editing engine including its collaborative tools with the great FTP program Transmit and you have CODA, the program for "one-window web development". It even includes a reference book to HTML in the package. For what it is, probably of great value and nice polish. As a general purpose text editor, there are better alternatives.
</p>
</div>
</div>

<div id="outline-container-orgheadline19" class="outline-4">
<h4 id="orgheadline19"><a href="http://macrabbit.com/espresso/">Espresso</a></h4>
<div class="outline-text-4" id="text-orgheadline19">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/espresso.png" alt="espresso.png" />
</p>
</div>

<p>
Another text editor gearing specifically for web development. Thus, you get powerful HTML and CSS editing features and good support for typical web development languages such as PHP, Ruby or Markdoen, but no support for other languages. There is an extension system though that could improve language support. This might be a slightly less expensive alternative to Coda.
</p>
</div>
</div>

<div id="outline-container-orgheadline20" class="outline-4">
<h4 id="orgheadline20"><a href="http://tacosw.com/">Taco HTML Editor</a></h4>
<div class="outline-text-4" id="text-orgheadline20">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/taco.png" alt="taco.png" />
</p>
</div>

<p>
Another text editor geared exclusively towards web development. This time around though, there is no support for languages other than HTML, CSS and PHP, which makes this program a rather poor choice.
</p>
</div>
</div>

<div id="outline-container-orgheadline21" class="outline-4">
<h4 id="orgheadline21"><a href="http://www.beforedawnsolutions.com/applications/skedit">skEdit</a></h4>
<div class="outline-text-4" id="text-orgheadline21">

<div class="figure">
<p><img src="http://bastibe.de/static/2012-02/skedit.png" alt="skedit.png" />
</p>
</div>

<p>
skEdit supports a nice array of web development languages and offers a good range of features for a web development text editor. Also, it is pretty inexpensive in comparison to its brethren here. Probably a nice choice for web development if you are on a budget.
</p>
</div>
</div>
</div>
</div>
]]></description>
  <link>http://bastibe.de/2012-02-03-text-editors.html</link>
  <pubDate>Fri, 03 Feb 2012 18:22:00 +0100</pubDate>
</item>
<item>
  <title>How to make Tagbar work with Objective-C</title>
  <description><![CDATA[<p>
For the longest time, ctags did not support Objective-C. Without tags, many of the cool programming-related features of Vim simply didn't work. (There are ways to coax other programs to output tags, but this is usually painful)
</p>

<p>
Recently however, ctags finally gained support for Objective-C! Huzzah!
As of today, Objective-C support is not in the stable branch yet, but thanks to the magic of homebrew, an Obj-C ready ctags is only a <code>brew install ctags --HEAD</code> away!
</p>

<p>
With that, tag navigation in Vim works for Objective-C. Awesome!
However, Tagbar does not work yet. There used to be <a href="http://stackoverflow.com/a/5790832/1034">a workaround</a> that apparently worked for some people, but it did not work for me.
Things like this drive me nuts. I can see that tags are being generated, but Tagbar won't show them. What is going wrong?
</p>

<p>
Some investigation proved: There is simply no template in Tagbar for Objective-C! Luckily, that can be fixed quite easily: Simply put this code in your .vimrc:
</p>

<pre class="example">
" add a definition for Objective-C to tagbar
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
</pre>

<p>
With that, Tagbar should work. Admittedly, it won't work perfectly yet. Class definitions will show up in addition to their contents and the contents of all categories will go into the same list. Also, you won't get much more than a flat list of functions with no way to distinguish between class methods and object methods. This can be confusing at times, but by and large, it does the job!
</p>


<p>
Happy Vimming!
</p>
]]></description>
  <link>http://bastibe.de/2011-12-04-how-to-make-tagbar-work-with-objective-c.html</link>
  <pubDate>Sun, 04 Dec 2011 20:21:00 +0100</pubDate>
</item>
<item>
  <title>Compiling Scipy and Matplotlib again</title>
  <description><![CDATA[<p>
Well, it's compile time again. Once again, I need to install scipy and matplotlib using homebrew and pip on Lion.
It seems things have improved since I tried to compile last time! Well, it still does not work out of the box, but at least now it can be done without compiling by hand:
(remember to <code>brew install pkg-config gfortran</code> first)
</p>

<div class="org-src-container">

<pre class="src src-sh">pip install -e git+https://github.com/scipy/scipy#<span style="color: #111111;">egg</span>=scipy-dev
pip install -e git+https://github.com/matplotlib/matplotlib#<span style="color: #111111;">egg</span>=matplotlib
</pre>
</div>

<p>
I must say, this is still a mess. But at least, it is getting less bad.
</p>
]]></description>
  <link>http://bastibe.de/2011-10-13-compiling-scipy-and-matplotlib-again.html</link>
  <pubDate>Thu, 13 Oct 2011 15:27:00 +0200</pubDate>
</item>
<item>
  <title>Adobe AIR Application Crashes</title>
  <description><![CDATA[<p>
Adobe, oh Adobe. Why?
</p>

<p>
Your updater pops open. Adobe AIR 2.5, if I remember correctly. It runs, and after that, all AIR applications stop working. They boot, then crash and barf up a crash report.
</p>

<p>
Turns out, this is a problem with case sensitive file systems. If your file system is not case sensitive, you are experiencing some other problem and this fix is not for you.
</p>

<p>
See, Adobe has this library called <code>WebKit.dylib</code>. However, their code actually looks for <code>Webkit.dylib</code> (note the capitalisation of the K). Well, spelling is hard, I presume.
</p>

<p>
At least this is an error that can easily be fixed. Fire up your terminal, type
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #111111; background-color: #fffff8;">cd</span> /Library/Frameworks/Adobe<span style="color: #303030;">\ </span>AIR.framework/Version/Current/Resources/
sudo ln -s WebKit.dylib Webkit.dylib
</pre>
</div>

<p>
Then enter your password and your AIR applications should work again.
</p>

<p>
Dear Adobe, is it too much to ask to pretty please make your software work on a case sensitive file system? Spelling is primary school stuff. It is really not that hard!
</p>
]]></description>
  <link>http://bastibe.de/2011-09-03-adobe-air-application-crashes.html</link>
  <pubDate>Sat, 03 Sep 2011 13:08:00 +0200</pubDate>
</item>
<item>
  <title>Compiling Scipy and Matplotlib using pip on Lion</title>
  <description><![CDATA[<p>
So I upgraded to Lion. Predictably, some things went wrong. This time, the main thing that bit me was that for some reason, <code>pip</code> stopped working. After a bit of messing around with <code>brew</code>, <code>pip</code> and <code>easy_install</code>, I found out it was almost entirely my own fault. I messed up my <code>PATH</code>.
</p>

<p>
In the meantime, I had uninstalled all of <code>brew</code>'s Python, so I had to reinstall. For me, that entails Python, Numpy, Scipy and Matplotlib. Only this time, Scipy would not build. Some obscure error in some <code>veclib_cabi_c.c</code> would report errors. A quick <a href="http://mail.scipy.org/pipermail/scipy-user/2009-June/021383.html">round of googling</a> reveals:
</p>

<p>
In order to get Scipy to compile, you need to insert <code>#include &lt;complex.h&gt;</code> in
</p>

<div class="org-src-container">

<pre class="src src-sh">./scipy/lib/blas/fblaswrap_veclib_c.c.src
./scipy/linalg/src/fblaswrap_veclib_c.c
./scipy/sparse/linalg/eigen/arpack/ARPACK/FWRAPPERS/veclib_cabi_c.c
</pre>
</div>

<p>
That done, Scipy compiles perfectly fine.
</p>

<p>
But, that is not enough yet. As <a href="http://jholewinski.wordpress.com/2011/07/21/installing-matplotlib-on-os-x-10-7-with-homebrew/">this blogpost</a> outlines, Matplotlib is not currently compatible with <code>libpng</code> 1.5, which ships with Lion. Fortunately, this is already fixed in the most recent source on the Matplotlib repo, so you just have to checkout that:
</p>

<div class="org-src-container">

<pre class="src src-sh">pip install -e git+https://github.com/matplotlib/matplotlib.git#<span style="color: #111111;">egg</span>=matplotlib
</pre>
</div>

<p>
By doing that, Matplotlib should install just fine.
</p>

<p>
Seriously though, these PyPi repos are in a very sorry state. Every time I install one of these packages, I have to jump through hoops and spend hours debugging packages that really should work right out of the box. After all, <code>brew</code>, <code>rvm</code> and <code>gem</code> can do it just fine. Why is <code>pip</code> such a horrible mess?
</p>
]]></description>
  <link>http://bastibe.de/2011-08-01-compiling-scipy-and-matplotlib-using-pip-on-lion.html</link>
  <pubDate>Mon, 01 Aug 2011 12:40:00 +0200</pubDate>
</item>
<item>
  <title>Installing Pygame using Homebrew</title>
  <description><![CDATA[<p>
So I want to do audio development on the Mac without using Matlab. An alternative to Matlab is Python, or rather, <a href="http://www.daskrachen.com/2011/02/installing-pythonnumpyscipymatplotlib.html">Numpy, Scipy and Matplotlib</a>. They are awesome for working with audio data. What they don't do however is playing back audio. There are several packages out there that would afford audio playback. If you are serious about this though, you not only want audio playback, you want asynchronous audio playback. That is, you want to send some audio data to the sound card and continue with your program without waiting for the audio to finish playing. This allows continuous audio playback of computer-generated sound.
</p>

<p>
<a href="http://www.pygame.org/news.html">Pygame</a> is one package that allows this. (I will submit a patch to <a href="http://people.csail.mit.edu/hubert/pyaudio/">Pyaudio</a> soon that will enable it there, too). There are pre-built binaries on the Pygame website that you can install easily. But then there would be no easy way to uninstall them, so what I would rather want is to install Pygame using package managers that allow easy updating and uninstallation. My tool of choice on the Mac is of course <a href="https://github.com/mxcl/homebrew/">Homebrew</a>.
</p>

<p>
Note that although I am mostly interested in audio playback, this post will detail the installation of all modules of Pygame, not just <code>pygame.mixer</code>.
</p>

<p>
Homebrew won't install Pygame, but it will install all the prerequisites for Pygame. So, let's do that.
</p>

<div class="org-src-container">

<pre class="src src-sh">brew install sdl, sdl_mixer, sdl_ttf, libpng, jpeg, sdl_image, portmidi
</pre>
</div>

<p>
This will install most packages for you. Note that <code>libpng</code> is also available as a system library, so it is installed <code>keg_only</code>, that is, without linking it in your path. We will need to compile against it though, so the next step is
</p>

<div class="org-src-container">

<pre class="src src-sh">brew link libpng
</pre>
</div>

<p>
Now there is still one package missing, <code>smpeg</code>. Sadly, <code>smpeg</code> does not install its headers, so you can't compile against it. To fix that, type
</p>

<div class="org-src-container">

<pre class="src src-sh">brew edit smpeg
</pre>
</div>

<p>
and add the following line just above the two end at the end of the file
</p>

<div class="org-src-container">

<pre class="src src-sh">include.install Dir[<span style="color: #303030;">"*.h"</span>]
</pre>
</div>

<p>
Then save the file. (I submitted a bug to have this fixed, so you might not need to do this when you read this). Now you can install <code>smpeg</code> with the usual
</p>

<div class="org-src-container">

<pre class="src src-sh">brew install smpeg
</pre>
</div>

<p>
and you will get the headers, too. Isn't Homebrew great?
</p>

<p>
Now that all the prerequisites are met, lets look at Pygame itself. This is rather more difficult, as it will not build properly against Homebrew libraries on its own. First, download the source package of Pygame from the [official website](<a href="http://www.pygame.org/download.shtml">http://www.pygame.org/download.shtml</a>). Unpack it to some directory.
</p>

<p>
Now open a terminal and navigate to that directory. Me, I like [iTerm](<a href="http://iterm.sourceforge.net/">http://iterm.sourceforge.net/</a>), but Terminal.app will do just fine, too. In there, run <code>python config.py</code> to create an initial setup file.
</p>

<p>
At this point, the setup file is mostly useless since <code>config.py</code> failed to find any homebrew-installed library. It is also strangely garbled, so there is some manual labor to do. Open the file <code>Setup</code> (no extension) in your favourite text editor. After the first comment block, you will see a line that looks like this
</p>

<div class="org-src-container">

<pre class="src src-sh">SDL = -I/NEED_INC_PATH_FIX -L/NEED_LIB_PATH_FIX -lSDL
</pre>
</div>

<p>
Obviously, this is lacking the paths to the SDL library. If you installed Homebrew to its default directory, this will be in <code>/usr/local…</code>. Hence, change this line to
</p>

<div class="org-src-container">

<pre class="src src-sh">SDL = -I/usr/local/include/SDL -L/usr/local/lib -lSDL
</pre>
</div>

<p>
The next lines are strangely garbled. They say, for example
</p>

<div class="org-src-container">

<pre class="src src-sh">FONT = -lS -lD -lL -l_ -lt -lt -lf
</pre>
</div>

<p>
Where they actually should say
</p>

<div class="org-src-container">

<pre class="src src-sh">FONT = -lSDL_ttf
</pre>
</div>

<p>
Instead of having one <code>-l</code> and then the library name <code>SDL_ttf</code>, they put <code>-l</code> in front of every single letter of the name. This is strange, and certainly wrong. So, correct it for <code>FONT</code>, <code>IMAGE</code>, <code>MIXER</code> and <code>SMPEG</code>.
</p>

<p>
Note that I did not tell you to do this for <code>PORTTIME</code>, too. Actually, <code>PORTTIME</code> is already correctly linked in <code>PORTMIDI</code>, so you don't need that at all any more. Just delete or comment the <code>PORTTIME</code> line.
</p>

<p>
Now that all the dependencies are corrected, lets enable the features. A few lines further down, there will be a block of lines, where most lines begin with a <code>#</code> except for the ones beginning with <code>_numericsurfarray…</code> and <code>_camera…</code>, These are the different features of Pygame: The ones with the <code>#</code> are disabled, the other two are enabled.
</p>

<p>
With all the stuff we installed earlier, you can now enable all features (remove the <code>#</code> in front of <code>imageext…</code>, <code>font…</code>, <code>mixer…</code>, <code>mixer_music…</code>, <code>_minericsndarray…</code>, <code>movie…</code>, <code>scrap…</code> and <code>pypm…</code>).
</p>

<p>
Remember we disabled <code>PORTTIME</code> a while ago? Right, so we have to remove that dependency: In the line starting with <code>pypm…</code>, delete the part that says <code>$(PORTTIME)</code>. Great. That was easy, right? Now save that file and go back to the Terminal.
</p>

<p>
We are now going to compile and install Pygame. The nice thing is, even though we are installing it manually, it will go in the right directories and it will be registered with <code>pip</code> or <code>easy_install</code>, so you can just invoke them if you want to uninstall it later by typing <code>pip uninstall pygame</code>. This is something I love about Python!
</p>

<p>
Alright, now without further ado, install Pygame by typing
</p>

<div class="org-src-container">

<pre class="src src-sh">python setup.py install
</pre>
</div>

<p>
Great! That's it! Everything should work now!
</p>
]]></description>
  <link>http://bastibe.de/2011-03-04-installing-pygame-using-homebrew.html</link>
  <pubDate>Fri, 04 Mar 2011 14:16:00 +0100</pubDate>
</item>
<item>
  <title>Installing Python/Numpy/Scipy/Matplotlib on OSX</title>
  <description><![CDATA[<p>
For numerical analysis and signal processing prototyping, you would use <a href="http://www.mathworks.com/products/matlab/">Matlab</a>. However, Matlab has some downsides that might make it unsuitable for your project. It might be too expensive. You might be a snobbish programmer that can't stand less-than-elegant programming languages. I certainly am.
</p>

<p>
So, you look for alternatives. You could take <a href="http://www.gnu.org/software/octave/">Octave</a>, which is free, but that would not solve that ugly-code issue. You could take any scripting language you fancy, but Ruby, Perl and Python are too slow to do serious number crunching.
</p>

<p>
Then, you stumble upon that Python package called <a href="http://numpy.scipy.org/">Numpy</a>, which seems to be nearly as fast as Matlab when it comes to matrix processing and linear algebra. You then discover <a href="http://www.scipy.org/">SciPy</a>, which would add all that signal processing prowess of Matlab (do quick transformations, random numbers, statistics) to your toolbox. Last but not least, you need plotting. That would be <a href="http://matplotlib.sourceforge.net/">Matplotlib</a> then, which provides quick plotting facilities in Python.
</p>

<p>
And the best thing is, these three systems work really well together. They seem to be the perfect replacement for Matlab that could even be superiour to it in many regards.
</p>

<p>
Next up, you need to install all that stuff. If you are like me, you naturally want to do all that on a Mac. Also, you kind of dislike all these installer-thingies, which install stuff to unknown places and are nigh impossible to uninstall or update cleanly. Even though, you could of course just go to the individual websites, download Python, Numpy, SciPy and Matplotlib, run them installers, and be done. You would save yourself a lot of trouble that way.
</p>

<p>
But since you allegedly are like me, you instead fire up <a href="http://mxcl.github.com/homebrew"><code>brew</code></a> and try to install all that stuff using that. Again, you could use <a href="http://www.macports.org/">MacPorts</a> or <a href="http://www.finkproject.org/">Fink</a> instead, but you probably had some bad experiences with them and you generally love the hackishness of Homebrew, so this is your natural first try.
</p>

<p>
So you set about this, you believe in packet managers and trust them to take care of every obstacle that might be lying in your way. First of all, install the latest developer tools from <a href="http://developer.apple.com/">developer.apple.com</a>. You might need to register (for free) to get them. Also, you need to install <a href="http://mxcl.github.com/homebrew">Homebrew</a>.
</p>

<p>
To cut this short, here is what you need to get that Python running:
</p>

<div class="org-src-container">

<pre class="src src-sh">brew install python
</pre>
</div>

<p>
This one should be obvious. At the time of writing, it will install Python 2.7.1. You could take Python 3, but matplotlib is not compatible to it, so you kind of have to stick with 2.7.1 instead.
</p>

<p>
You also need to put <code>/usr/local/bin</code> and <code>/usr/local/sbin</code> in the beginning of your path to make sure the new Python gets loaded instead of the pre-installed one. You do that by writing
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #111111; background-color: #fffff8;">export</span> <span style="color: #111111;">PATH</span>=/usr/local/bin:/usr/local/sbin:$<span style="color: #111111;">PATH</span>
</pre>
</div>

<p>
in your <code>\~/.bash_profile</code>. (Create it if its not there&#x2013;it is just a simple text file).
</p>

<p>
Now, if you type <code>python --version</code>, you should get <code>Python 2.7.1</code> as a response.
</p>

<p>
Alright, next up, install the python package manager:
</p>

<div class="org-src-container">

<pre class="src src-sh">brew install distribute
brew install pip
</pre>
</div>

<p>
This will come preconfigured for your newly installed Python. In an ideal world, this should be all. The world being as it is, the pip package of Matplotlib is severely broken and has one other unstated dependency:
</p>

<div class="org-src-container">

<pre class="src src-sh">brew install pkg-config
</pre>
</div>

<p>
Also, SciPy is using some FORTRAN sources, so you need a fortran compiler:
</p>

<div class="org-src-container">

<pre class="src src-sh">brew install gfortran
</pre>
</div>

<p>
Alright. That was enough. Now on to pip. With all these dependencies cleared, pip should be able to download Numpy and Scipy without trouble:
</p>

<div class="org-src-container">

<pre class="src src-sh">pip install numpy
pip install scipy
</pre>
</div>

<p>
Matplotlib, on the other hand, is more difficult to install. You see, pip is looking at the Python package repository <a href="http://pypi.python.org/">PyPi</a> for each package. PyPi then provides a URL. Pip then scans that website for links to suitable package files. But, <a href="http://sourceforge.net/">Sourceforge</a> changed its links a while ago, so pip gets confused and will download an outdated version. Sourceforge says, its new links are way better and no way we will change them back; Pip says, well, if Sourceforge can't provide proper links, that's not our problem. Oh My. Silly children.
</p>

<p>
So we have to do this manually:
</p>

<div class="org-src-container">

<pre class="src src-sh">pip install -f http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-1.0.1/matplotlib-1.0.1.tar.gz matplotlib
</pre>
</div>

<p>
That URL comes straight from Sourceforge. Look for the latest version of Matplotlib, search for the download link to the source distribution (<code>*.tar.gz</code>), copy that link and strip any trailing '/download'.
</p>

<p>
UPDATE:
</p>

<p>
It seems the matplotlib package was updated in the meantime, so you can just run <code>pip install matplotlib</code> now.
</p>

<p>
This should now download and install matplotlib.
</p>

<p>
Thank you for reading.
</p>
]]></description>
  <link>http://bastibe.de/2011-02-03-installing-python-slash-numpy-slash-scipy-slash-matplotlib-on-osx.html</link>
  <pubDate>Thu, 03 Feb 2011 16:23:00 +0100</pubDate>
</item>
<item>
  <title>The strangeness of widescreen displays in modern operating systems</title>
  <description><![CDATA[<p>
So today, pretty much everyone has widescreen displays. That is, displays that are far more wide than high. This was not always so. In ye olden days, computers were mainly used for displaying text, hence displays tended to have a similar layout as books or magazines. Today, they are more like movies (which might be worrying in itself).
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2010-03/aspect_ratios.png" alt="aspect_ratios.png" />
</p>
</div>

<p>
So todays displays are widescreen. To do all that modern stuff, like watch (widesreened) videos or multitask (display two windows side by side). However, this also means that vertical pixels are something of a scarcity. Especially on those small Laptop screens. In fact, the first Netbook screens were so tiny that many of Windows' own windows could not be used at all since the lower parts did not fit on the screen. Raise your hand if Word 2007 leaves barely ten lines of visible text between all its blue-tinted UI-splendour on your laptop screen.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2010-03/word_small.png" alt="word_small.png" />
</p>
</div>

<p>
This gets most straining when reading text. On the internet for example. There is practically no website at all that can be displayed in its entirity even on one of those full HD displays. Print-formatted documents are a similar matter. Actually, I find myself craving for pixels regularly. I even disable the bookmark bar in my browser to free those extra two lines of text. And I memorize keyboard shortcuts so I can hide toolbars. And I use Google Chrome instead of Firefox/Safari/Internet Explorer, not least of all since it has the smallest title bar and no bottom bar.
</p>

<p>
Why, then, do modern operating systems still waste so much vertical space with that Dock/Taskbar? This is something I really don't get. Vertical space is such a scarcity, yet virtually every operating system choses to waste at least three lines of text with something that could easily go on the side of the display. Well, at least on Windows 7 and OSX that is something you can easily change.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2010-03/dock_small.png" alt="dock_small.png" />
</p>
</div>

<p>
So if you are like me and appreciate every added line of text, do yourself a favour and put your Dock/Taskbar on the side. Really, this should be the default.
</p>
]]></description>
  <link>http://bastibe.de/2010-07-03-strangeness-of-widescreen-displays-in-modern-operating-systems.html</link>
  <pubDate>Sat, 03 Jul 2010 12:08:00 +0200</pubDate>
</item>
<item>
  <title>Gedanken zu User Interfaces</title>
  <description><![CDATA[<p>
Jeder kennt dieses Fenster:
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2009-04/delete_file.png" alt="delete_file.png" />
</p>
</div>

<p>
Dieses Fenster ist eine ziemlich schlechte Idee, denn jeder geübte Benutzer hat irgendwann gelernt, dass die Aktion "Dateien Löschen" aus drei Gesten besteht: (1) Dateien auswählen, (2) Die Löschaktion einleiten, (3) Den Löschdialog bestätigen. Leider hat man schon vor mehr als zwanzig Jahren nachgewiesen, dass solche zusammengehörigen Gesten von den Benutzern als einzelne "Datei-Löschen" Geste abstrahiert werden. Man kennt das vom Tippen: Man tippt Worte nicht, indem man einzelne Buchstaben aneinander hängt, sondern man tippt Worte fast immer am Stück; Hat man erst einmal angefangen, ein falsches Wort zu tippen, kann man damit nicht aufhören, bis das gesamte Wort getippt ist. Auf ähnliche Weise ist es dem Benutzer auch nicht möglich, auf den Löschdialog sinnvoll zu reagieren, da das Bestätigen der Sicherheitsfrage vollkommen automatisiert ist und daher nicht einmal verhindert werden könnte, wenn man wollte.
Die Alternative ist ein alter Bekannter: Undo. Statt den Benutzer im Vorfeld zu fragen, ob er die Datei wirklich löschen möchte (was er durch Einleiten der Löschaktion bereits bejaht hat) gibt man ihm die Möglichkeit, die Aktion im Nachhinein wieder rückgängig zu machen. Das ist wesentlich effektiver und kommt ohne nerviger Dialogbox aus. Übrigens funktioniert Dateiaktion-Undo bereits heute in allen Betriebssystem außer Linux, jedoch ohne Menüicon und zumeist nur für die letzte Aktion. Wäre es nicht schön, wenn dies noch weiter ausgebaut würde?
</p>

<p>
Noch ein gefährlicher Dialog:
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2009-04/ja_nein_abbrechen.png" alt="ja_nein_abbrechen.png" />
</p>
</div>

<p>
Das ist ebenfalls ein alter Bekannter, der immer dann erscheint, wenn man ein Programm schließen will, welches noch ungesichte Änderungen enthält: Abgesehen von dem offensichtlichen Problem, dass "Abbrechen" keinen wirklichen Sinn ergibt (Was abbrechen? Das Programm?) erfordert diese Frage jedes Mal das komplette Lesen der Meldung, bis man entschlüsseln kann, was "Ja" und "Nein" in diesem Kontext bedeuten. Um das noch einmal zu verdeutlichen, hier ein besonders schlimmes Beispiel:
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2009-04/bad_gui.png" alt="bad_gui.png" />
</p>
</div>

<p>
Es leuchtet ein, dass hier ein eindeutigerer Dialog wesentlich sinnvoller wäre, bei dem sofort ersichtlich ist, was welcher Button tun wird: (Merke: Auf Buttons gehören immer Verben)
</p>

<p>
<img src="http://bastibe.de/static/2009-04/speichern_windows.png" alt="speichern_windows.png" />]]
<img src="http://bastibe.de/static/2009-04/speichern_mac.png" alt="speichern_mac.png" />
</p>

<p>
Aber warum eigentlich überhaupt speichern? Warum muss ich mich persönlich darum kümmern, meine Arbeit zu speichern? Ich dachte, ich würde mit einer Datei arbeiten &#x2013; aber wenn diese Datei nicht geändert wird, wenn ich nicht zuerst "Speichern" anklicke, habe ich wohl eigentlich doch nicht mit dieser Datei, sondern mit einer heimlichen Kopie gearbeitet. Wäre es nicht viel sinnvoller, immer automatisch zu speichern, und statt des "Speichern"-Buttons eine "auf Urzustand zurücksetzen"-Funktion bereitzustellen? Ich bin mir auf jeden Fall sicher, dass man den "Undo all changes"-Button wesentlich seltener bräuchte als den "Speichern"-Button, denn wenn der Benutzer nicht vorgehabt hätte, neuen Text in eine Datei zu schreiben, dann hätte er keinen neuen Text in die Datei geschrieben. Hat er dennoch "versehentlich" Text eingegeben, ist das ein klarer "Benutzerfehler", also der logische Einsatzzweck für Undo.
</p>

<p>
Das sind nur zwei Beispiele, wie man intelligente Undo-Mechanismen sinnvoll einsetzen könnte, um das Arbeiten am Computer angenehmer zu gestalten. Ich wünschte, mehr Leute würden sich mit diesen Dingen auseinander setzen&#x2026;
</p>
]]></description>
  <link>http://bastibe.de/2009-04-25-gedanken-zu-user-interfaces.html</link>
  <pubDate>Sat, 25 Apr 2009 14:15:00 +0200</pubDate>
</item>
<item>
  <title>Tagged File System</title>
  <description><![CDATA[<p>
Ein großes Problem bei der Benutzung von Computern ist, dass unerfahrene Benutzer oftmals kein Verständnis für Ordnerstrukturen haben. Das ist im Grunde auch klar, denn die Ordner-Metapher legt nahe, dass sich Ordner auf dem Computer wie echte Aktenordner verhalten, also dass jeder Ordner mehrere Dateien, jedoch nicht andere Ordner enthalten kann. Ganz im Gegenteil dazu basiert aber eine normale Verzeichnisstruktur meist aus vielen, tief ineinander geschachtelten Ordnern. Von einem Usablitity-Standpunkt aus ist daher der Begriff "Ordner" wahrscheinlich schlecht gewählt. Vielleicht würde es schon reichen, den älteren Namen "Verzeichnis" wieder einzuführen. (Dann bräuchten wir nur noch ein passendes Piktogramm für "Verzeichnis"&#x2026;)
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2009-04/standard_finder_small.png" alt="standard_finder_small.png" />
</p>
</div>

<p>
Es wäre daher wünschenswert, eine einfacher zu verstehende Alternative zu Ordnerhierarchien zu haben. Die gibt es auch schon, in Form der bekannten Verzeichnisse "Meine Bilder", "Meine Dokumente", etc.
Diese Ordner wollen den Benutzer mit einfachen Piktogrammen und klaren Namen dazu animieren, einen natürlichen Ort für seine Dateien zu wählen und so ein wenig Ordnung zu schaffen. Tatsächlich ist dieses Konzept einer Tag-Struktur schon relativ ähnlich, da auch hier nicht davon ausgegangen wird, dass sich der Benutzer selbst um eine tief geschachtelte Orderhierarchie kümmert, sondern nur wenige, einfach zu verstehende Markierungsmöglichkeiten ("Bilder", "Dokumente") geboten werden.
</p>

<p>
Ein echtes Tag-basiertes System könnte vollkommen ohne Verzeichnisse auskommen, wobei man dann eben beim Speichern einer Datei nicht mehr aus einer hierarchischen Liste von Ordnern den Speicherort auswählen würde, sondern von einer flachen Liste von Tags. Die Usability-Kosten davon wären vernachlässigbar.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2009-04/tagged_finder_small.png" alt="tagged_finder_small.png" />
</p>
</div>

<p>
Ähnlich würde das Finden von Dateien funktionieren: Statt eine hierarchische Liste von Ordnern nacheinander anzuklicken, würde man eine flache Liste von Tags nacheinander anklicken, jedoch mit dem Bonus, dass man die gesuchte Datei nicht erst bei Anklicken aller Tags, sondern mit großer Wahrscheinlichkeit schon nach ein oder zwei Tags gefunden hätte.
</p>

<p>
Ein Problem würde jedoch mit Projekten entstehen, die aus mehreren Dateien bestehen. Hier müsste man sicher stellen, dass sie im Dateisystem nur als einzelne große Projektdatei auftauchen und nicht jede einzelne Unterdatei gelistet wird. Das ließe sich zum Beispiel durch "Bundles" lösen, wie sie heute schon in OSX vorkommen (Ordner mit definierter Namesendung und Inhalt werden wie Dateien behandelt) oder einfach durch einen speziellen Tag, der die einzelnen Dateien vor der normalen Suche versteckt.
Dieses Konzept wird übrigens heute schon vielfach verwendet, so ist etwa eine aktuelle Word-Datei nur eine ZIP-Datei, die eine definierte Verzeichnisstruktur mit allen Bildern, dem Text (als XML), einer Vorschau-Grafik etc. enthält.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2009-04/bundles_small.png" alt="bundles_small.png" />
</p>
</div>

<p>
Ich glaube, dass man mit solch einem Tag-basierten Dateisystem deutlich einfacher arbeiten könnte als mit den heute üblichen Verzeichnisstrukturen. Tja, jetzt fehlt nur noch eine innovative Firma, die sich um die Umsetzung kümmert&#x2026;
</p>
]]></description>
  <link>http://bastibe.de/2009-04-19-tagged-file-system.html</link>
  <pubDate>Sun, 19 Apr 2009 09:41:00 +0200</pubDate>
</item>
<item>
  <title>Es geht um Tabs</title>
  <description><![CDATA[<p>
Tabs sind kaputt. Tabs waren noch nie eine gute Idee. Tabs werden dafür benutzt, um in einem Programm mehrere Fensterflächen voll Inhalt in nur einem Fenster darzustellen. Speziell zu diesem Zweck entwarf man in grauer Vorzeit eine neue Klasse von Programmen namens Fenstermanager. Fenstermanager erlauben es, mehrere Fenster gleichzeitig darzustellen, gerne auch nebeneinander, hintereinander oder übereinander. Kennt jeder. Und Tabs sind eine Krücke, die genau dieses Prinzip unterlaufen, denn sie organisieren Fenster ineinander.
</p>

<p>
Aber es ist ja nicht nur das. Wir kennen Tabs schon lange in ganz verschiedenen Formen:
</p>

<p>
<img src="http://bastibe.de/static/2009-03/tabs_firefox_preferences.png" alt="tabs_firefox_preferences.png" />
<img src="http://bastibe.de/static/2009-03/tabs_osx.png" alt="tabs_osx.png" />
<img src="http://bastibe.de/static/2009-03/tabs_windows.png" alt="tabs_windows.png" />
</p>

<p>
All diesen Formen gemein ist, dass sie wenigstens einen Rahmen bilden, der andeutet, welcher Teil des Fensters sich ändern wird, wenn man einen anderen Tab öffnet. Die Ausnahme: Browser.
</p>

<p>
<img src="http://bastibe.de/static/2009-03/tabs_ie8.png" alt="tabs_ie8.png" />
<img src="http://bastibe.de/static/2009-03/tabs_firefox.png" alt="tabs_firefox.png" />
</p>

<p>
Wo hat ein Browser seine Tabs? zwischen Adressleiste und Webseiteninhalt. Bei Firefox (besondere Perversion) sind die Tabs sogar so dargestellt, als würden sie nur die Adresszeile ändern (oben befestigte Reiter), ganz im Gegensatz dazu ändern sie aber sowohl die Adresszeile als auch -viel wichtiger- den Webseiteninhalt. Wenn überhaupt, dann sollten sich die Tabs also am oberen Bildschirmrand befinden, so dass man mit ihnen wenigstens konsistent den kompletten Fensterinhalt ändert. Immerhin hier sieht man bereits Licht: Google Chrome und Safari 4 funktionieren bereits so:
</p>

<p>
<img src="http://bastibe.de/static/2009-03/tabs_chrome.png" alt="tabs_chrome.png" />
<img src="http://bastibe.de/static/2009-03/tabs_safari_windows.png" alt="tabs_safari_windows.png" />
<img src="http://bastibe.de/static/2009-03/tabs_safari_osx.png" alt="tabs_safari_osx.png" />
</p>

<p>
Die Lösung von Safari hat noch ein paar Probleme: Wo verschiebt man Tabs? (Ungeschickt: an dem kleinen Handle am rechten Tabgreifer-Rand), Wieso haben die Tabs keine Favicons? Aber nicht verzagen: Noch ist Safari 4 lediglich eine Beta. Gut hingegen fände ich es, wenn dieses Tabbed-Fenster-Interface nicht nur für Safari, sondern für jedes andere Programm auch verwendbar wäre, also als Feature des Fenstermanagers implementiert würde. Man müsste daran noch ein wenig feilen, aber es würde Einiges sehr viel übersichtlicher gestalten. Snow Leopard anyone?
</p>

<p>
Weitere gute Ideen rund um Tabs, sortiert nach Browser:
</p>

<ul class="org-ul">
<li><p>
<a href="http://www.microsoft.com/windows/internet-explorer/default.aspx">Microsoft Internet Explorer 8</a>
</p>
<ul class="org-ul">
<li>Tabs werden nach Farben sortiert, je nach dem von welchem Tab aus sie geöffnet wurden</li>
<li>Im neuen Fenstermanager von Windows 7 werden alle Tabs als eigene Fenster aufgeführt</li>
<li>Jeder Tab läuft in seinem eigenen Prozess. Bringt aber nix, weil wenn einer abstürzt nimmt er trotzdem den ganzen Browser mit. Ist aber auch noch nur Beta!</li>
</ul>

<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/tabs_ie8_goodness_small.png" alt="tabs_ie8_goodness_small.png" />
</p>
</div></li>
<li><a href="http://www.mozilla-europe.org/de/firefox/">Firefox 3</a> Preview
<ul class="org-ul">
<li>Tabs sollen über ein neuartiges Interface beim Wechsel als Miniaturen dargestellt werden, so dass man einfacher zwischen ihnen wechseln kann</li>
<li>Viele andere nette Vorschläge rund um diese Idee gibts hier: <a href="http://www.azarask.in/blog/post/new-tab-iterations/">Aza Raskins Blog</a></li>
</ul></li>
<li><a href="http://www.apple.com/safari/">Safari 4</a>
<ul class="org-ul">
<li>Die Tableiste nimmt keinen eigenen Platz auf dem Bildschirm ein</li>
<li>Tabs sind am richtigen Ort (oben)</li>
</ul></li>
<li><p>
<a href="http://www.google.com/chrome">Google Chrome</a>
</p>
<ul class="org-ul">
<li>Tabs sind am richtigen Ort (oben) aber es gibt dennoch eine klassische Titelleiste des Fensters (im Gegensatz zu Safari 4)</li>
<li>Jeder Tab läuft in einem eigenen Prozess, daher können einzelne Tabs abstürzen ohne den Browser mitzunehmen.</li>
<li>Jeder Tab läuft in seiner eigenen Sandbox, was es Angreifern wesentlich erschwert, den Browser hochzunehmen.</li>
</ul>

<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/tabs_chrome_goodness.png" alt="tabs_chrome_goodness.png" />
</p>
</div></li>
</ul>

<p>
Fazit: Es gibt noch viel zu tun, aber anscheinend ergibt sich langsam aber sicher ein Konsens, dass etwas mit Tabs getan werden muss. Es bleibt spannend.
</p>
]]></description>
  <link>http://bastibe.de/2009-03-31-es-geht-um-tabs.html</link>
  <pubDate>Tue, 31 Mar 2009 20:09:00 +0200</pubDate>
</item>
<item>
  <title>Mirrors Edge</title>
  <description><![CDATA[
<div class="figure">
<p><img src="static/2009-03/mirrors_edge.png" alt="mirrors_edge.png" />
</p>
</div>

<p>
Ich habe am Wochenende, wie in Twitter schon verkündet, Mirror’s Edge (durch-) gespielt. Ganz kurz: Mirror’s Edge ist ein Videospiel für PC/XBOX360/PS3, im Endeffekt ein Platformer aus der Ego-Perspektive, zwar mit der Möglichkeit, Waffen aufzunehmen, aber mit dem klaren Fokus auf Rennen, genauer: Parkours, dem modernen Hindernislauf, hier mit dem Extratwist: auf Hochhausdächern.
</p>

<p>
Es wurde schon viel gesagt über dieses Spiel. Müde Story, schlechte Charactermodelle, schlechte Shooter-Elemente, unübersichtliche Atmosphäre, kurze Spieldauer, um nur einige der üblichen Kritikpunkte zu nennen.
</p>


<div class="figure">
<p><img src="static/2009-03/mirrors_edge_jump.png" alt="mirrors_edge_jump.png" />
</p>
</div>

<p>
Ich sage: Alles Popauswurf. Was Mirror’s Edge versucht, ist die Direktheit und Intimität der Egoperspektive mit dem Flow und der Geschwindigkeit eines modernen Platformers zu verbinden. Faith, der Hauptcharakter ist eine kleine “Eurasierin” (Zitat der Entwickler), deren Eltern in einem Widerstandskampf… Bla, bla, bla.
Es geht um Flow, es geht darum, mit blitzschnellen Reflexen und akrobatischem Geschick einen Weg über die Dächer einer Großstadt zu finden. Es geht darum, nicht stehen zu bleiben, nicht zu zögern. Es geht um Geschwindigkeit und Freiheit, über Straßenschluchten zu springen, zwischen Klimaanlagen und Baugerüsten zu sprinten und immer schneller, immer weiter, den Großstadtlärm hinter sich zu lassen. Nur begleitet von Faiths immer wieder ins Bild ragenden Armen und Beinen, ihrem schnellen Atem, dem Rhythmus ihrer Schritte. Und ja, man stirbt häufig, wenn man sich bei einem Sprung verschätzt oder es doch nicht schafft, den Jägern zu entkommen. Aber um so größer ist die Befriedigung einen komplizierten Run endlich zu schaffen und mit einem perfekten Sprung über eine Häuserschlucht die Polizei hinter sich zu lassen.
</p>

<p>
Mirror’s Edge perfektioniert den Flow, das Gefühl der Freiheit und der Geschwindigkeit. Klar, dass da die Ego-Shooter-Mechanik auf der Strecke bleibt, aber Faith ist auch keine Kämpferin, sondern selbsterklärter Runner. Sicher, die Story ist ein wenig lahm, aber wir reden hier über ein Computerspiel: Die Story hat allein das Ziel, die einzelnen Schauplätze miteinander zu verbinden, und das gelingt ihr. Charakterentwicklung kennt das Spiel nicht, allein der Spieler wird besser. Und auch das ist gut so, denn in den späteren Leveln ist der Schwierigkeitsgrad nicht von schlechten Eltern. Aber Checkpoints sind häufig und fair verteilt, so dass dies selten ein Problem wird.
</p>

<p>
Ach ja, und der Sound ist genial, selten habe ich mich so sehr in eine Spielfigur hineinversetzt gefühlt wie in Faith. Und die Grafik… Ich könnte hier viel schreiben; Ich glaube schlicht, dass die aktuelle Konsolengeneration im Grunde ein Niveau erreicht hat, auf dem weitere Verbesserungen keine große Rolle mehr spielen. Mirror’s Edge, mit seiner gleißend-Weiß-plus-Farbe Ästhetik zeigt hier eine Welt, wie man sie noch nie gesehen hat, in der Farbe nicht nur als Stilmittel, sondern auch als Wegweiser und tatsächlich Spielhilfe eingesetzt wird: Rot ist, wo es weiter geht. Diese Ästhetik ist schwer in Worte zu fassen und gibt dem Ganzen eine ganz eigene Freiheit, im starken Kontrast zum “realistisch”-Grau-Braun, dem sich so viele andere Spiele verschrieben haben.
</p>

<p>
Und was bleibt unterm Strich? Ich sage: Das Spiel ist es Wert. Es mag seine Mängel haben, aber allein der Mut, einmal etwas Neues zu machen und nicht dem Einheitsbrei ins Land der Realo-Shooter und der digitalen Nebenjobs zu folgen ist der Beachtung Wert. Einmal nicht schießen zu müssen und stumpfen Missionen zu folgen, sondern in einem Spiel Freiheit zu finden, dass ist eine außergewöhnliche Erfahrung. Wer als Spieler etwas Erfrischung sucht, sollte es probieren. Ich finds geil!
</p>


<div class="figure">
<p><img src="static/2009-03/mirrors_edge_faith.png" alt="mirrors_edge_faith.png" />
</p>
</div>
]]></description>
  <link>http://bastibe.de/2009-03-29-mirrors-edge.html</link>
  <pubDate>Sun, 29 Mar 2009 22:22:00 +0200</pubDate>
</item>
<item>
  <title>Synchronisieren von Google, Äpfeln, Fenstern und Telefonen</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/cloud.jpg" alt="cloud.jpg" />
</p>
</div>

<p>
Ich hatte lange Zeit zwei Computer, einen Desktop und einen Laptop, jeweils mit verschiedenen Betriebssystemen und Datensätzen. Um dennoch immer mit den selben Daten arbeiten zu können, verwendete ich eine externe Festplatte. Obwohl sehr low-tech, funktionierte diese Lösung absolut tadellos: Meine Linux-Kisten mounteten die Festplatte automatisch in ihr jeweiliges home-Verzeichnis und so konnte ich auf verschiedenen Computern arbeiten, ohne mich um die Synchronizität der Daten kümmern zu müssen.
</p>

<p>
Fast-forward ein Jahr, tausche Linux gegen Apple und finde es jetzt doch sehr anstrengend, immer eine externe Festplatte mit mir herumzuschleppen &#x2013; Apple-Snob, der ich bin. Sieht auch unelegant aus, dieses schwarze Kästchen an den hübschen Laptop zu klemmen. Es muss also eine andere Lösung her, um immer auf beiden Rechnern mit aktuellen Dateien arbeiten zu können. Es bietet sich an: MobileMe (damals noch .Mac), genauer, die iDisk, also ein Stück online-Speicher bei Apple, auf dem man von mehreren (Apple-) Rechnern aus arbeiten kann. Das Angebot ist verlockend, aber leider erfüllt MobileMe meine Erwartungen nicht, es gehen Daten verloren und ich ärgere mich, jemals Geld für diesen Dreck ausgegeben zu haben.
</p>

<p>
Eine Alternative finde ich in Dropbox, welches die Vision des immer synchronen Datenspeichers "in the cloud" endlich erfüllt, wenn auch als Ordner und nicht als Laufwerk. Inzwischen erbringt auch Syncplicity diese Leistung, wenn auch mit einem eigenen Set an Einschränkungen (Es ist aber noch Beta, also kein Grund zur Sorge).
</p>

<p>
Dennoch: ganz zufrieden bin ich nicht, einfach, weil zwei Rechner immer eine gewisse Menge "mental overhead" bedeuten. Allein, nicht immer am selben Gerät zu sitzen stellt einfach eine Irritation dar, die im Grunde nicht nötig ist. Na gut, und dieses neue "Unibody"-MacBook Pro ist einfach sexy. Also, tausche iMac + MacBook gegen MacBook Pro. Das löst -logisch- auch alle Synchronizitätsprobleme.
</p>

<p>
Aber ich wäre nicht der Sohn meines Vaters, wenn ich nicht immer noch mehr technischen Schnickschnack haben müsste, enter: the iPhone. Dank Apple und iTunes ist es natürlich kein Problem, Kalender, Email, Kontakte und Musik immer synchronisiert zu halten; Kabel reinstecken, iTunes machen lassen und fertig.
Perfektioniert wird das alles aber erst durch Beihilfe von Google, welches durch ActiveSync (sprich: Exchange) nun auch alle meine Kontakte, Kalendereinträge, Emails und Dokumente auf allen Geräten zur Verfügung stellt. Dieses Setup ist nun endlich wirklich extrem zufriedenstellend. Es ist zwar ein Haufen Kleinkram, den man durcharbeiten muss, bis man das alles richtig konfiguriert hat, aber hat man das einmal getan funktioniert es wirklich tadellos! Und Syncplicity und Dropbox laufen auf dem Rechner einfach nur noch als Backup weiter.
</p>
]]></description>
  <link>http://bastibe.de/2009-03-28-synchronisieren-von-google.html</link>
  <pubDate>Sat, 28 Mar 2009 17:18:00 +0100</pubDate>
</item>
<item>
  <title>E Text Editor goes Open Source</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/e_text_editor.png" alt="e_text_editor.png" />
</p>
</div>

<p>
Als ich heute von der FH nach Hause kam, lag <a href="http://e-texteditor.com/blog/2009/opencompany">das hier</a> in meinem Newsreader und ich war, in Ermangelung eines besseren Wortes, geschockt.
</p>

<p>
Nur, um es noch einmal zu wiederholen: E, der meiner Meinung nach beste Texteditor der Welt wird Open Source. Das kann man nicht oft genug sagen.
</p>

<p>
Warum ist E so fantastisch?
<a href="http://www.e-texteditor.com/">E</a> ist ein recht neuer, kleiner <a href="http://de.wikipedia.org/wiki/Texteditor">Texteditor</a> für Windows. Nein, um ihm Genüge zu tun, muss man E in einem Satz mit <a href="http://de.wikipedia.org/wiki/Emacs">Emacs</a>, <a href="http://de.wikipedia.org/wiki/Vim">Vim</a> und <a href="http://macromates.com/">Textmate</a> nennen, denn wie diese Drei Großen Texteditoren sind auch E keine Grenzen gesetzt, da all seine Funktionalität durch kleine, einfache Skripte entsteht, die von jedem Nutzer beliebig verbessert werden können. Genauer gesagt: E tritt in die direkten Fußstapfen von Textmate, einem Editor für den Mac und ist vollkommen kompatibel mit dessen Erweiterungen, so dass E schon bei seiner Markteinführung auf eine riesige Masse von <a href="http://svn.textmate.org/trunk/Bundles/">Sprachen, Snippets und Programmen</a> zurückgreifen konnte, mit der sich jede noch so obskure Textmanipulation bewältigen lässt. Anders als Emacs oder Vim folgt E dabei aber modernen Bedienungs- und Designrichtlinien und fühlt sich genauso flüssig und heimisch an, wie das für eine Windows-Anwendung nur möglich ist.
Seine zweite große, und kaum weniger berauschende Stärke ist sein <a href="http://e-texteditor.com/blog/2006/making-undo-usable">History-System</a>. Jeder Benutzer eines Texteditors kennt die Undo-Taste (<a href="http://stackoverflow.com/questions/247568/how-can-i-undo-more-than-a-single-character-in-textmate/248255">mit Ausnahme von Textmate</a>. <a href="http://nslog.com/2006/11/08/textmates_undo">What a shame</a>.). Undo macht die zuletzt gemachte Änderung rückgängig und ist damit der beste Freund von notirisch fehleranfälligen Menschen. E bringt Undo auf das nächste Level: Denn neben dem normalen Undo-Befehl gibt es noch eine komplette Übersicht aller jemals an einem Dokument gemachten Änderungen, komplett mit verschiedenen Pfaden, die zu verschiedenen Zeiten genommen wurden kompakt und übersichtlich verpackt in einem fantastischen Baumdiagramm.
Dazu kommen ein riesiger Haufen Features, die eigentlich jedes Programm haben sollte, welche man aber nur viel zu selten findet:
</p>

<ul class="org-ul">
<li>Inkrementielle Suche mit sofortiger Ergebnisvorschau und Unterstützung von Regulären Ausdrücken!</li>
<li>Direkte Unterstützung von Cygwin für alle möglichen Skriptsprachen!</li>
<li>Syntax-Highlighting für so ziemlich jede denkbare Sprache!</li>
<li>Unterstützung für Snippets!</li>
<li>Multiline-Editing!</li>
<li>Kontinuierliche Weiterentwicklung des Editors!</li>
<li>&#x2026;</li>
</ul>

<p>
Wer mehr wissen will, der surfe nach <a href="http://e-texteditor.com/index.html">e-texteditor.com</a> und schaue sich dort den Screencast und den Blog an, lade sich die Demo herunter oder suche im Internet nach Reviews zu E.
</p>

<p>
Selbst ich, als eingefleischter Textmate-Benutzer halte E als meinen heimlichen Lieblingseditor, denn schließlich kann er alles, was Textmate kann (und das ist schon enorm gut) und dazu noch eine gute Latte mehr. Wer, wie ich, eigentlich seinen Tag nur mit (a) surfen und (b) tippen verbringt, sollte wirklich darüber nachdenken, ein wenig Geld für einen guten Texteditor auszugeben. Es lohnt sich, und E ist ohne Frage einer der Besten. Und jetzt wird er Open Source. Ich bin begeistert!
</p>
]]></description>
  <link>http://bastibe.de/2009-03-24-e-text-editor-goes-open-source.html</link>
  <pubDate>Tue, 24 Mar 2009 15:16:00 +0100</pubDate>
</item>
<item>
  <title>Western Digital Festplatten-Umtausch mit Überraschungen</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/festplatte.jpg" alt="festplatte.jpg" />
</p>
</div>

<p>
Ich hatte mir vor einer Weile eine externe Festplatte nur für TimeMachine gekauft. Denn TimeMachine ist super, die einzige Backup-Lösung die ganz bewusst nie in Erscheinung tritt es sei denn man braucht sie. TimeMachine läuft leise und unbeachtet im Hintergrund, und gibt mir dieses flauschige Gefühl von Sicherheit, quasi das unsicht- und spürbare Kondom der Computerwelt (bzw. Apple-Welt).
</p>

<p>
&#x2026;Bis ich einmal den fatalen Fehler beging, meine externe Festplatte HOCHZUHEBEN. Nicht ruckartig, nicht gewaltsam, sondern tatsächlich sehr sanft, aber wohl gerade zu einem ungünstigen Zeitpunkt, denn die Festplatte gab ein leises Klick von sich und hörte auf zu funktionieren.
</p>

<p>
Es handelt sich hierbei um eine externe Festplatte der Marke Western Digital MyBook mit 500 Gigabytes, gekauft bei Norskit. Ein Anruf beim Verkäufer ergab, dass dies eine alte Bestellung (weltbewegende 9 Monate) sei und ich daher bei einer anderen Nummer anrufen sollte. Eine sehr freundliche Mitarbeiterin teilte mir dort mit, dass die Firma leider Insolvent sei und ich meine Supportanfrage daher an den Hersteller richten sollte. Und was soll ich sagen? EIN GLÜCK, dass sie das sagte!
</p>

<p>
Denn auf der Webseite von Western Digital gibt es nicht nur eine Support-Telefonnummer, sondern gleich ein komplettes austausch-Programm für Festplatten, welches vollkommen automatisiert abläuft: Man gibt die Modellnummer seiner Festplatte und -für Notfälle- seine Email-Adresse an und bekommt sofort eine neue Festplatte zugeschickt, mit der einzigen Auflage, die alte, defekte Platte innerhalb von 30 Tagen einzuschicken. Und tatsächlich wurde die neue Platte prompt am nächsten Tag verschickt und kam heute pünktlich per UPS bei mir an.
</p>

<p>
Faszinierend, so wünsche ich mir Kundenservice. Der einzige Wermutstropfen ist, dass Western Digital offenbar nicht sehr überzeugt von der Ausfallsicherheit seiner Festplatten ist, wenn sie so viel Infrastruktur für den einfachen Austausch bereitstellen&#x2026; Na egal, ich will mal nicht meckern ;-)
</p>

<p>
<b>Nachschlag:</b> Es stellt sich heraus, die neue Festplatte unterscheidet sich ein wenig von der alten: Sie ist silber statt schwarz und hat zwei Firewire 800 Anschlüsse anstatt Firewire 400 &#x2013; ein Glück, dass auch Kabel mitgeliefert wurden, sonst könnte ich sie jetzt nicht anschließen!
</p>
]]></description>
  <link>http://bastibe.de/2009-03-19-western-digital-festplatten-umtausch-mit-uberraschungen.html</link>
  <pubDate>Thu, 19 Mar 2009 21:17:00 +0100</pubDate>
</item>
<item>
  <title>Debugging und GCC auf Windows</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/code.png" alt="code.png" />
</p>
</div>

<p>
So, jetzt habe ich mein Mex-File zum Einlesen beliebiger Audiodateien endlich lauffähig auf Windows und Mac. Leider werde ich nicht dafür bezahlt, auch noch eine Linux-Version zu bauen, aber falls Interesse besteht, versuche ich mich vielleicht einmal daran.
</p>

<p>
<a href="http://en.wikipedia.org/wiki/State_of_the_Union">The State of The Union</a>: Kleine Dateien einlesen, kein Problem. Exotische Formate einlesen, kein Problem. Metadaten auslesen, kein Problem. Dateigröße, Bitrate und Samplerate auslesen, ein kleines Problem, da diese Parameter bei komprimierten Formaten nicht unbedingt fest stehen. Große Dateien einlösen, auf dem Mac kein Problem, auf Windows… nun ja, es dauert. Eine WAV-Datei von 5:30 min einzulesen, dauert mit Windows momentan ca. eine Stunde. Das kann nicht sein, in der Zeit habe ich die Datei dem Programm vorgelesen, wenn es sein muss.
</p>

<p>
Also, was ist da faul? Jetzt heißt es debuggen: <a href="http://de.wikipedia.org/wiki/GNU_Debugger">GDB</a> ist mein Freund, aber leider spreche ich seine Sprache nicht, also Oldschool-Debugging mit <a href="http://www.cplusplus.com/reference/clibrary/cstdio/printf.html">printf()</a> (bzw. <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mexprintf.html">mexPrintf()</a>; Aber da `#define printf mexPrintf` ist das das selbe). Blöd nur, dass Matlab selbst entscheidet, wann es meine Printfs auf den Bildschirm schreibt und es sich dazu entschlossen hat, dies immer erst nach dem Ausführen der Datei, also erst nachdem es bereits eine Stunde gearbeitet hat, zu tun. Einiges Hirnen später konnte ich Matlab endlich über eine Kombination aus <a href="http://de.wikipedia.org/wiki/Typumwandlung">Typecasts</a>, <a href="http://www.cplusplus.com/reference/clibrary/cstdio/sprintf.html">sprintf</a> und <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mexwarnmsgtxt.html">mexWarnMsgTxt</a> dazu überreden, wenigstens sporadisch ein paar Informationen herauszugeben.
</p>

<p>
Das Ergebnis:
</p>

<ol class="org-ol">
<li>Die Datei funktioniert tadellos, ist nur ein wenig langsam (s.o.)</li>
<li>Wer ist schuld? <a href="http://www.cplusplus.com/reference/clibrary/cstdlib/realloc.html">Realloc</a> ist schuld!</li>
</ol>

<p>
Das kam überraschend! Offenbar ist realloc auf dem Mac um mehrere Größenordnungen performanter als auf <a href="http://www.mingw.org/">MinGW</a>/Windows, denn die selbe Anwendung, die auf dem Mac ca. eine Sekunde braucht, braucht auf Windows eine Stunde! Und das allein wegen realloc! (Eigentlich: eine halbe Stunde wegen realloc, der Rest ist der Tatsache geschuldet, dass Windows in einer <a href="http://www.vmware.com/de/products/fusion/">VM</a> läuft)
</p>

<p>
Bei WAV-Dateien werden immer 2048 Samples an einem Stück ausgelesen. Danach verwende ich ein realloc, um meinen haupt-Speicherpuffer um diese Größe zu vergrößern und kopiere die neuen Daten dort hinein. Bei meinen 5:30 min macht das bei einer Samplerate von 44100 kHz und zwei Kanälen ca. 15000 Aufrufe von realloc. Komprimierte Datenformate haben üblicherweise kleinere Frames und damit noch einmal wesentlich mehr realloc-Aufrufe.
Der Plan ist also, jetzt statt häufiger, kleiner realloc-Aufrufe, seltenere, größere Aufrufe zu machen. Zeit für ein paar Experimente:
</p>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-right" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">realloc()-Größe</td>
<td class="org-right">realloc()-Aufrufe</td>
<td class="org-left">benötigte   Zeit</td>
</tr>

<tr>
<td class="org-left">2<sup>11</sup> =    2048</td>
<td class="org-right">15000</td>
<td class="org-left">~1 h</td>
</tr>

<tr>
<td class="org-left">2<sup>16</sup> =   65536</td>
<td class="org-right">470</td>
<td class="org-left">~2 min</td>
</tr>

<tr>
<td class="org-left">2<sup>17</sup> =  131072</td>
<td class="org-right">240</td>
<td class="org-left">~1 min</td>
</tr>

<tr>
<td class="org-left">2<sup>18</sup> =  262144</td>
<td class="org-right">120</td>
<td class="org-left">30 s</td>
</tr>

<tr>
<td class="org-left">2<sup>19</sup> =  524288</td>
<td class="org-right">60</td>
<td class="org-left">18 s</td>
</tr>

<tr>
<td class="org-left">2<sup>20</sup> = 1048576</td>
<td class="org-right">30</td>
<td class="org-left">10.5 s</td>
</tr>

<tr>
<td class="org-left">2<sup>21</sup> = 2097152</td>
<td class="org-right">15</td>
<td class="org-left">7.3 s</td>
</tr>

<tr>
<td class="org-left">2<sup>22</sup> = 4194304</td>
<td class="org-right">7</td>
<td class="org-left">5.1 s</td>
</tr>

<tr>
<td class="org-left">2<sup>23</sup> = 8388608</td>
<td class="org-right">3</td>
<td class="org-left">4.2 s</td>
</tr>
</tbody>
</table>

<p>
Das Spannende ist: Ich ändere durch meine Methodik praktisch nichts außer der Anzahl und Größe der realloc-Aufrufe, aber man erkennt einen eindeutigen Zusammenhang zwischen Performance und Anzahl der Aufrufe, ergo ist realloc der alleinige Schuldige für mein Performanceproblem auf Windows.
</p>

<p>
An dieser Stelle fiel mir ein, dass ich bereits an früherer Stelle einmal die gesamte Länge des Audio-Streams anhand der Metadaten geschätzt hatte. Durch eine somit vorgenommene Prä-Allokation des gesamten Speichers lässt sie die Laufzeit weiter auf 2.2 s drücken. Das ist immernoch nicht einmal halb so schnell wie auf OSX (0.9 s), aber das mag auch an der virtuellen Maschine liegen.
</p>

<p>
Mehr als diesen anecdotal Evidence kann ich nicht anbieten, aber ich bin mir sicher, dass ich ab jetzt die Finger von inkrementiellen Speichervergrößerungen auf MinGW/Windows lassen werde. Ist das in MSVC ähnlich schlimm, oder habe ich da etwa einen Bug entdeckt?
</p>
]]></description>
  <link>http://bastibe.de/2009-03-15-debugging-und-gcc-auf-windows.html</link>
  <pubDate>Sun, 15 Mar 2009 15:10:00 +0100</pubDate>
</item>
<item>
  <title>Get a Mac</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/osx.png" alt="osx.png" />
</p>
</div>

<p>
Bei meinem üblichen, Samstagmorgendlichen, bettlägrigen Web-Rundgang habe ich heute drei sehr nette Artikel von David Alison gefunden, einem Windows-Programmierer und selbsternanntem Microsoft-Fanboy, der sich einen Mac zulegt und unverhofft glücklich damit wird. So glücklich sogar, dass er inzwischen mehr oder weniger ein Mac-only-User geworden ist.
</p>

<p>
Ziemlich genau wie ihm ging es mir auch.
</p>

<ul class="org-ul">
<li>Teil 1: <a href="http://www.davidalison.com/2008/02/hardcore-windows-guy-switches-to-mac.html">A hardcore Windows guy gets a Mac</a></li>
<li>Teil 2: <a href="http://www.davidalison.com/2008/04/mac-after-two-months-of-mac-heres-why-i.html">After two months of Mac, here's why I switched</a></li>
<li>Teil 3: <a href="http://www.davidalison.com/2009/03/switching-from-windows-to-mac-one-year.html">Switching from Windows to Mac - One Year Later</a></li>
</ul>

<p>
Wens interessiert: Das ist eine sehr hübsche Einführung darin, warum Macs toll sind. Viel besser als alles, was ich dazu schreiben würde oder <a href="http://www.meinstudi.de/basti/?p=49">bereits</a> <a href="http://www.meinstudi.de/basti/?p=4">getan</a> <a href="http://www.meinstudi.de/basti/?p=24">habe</a>.
</p>
]]></description>
  <link>http://bastibe.de/2009-03-14-get-a-mac.html</link>
  <pubDate>Sat, 14 Mar 2009 10:24:00 +0100</pubDate>
</item>
<item>
  <title>Kompilieren auf Windows</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/open_source_rules.png" alt="open_source_rules.png" />
</p>
</div>

<p>
Seit einigen Wochen arbeite ich an einem kleinen Projekt: Eine Matlab-Funktion, die, ähnlich wie die standard-Funktion <a href="http://www.mathworks.com/access/helpdesk_r13/help/techdoc/ref/wavread.html">wavread()</a>, Audiodateien einlesen kann. Aber nicht irgendwelche Audiofiles, sondern ALLE MÖGLICHEN Audiofiles. Wie geht das? Jeder kennt <a href="http://www.videolan.org/vlc/">VLC</a>, den Video-Player, der so ziemlich jedes Video öffnen kann, das man ihm vorsetzt, selbst wenn man überhaupt keine Codecs installiert hat. VLC basiert auf <a href="http://de.wikipedia.org/wiki/FFmpeg">FFmpeg</a>, einem Open-Source Programm, welches Funktionen bereit stellt, um eben alle möglichen Mediendaten zu öffnen.
</p>

<p>
Und da FFmpeg freie Software ist, kann man sie auch für andere Dinge verwenden, etwa, um mit Matlab Audiodateien zu öffnen. Fehlt noch eine Verbindung zwischen Matlab und den FFmpeg-C-Bibliotheken, und die gibt es in Form von <a href="http://www.mathworks.com/support/tech-notes/1600/1605.html#intro">Mex</a>, der C-Schnittstelle von Matlab. Feine Sache, zwar hat es eine Weile gedauert, bis ich mich in libavformat und libavcodec eingearbeitet hatte (die beiden wichtigsten FFmpeg-Bibliotheken), aber im Endeffekt lief das alles sehr schmerzfrei &#x2013; und das, obwohl ich bisher Mex-Kompilieren mit Matlab immer als eine grausige Beschäftigung in Erinnerung hatte, gespickt von kryptischen Kompiler-Fehlern und hässlichen Notlösungen.
</p>

<p>
Bumms, Zack, kaum hatte ich mich versehen, hatte ich ein lauffähiges, tadellos funktionierendes <a href="http://en.wikipedia.org/wiki/MATLAB#Calling_C_and_Fortran_functions">Mex-File</a> auf meinem Mac liegen. Damit hatte ich nicht gerechnet. Also sofort die momentane Euphorie ausnutzen und weiter zu Schritt 2, das Ganze nochmal auf Windows. Meine Probleme, Windows so einzurichten, dass ich endlich Kompilieren kann, <a href="http://www.daskrachen.com/2009/03/great-scott.html">hatte ich ja schon berichtet</a>. Ich hatte also Visual Studio 2005 installiert, um Matlab zufrieden zu stellen und einen anständigen Kompiler auf dem System zu haben. Aber war ja klar, MSVC macht wieder sein eigenes Ding und nichts ist mit Standardkonformität und Trallalla: Keine <a href="http://de.wikipedia.org/wiki/C99#C99">C99</a>-Unterstützung, also keine Variablendeklarationen mitten im Code und keine stdint.h oder inttype.h. Ein Glück, es gibt wieder ein wenig mehr Free Software, die wenigstens <a href="http://code.google.com/p/msinttypes/">letztere Lücke schließt</a>. Dennoch; Ich bekomme mein mex-File nicht zum Laufen. Es ist wie verflucht, kaum setze ich mich an eine Windows-Maschine zum Programmieren, fällt meine Produktivität auf das Niveau eines Backsteins.
</p>

<p>
Enter <a href="http://sourceforge.net/projects/gnumex">gnumex</a>, noch ein weiteres Stück FOSS, das es ermöglicht, GCC als Mex-Kompiler zu verwenden, AUF WINDOWS. Um die Dinge zu vereinfachen, verwendete ich die <a href="http://www.mingw.org/">MinGW</a>-Variante und kaum war diese Hürde genommen&#x2026; lief alles. Einfach so. Wahrscheinlich bin ich ein Dickschädel und habe einfach nicht die Geistesschärfe, mit Windows-Kompilern zu arbeiten, aber mir scheint, alles was ich diesbezüglich anfasse und das nicht GCC heißt ist zum Scheitern verurteilt. Ein Glück, dass es die vielen klugen Jungen und Mädchen gibt, die so wunderbare freie Software schreiben, die mir das Leben so viel einfacher macht!
</p>

<p>
Eine Fortsetzung kommt noch&#x2026;
</p>
]]></description>
  <link>http://bastibe.de/2009-03-12-kompilieren-auf-windows.html</link>
  <pubDate>Thu, 12 Mar 2009 17:14:00 +0100</pubDate>
</item>
<item>
  <title>Vom Sinn und Unsinn, ein Cross-Platform-Compiling-Matlab-System aufzubauen</title>
  <description><![CDATA[
<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/bitte_warten.png" alt="bitte_warten.png" />
</p>
</div>

<p>
Mal wieder: Ich schreibe ein Stück Software für meinen Nebenjob bei meinem Signalverarbeitung-Prof. Diesmal geht es darum, beliebige Audio-Files in Matlab einlesen zu können. Perfekt geeignet ist dafür die selbe Bibliothek, die auch von VLC verwendet wird, libavcodec/libavformat. Das ist eine normale C-Bibliothek, es braucht also nur noch ein kleines mex-File, um ihre Funktionalität für Matlab zur Verfügung zu stellen. Klappt auch wunderbar. Auf dem Mac.
</p>

<p>
Schritt zwei ist dann, das Ganze auf Windows und Linux zum Laufen zu bringen. Eigentlich kein Problem, denn ich habe keine wilden Dinge getan und die Libraries selbst sind wunderbar Cross-Platform, es gibt sie sogar schon vorkompiliert für praktisch jedes denkbare Betriebssystem.
</p>

<p>
Also, was brauche ich? Zwei Dinge: Matlab und einen C-Compiler (der mitgelieferte LLC-Compiler macht mein Hirn bluten). Matlab zu installieren ist meiner Erfahrung nach schmerzhaft. Bigtime. Nicht, weil Matlab schwer zu installieren wäre, sondern, weil Mathworks nur zwei Installationen pro Schachtel erlaubt, was für meine drei Betriebssysteme zu gewissen Problemen führt. Außerdem müsste ich meine eine Lizenz erst für die Windows-installation umschreiben lassen, und&#x2026; ach, Schmerzen. Offenbar habe ich die Jungs dort aber schon derart häufig mit Lizenzanfragen genervt, dass sie mich einfach als hoffnungslos aufgegeben haben, denn dieses Mal musste ich keine neue Lizenz erstellen lassen, sondern einfach installieren, Passwort eingeben, und los. Mein Account meldet jetzt, dass ich fünf gleichzeitige Installationen hätte (von zwei erlaubten). Mir solls Recht sein.
</p>

<p>
Außerdem: ein aktuelles Linux muss her. VMWare sei Dank, lauert im Linux-Installieren nicht mehr der Schrecken, im Zweifelsfall den kompletten Festplatteninhalt zu verlieren, sondern nur noch, an akuter Progressbar-itis zu ersticken. War ja klar, dass Autoupdate sich diesen Nachmittag aussucht, um meine Ubuntu-VM hoffnungslos zu zerstören. Also, neues Ubuntu heruntergeladen, neu installiert, neu Updates aufgespielt, zwei Stunden Lifetime verloren. Immerhin: es hat fehlerfrei funktioniert, das ist was Neues. Matlab hinterher, VMWare Tools dazu, fertig ist die Development-Kiste. Jetzt fehlt nur noch eine Verbindung zu meinem Development-Verzeichnis, damit ich auf meine Dateien zugreifen kann. Fehlanzeige. Dukommsthiernichrein. Na Toll.
</p>


<div class="figure">
<p><img src="http://bastibe.de/static/2009-03/upgradepatch.png" alt="upgradepatch.png" />
</p>
</div>

<p>
Also weiter zu Windows. Frühere Versuche ergaben bereits, dass ich Matlab nicht dazu bewegen kann, (a) GCC als Compiler zu nehmen oder (b) das bereits installierte Microsoft Visual Studio C++ .Net Professional Directors Cut Special Edition 2008 Ultimate zu verwenden. Nähere Nachforschungen zeigen: Zu neu, Kennternich. Geht nur bis MSVC Jahrgang 2005. Also: Neues MSVC deinstallieren, Altes installieren. ich freue mich immer darauf, MSVC zu deinstallieren, denn es besteht lediglich aus kompakten 12 Programmen, die sich zwar alle auf einem Haufen Installieren- jedoch nicht De-Installieren lassen. Immerhin ist es dank MSDNAA-Membership nicht schwer, an die alten Versionen heranzukommen. Und klar, die Systemsteuerung lässt einen auch immer nur ein Programm auf einmal deinstallieren. Multitasking ist nicht. Dank Syncplicity kann Windows die Zwischenzeit immerhin dazu verwenden, all meine Development-Files auf den Rechner zu laden. Yay!
Das Schöne an Fortschrittsbalken ist ja, sie zeigen Fortschritt. Damit haben sie einen klaren Vorteil gegenüber etwa Dachbalken oder den Bittewartenpunktpunktpunkt-Balken, die die Microsoft SQL Server 2008-Deinstallation stolz herumzeigt. Die fühlt sich wohl sehr wichtig, denn sie rödelt eine starke halbe Stunde im Bitte-Warten-Modus herum. So mag ich Deinstallationen.
</p>

<p>
To be continued&#x2026;
</p>
]]></description>
  <link>http://bastibe.de/2009-03-05-great-scott.html</link>
  <pubDate>Thu, 05 Mar 2009 13:55:00 +0100</pubDate>
</item>
</channel>
</rss>
