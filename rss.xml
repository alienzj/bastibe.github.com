<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	 xmlns:content="http://purl.org/rss/1.0/modules/content/"
	 xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	 xmlns:dc="http://purl.org/dc/elements/1.1/"
	 xmlns:atom="http://www.w3.org/2005/Atom"
	 xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	 xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Bastis Scratchpad on the Internet</title>
  <atom:link href="http://bastibe.de/rss.xml" rel="self" type="application/rss+xml" />
  <link>http://bastibe.de/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Wed, 13 Nov 2013 17:09:17 +0100</pubDate>
  <lastBuildDate>Wed, 13 Nov 2013 17:09:17 +0100</lastBuildDate>
  <generator>Emacs 24.3 Org-mode 8.2.2</generator>
  <webMaster>bb@randomtask (Bastian Bechtold)</webMaster>
  <image>
    <url>http://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Bastis Scratchpad on the Internet</title>
    <link>http://bastibe.de/</link>
  </image>

  <item>
    <title>Blogging with Emacs</title>
    <link>http://bastibe.de/"http://bastibe.de/2013-11-13-blogging-with-emacs.html"</link>
    <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2013-11-13-blogging-with-emacs.html"</guid>
    <pubDate>Wed, 13 Nov 2013 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    When I first started blogging, it was on <a href="http://blogger.com">blogger.com</a> (on the now-abandoned domain <a href="http://daskrachen.com">daskrachen.com</a>). On blogger, writing new posts (back then) involved typing raw HTML into a web form. Not what I would call ideal. This improved somewhat when they introduced a fancy rich text editor that would automatically transform beautiful text into a horrible formatting mess.
  </p>

  <p>
    Thus I switched. Getting my blog posts out of blogger was... Let&rsquo;s just say that I lost anything I didn&rsquo;t have a plain-text backup of. And <a href="http://bastibe.de/2012-07-18-blogging-with-pelican.html">I switched</a> to <a href="http://pelican.readthedocs.org/en/3.3.0/">Pelican</a>, a static site generator written in Python. It worked beautifully, until I updated something, at which point it resorted to just throwing errors. Now I don&rsquo;t have anything in particular against Python stack traces, but these particular traces traced deep into stuff that was (then?) too complex for me to understand.
  </p>

  <p>
    Thus I switched again. This time to <a href="https://github.com/redline6561/coleslaw">C()λ∈slaw■</a>, a static site generator written in Common Lisp. Mainly because I was interested in Common Lisp at the time. It worked really well. However, this was supposed to give me a chance to delve into Common Lisp, and I failed to understand C()λ∈slaw■&rsquo;s code. Realistically though, this is probably not C()λ∈slaw■&rsquo;s fault. My knowledge of Common Lisp is far from perfect.
  </p>

  <p>
    Thus it was time to switch again. Having been enamored with Emacs for the last few years, it made sense to blog with Emacs as well. Besides, I am kind of fed up with the many conflicting flavors of Markdown out there and have switched my personal note-taking to <a href="http://orgmode.org/">Org mode</a> long ago. So let&rsquo;s set up Emacs and Org as a blogging platform!
  </p>

  <p>
    Before we start though, a short disclaimer: This will be a very bare bones blogging engine. It will consist of some articles, a front page, an archive page, and an RSS feed. And you will have to manage the front page and RSS feed semi-manually. No tags, no fancy history. Just what you see here.
  </p>

  <p>
    On the plus side, this will be implemented entirely within Emacs and very simple to understand. Writing a new blog post will be as simple as writing an Org file and hitting a key combination! And you will get all of Org&rsquo;s fancy syntax highlighting and export magic for free!
  </p>

  <p>
    Getting the pages to work is rather simple: You have to create a &ldquo;publishing project&rdquo; that specifies a <code>base-directory</code> where your Org files live and a <code>publishing-directory</code>, where the HTML files are going to be stored. Since this is Emacs, you could make your publishing directory any TRAMP path you like and insta-publish your workings!
  </p>

  <p>
    (BTW, I am using Org 8.2.2 and I believe you need at least 8.0 for these examples to work)
  </p>

  <div class="org-src-container">

    <pre class="src src-elisp">(<span style="color: #718c00;">require</span> '<span style="color: #4271ae;">ox-html</span>)
    (<span style="color: #718c00;">require</span> '<span style="color: #4271ae;">ox-rss</span>)
    (<span style="color: #718c00;">require</span> '<span style="color: #4271ae;">ox-publish</span>)
    (setq org-publish-project-alist
    '((<span style="color: #3e999f;">"blog-content"</span>
    <span style="color: #8959a8;">:base-directory</span> <span style="color: #3e999f;">"~/Projects/blog/posts"</span>
    <span style="color: #8959a8;">:html-extension</span> <span style="color: #3e999f;">"html"</span>
    <span style="color: #8959a8;">:base-extension</span> <span style="color: #3e999f;">"org"</span>
    <span style="color: #8959a8;">:publishing-directory</span> <span style="color: #3e999f;">"~/Projects/blog/publish"</span>
    <span style="color: #8959a8;">:publishing-function</span> (org-html-publish-to-html)
    <span style="color: #8959a8;">:recursive</span> t          <span style="color: #8e908c; font-style: italic;">; </span><span style="color: #8e908c; font-style: italic;">descend into sub-folders?</span>
    <span style="color: #8959a8;">:section-numbers</span> nil  <span style="color: #8e908c; font-style: italic;">; </span><span style="color: #8e908c; font-style: italic;">don't create numbered sections</span>
    <span style="color: #8959a8;">:with-toc</span> nil         <span style="color: #8e908c; font-style: italic;">; </span><span style="color: #8e908c; font-style: italic;">don't create a table of contents</span>
    <span style="color: #8959a8;">:with-latex</span> t         <span style="color: #8e908c; font-style: italic;">; </span><span style="color: #8e908c; font-style: italic;">do use MathJax for awesome formulas!</span>
    <span style="color: #8959a8;">:html-head-extra</span> <span style="color: #3e999f;">""</span>   <span style="color: #8e908c; font-style: italic;">; </span><span style="color: #8e908c; font-style: italic;">extra &lt;head&gt; entries go here</span>
    <span style="color: #8959a8;">:html-preamble</span> <span style="color: #3e999f;">""</span>     <span style="color: #8e908c; font-style: italic;">; </span><span style="color: #8e908c; font-style: italic;">this stuff is put before your post</span>
    <span style="color: #8959a8;">:html-postamble</span> <span style="color: #3e999f;">""</span>    <span style="color: #8e908c; font-style: italic;">; </span><span style="color: #8e908c; font-style: italic;">this stuff is put after your post</span>
    )))
    </pre>
  </div>

  <p>
    Now hit <code>M-x org-publish</code>, type in <code>blog-content</code>, and you have a blog! Awesome! We are done here.
  </p>

  <p>
    Well, how about an archive page that lists all your previous blog entries?
  </p>

  <p>
    Emacs can auto-generate this for you. Simply add these lines to <code>blog-content</code>:
  </p>

  <div class="org-src-container">

    <pre class="src src-elisp"><span style="color: #8959a8;">:auto-sitemap</span> t
    <span style="color: #8959a8;">:sitemap-filename</span> <span style="color: #3e999f;">"archive.org"</span>
    <span style="color: #8959a8;">:sitemap-title</span> <span style="color: #3e999f;">"Archive"</span>
    <span style="color: #8959a8;">:sitemap-sort-files</span> anti-chronologically
    <span style="color: #8959a8;">:sitemap-style</span> list
    <span style="color: #8959a8;">:makeindex</span> t
    </pre>
  </div>

  <p>
    Also, you can put something like
  </p>

  <div class="org-src-container">

    <pre class="src src-html">&lt;<span style="color: #f5871f;">a</span> <span style="color: #eab700;">href</span>=<span style="color: #3e999f;">"archive.html"</span>&gt;Other posts&lt;/<span style="color: #f5871f;">a</span>&gt;
    </pre>
  </div>

  <p>
    into your <code>:html-postamble</code> to make every page link to this. You can also add your <a href="https://disqus.com/">Disqus</a> snippet there to enable comments.
  </p>

  <p>
    Adding a front page is simple, too. My front page is simply a normal page called <i>index.org</i>, which contains links and slugs for every article I want to have on the front page. For example:
  </p>

  <div class="org-src-container">

    <pre class="src src-org"><span style="color: #718c00;">#+TITLE:</span> <span style="color: #f5871f; font-size: 144%; font-weight: bold;">RECENT POSTS</span>

    <span style="color: #4271ae;">* </span><span style="color: #4271ae; text-decoration: underline;">[[file:2013-05-30-speeding-up-matplotlib.org][Speeding up Matplotlib]]</span>
    <span style="color: #8e908c; font-style: italic;">#+include: "~/Projects/blog/posts/2013-05-30-speeding-up-matplotlib.org" :lines "4-9"</span>
    <span style="color: #4271ae; text-decoration: underline;">[[file:2013-05-30-speeding-up-matplotlib.org][read more...]]</span>
    </pre>
  </div>

  <p>
    But a blog is more than just text. There are images and CSS, too. I keep all that stuff in a separate directory and use a separate publishing project to copy it over to the publishing directory. Just add to your <code>publishing-alist</code>:
  </p>

  <div class="org-src-container">

    <pre class="src src-elisp">(<span style="color: #3e999f;">"blog-static"</span>
    <span style="color: #8959a8;">:base-directory</span> <span style="color: #3e999f;">"~/Projects/blog/static"</span>
    <span style="color: #8959a8;">:base-extension</span> <span style="color: #3e999f;">"png</span><span style="color: #eab700; font-weight: bold;">\\</span><span style="color: #8959a8; font-weight: bold;">|</span><span style="color: #3e999f;">jpg</span><span style="color: #eab700; font-weight: bold;">\\</span><span style="color: #8959a8; font-weight: bold;">|</span><span style="color: #3e999f;">css"</span>
    <span style="color: #8959a8;">:publishing-directory</span> <span style="color: #3e999f;">"~/Projects/blog/publish/static"</span>
    <span style="color: #8959a8;">:recursive</span> t
    <span style="color: #8959a8;">:publishing-function</span> org-publish-attachment)
    </pre>
  </div>

  <p>
    Setting up the RSS feed works similarly. The RSS feed is created from a single Org file. Create a new publishing project and put it into your <code>publishing-alist</code>
  </p>

  <div class="org-src-container">

    <pre class="src src-elisp">(<span style="color: #3e999f;">"blog-rss"</span>
    <span style="color: #8959a8;">:base-directory</span> <span style="color: #3e999f;">"~/Projects/blog/posts"</span>
    <span style="color: #8959a8;">:base-extension</span> <span style="color: #3e999f;">"org"</span>
    <span style="color: #8959a8;">:publishing-directory</span> <span style="color: #3e999f;">"~/Projects/blog/publish"</span>
    <span style="color: #8959a8;">:publishing-function</span> (org-rss-publish-to-rss)
    <span style="color: #8959a8;">:html-link-home</span> <span style="color: #3e999f;">"http://bastibe.de/"</span>
    <span style="color: #8959a8;">:html-link-use-abs-url</span> t
    <span style="color: #8959a8;">:exclude</span> <span style="color: #3e999f;">".*"</span>
    <span style="color: #8959a8;">:include</span> (<span style="color: #3e999f;">"rss.org"</span>)
    <span style="color: #8959a8;">:with-toc</span> nil
    <span style="color: #8959a8;">:section-numbers</span> nil
    <span style="color: #8959a8;">:title</span> <span style="color: #3e999f;">"Bastis Scratchpad on the Internet"</span>)
    </pre>
  </div>

  <p>
    Make sure to exclude this <code>rss.org</code> from the <code>blog-content</code> project by adding it&rsquo;s name to the <code>:exclude</code> variable though. This <code>rss.org</code> file should contain headlines for every blog post. Every headline needs a publishing date and a permalink as property and the body of the post as content:
  </p>

  <div class="org-src-container">

    <pre class="src src-org"><span style="color: #4271ae;">* Speeding up Matplotlib</span>
    <span style="color: #f5871f;">:PROPERTIES:</span>
    <span style="color: #f5871f;">:RSS_PERMALINK:</span> "<span style="color: #4271ae; text-decoration: underline;">http://bastibe.de/2013-05-30-speeding-up-matplotlib.html</span>"
    <span style="color: #f5871f;">:PUBDATE:</span> <span style="color: #4271ae; text-decoration: underline;">&lt;2013-05-30&gt;</span>
    <span style="color: #f5871f;">:END:</span>
    <span style="color: #8e908c; font-style: italic;">#+include: "~/Projects/blog/posts/2013-05-30-speeding-up-matplotlib.org" :lines "4-"</span>
    </pre>
  </div>

  <p>
    I exclude the first three lines, since they only contain <code>#+title</code>, <code>#+date</code>, and <code>#+tags</code>. You should at least exclude the <code>#+title</code> line. Otherwise, <code>ox-rss</code> will get confused about which title to choose for the feed.
  </p>

  <p>
    You can even create a meta publishing project that executes all three projects in one fell swoop!
  </p>

  <div class="org-src-container">

    <pre class="src src-elisp">(<span style="color: #3e999f;">"blog"</span>
    <span style="color: #8959a8;">:components</span> (<span style="color: #3e999f;">"blog-content"</span> <span style="color: #3e999f;">"blog-static"</span> <span style="color: #3e999f;">"blog-rss"</span>))
    </pre>
  </div>

  <p>
    There is one more thing that is kind of fiddly though: As I said, I use Disqus for comments, but I don&rsquo;t want to have comment boxes on the front page or the archive. Thankfully though, <code>ox-html</code> allows you to set <code>:html-preamble</code> and <code>:html-postamble</code> to a function, in which case that function can decide what pre/postamble to draw! The function can take an optional argument that contains a <code>plist</code> of article metadata. In this case, I decide on the <code>:title</code> metadata whether to print the archive link and Disqus, only the archive link, or neither:
  </p>

  <div class="org-src-container">

    <pre class="src src-elisp"><span style="color: #8959a8;">:html-postamble</span>
    (<span style="color: #718c00;">lambda</span> (info)
    <span style="color: #8959a8;">"Do not show disqus for Archive and Recent Posts"</span>
    (<span style="color: #718c00;">cond</span> ((string= (car (plist-get info <span style="color: #8959a8;">:title</span>)) <span style="color: #3e999f;">"Archive"</span>)
    <span style="color: #3e999f;">""</span>)
    ((string= (car (plist-get info <span style="color: #8959a8;">:title</span>)) <span style="color: #3e999f;">"Recent Posts"</span>)
    <span style="color: #3e999f;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;"</span>)
    (t
    <span style="color: #3e999f;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;</span>
    <span style="color: #3e999f;">     &lt;div id=\"disqus_thread\"&gt;&lt;/div&gt;</span>
    <span style="color: #3e999f;">     &lt;script type=\"text/javascript\"&gt;</span>
    <span style="color: #3e999f;">     ..."</span>
    </pre>
  </div>

  <p>
    This should get you started! For completeness, here is my complete configuration:
  </p>

  <div class="org-src-container">

    <pre class="src src-elisp">(<span style="color: #718c00;">require</span> '<span style="color: #4271ae;">ox-html</span>)
    (<span style="color: #718c00;">require</span> '<span style="color: #4271ae;">ox-rss</span>)
    (<span style="color: #718c00;">require</span> '<span style="color: #4271ae;">ox-publish</span>)
    (setq org-publish-project-alist
    '((<span style="color: #3e999f;">"blog"</span>
    <span style="color: #8959a8;">:components</span> (<span style="color: #3e999f;">"blog-content"</span> <span style="color: #3e999f;">"blog-static"</span> <span style="color: #3e999f;">"blog-rss"</span>))
    (<span style="color: #3e999f;">"blog-content"</span>
    <span style="color: #8959a8;">:base-directory</span> <span style="color: #3e999f;">"~/Projects/blog/posts"</span>
    <span style="color: #8959a8;">:html-extension</span> <span style="color: #3e999f;">"html"</span>
    <span style="color: #8959a8;">:base-extension</span> <span style="color: #3e999f;">"org"</span>
    <span style="color: #8959a8;">:publishing-directory</span> <span style="color: #3e999f;">"~/Projects/blog/publish"</span>
    <span style="color: #8959a8;">:publishing-function</span> (org-html-publish-to-html)
    <span style="color: #8959a8;">:auto-sitemap</span> t
    <span style="color: #8959a8;">:sitemap-filename</span> <span style="color: #3e999f;">"archive.org"</span>
    <span style="color: #8959a8;">:sitemap-title</span> <span style="color: #3e999f;">"Archive"</span>
    <span style="color: #8959a8;">:sitemap-sort-files</span> anti-chronologically
    <span style="color: #8959a8;">:sitemap-style</span> list
    <span style="color: #8959a8;">:makeindex</span> t
    <span style="color: #8959a8;">:recursive</span> t
    <span style="color: #8959a8;">:section-numbers</span> nil
    <span style="color: #8959a8;">:with-toc</span> nil
    <span style="color: #8959a8;">:with-latex</span> t
    <span style="color: #8959a8;">:html-head-include-default-style</span> nil
    <span style="color: #8959a8;">:html-head-include-scripts</span> nil
    <span style="color: #8959a8;">:html-head-extra</span>
    <span style="color: #3e999f;">"&lt;link rel=\"alternate\" type=\"appliation/rss+xml\"</span>
    <span style="color: #3e999f;">                href=\"http://bastibe.de/rss.xml\"</span>
    <span style="color: #3e999f;">                title=\"RSS feed for bastibe.de\"&gt;</span>
    <span style="color: #3e999f;">          &lt;link href='http://fonts.googleapis.com/css?family=Roboto&amp;subset=latin' rel='stylesheet' type='text/css'&gt;</span>
    <span style="color: #3e999f;">          &lt;link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono' rel='stylesheet' type='text/css'&gt;</span>
    <span style="color: #3e999f;">          &lt;link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span>
    <span style="color: #3e999f;">          &lt;title&gt;Basti's Scratchpad on the Internet&lt;/title&gt;</span>
    <span style="color: #3e999f;">          &lt;meta http-equiv=\"content-type\" content=\"application/xhtml+xml; charset=UTF-8\" /&gt;</span>
    <span style="color: #3e999f;">          &lt;meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\"&gt;"</span>
    <span style="color: #8959a8;">:html-preamble</span>
    <span style="color: #3e999f;">"&lt;div class=\"header\"&gt;</span>
    <span style="color: #3e999f;">              &lt;a href=\"http://bastibe.de\"&gt;Basti's Scratchpad on the Internet&lt;/a&gt;</span>
    <span style="color: #3e999f;">              &lt;div class=\"sitelinks\"&gt;</span>
    <span style="color: #3e999f;">                  &lt;a href=\"http://alpha.app.net/bastibe\"&gt;alpha.app.net&lt;/a&gt;  | &lt;a href=\"http://github.com/bastibe\"&gt;Github&lt;/a&gt;</span>
    <span style="color: #3e999f;">              &lt;/div&gt;</span>
    <span style="color: #3e999f;">          &lt;/div&gt;"</span>
    <span style="color: #8959a8;">:html-postamble</span>
    (<span style="color: #718c00;">lambda</span> (info)
    <span style="color: #8959a8;">"Do not show disqus for Archive and Recent Posts"</span>
    (<span style="color: #718c00;">cond</span> ((string= (car (plist-get info <span style="color: #8959a8;">:title</span>)) <span style="color: #3e999f;">"Archive"</span>) <span style="color: #3e999f;">""</span>)
    ((string= (car (plist-get info <span style="color: #8959a8;">:title</span>)) <span style="color: #3e999f;">"Recent Posts"</span>)
    <span style="color: #3e999f;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;"</span>)
    (t
    <span style="color: #3e999f;">"&lt;div id=\"archive\"&gt;&lt;a href=\"archive.html\"&gt;Other posts&lt;/a&gt;&lt;/div&gt;</span>
    <span style="color: #3e999f;">              &lt;div id=\"disqus_thread\"&gt;&lt;/div&gt;</span>
    <span style="color: #3e999f;">              &lt;script type=\"text/javascript\"&gt;</span>
    <span style="color: #3e999f;">              /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>
    <span style="color: #3e999f;">              var disqus_shortname = 'bastibe';</span>
    <span style="color: #3e999f;">              /* * * DON'T EDIT BELOW THIS LINE * * */</span>
    <span style="color: #3e999f;">              (function() {</span>
    <span style="color: #3e999f;">                var dsq = document.createElement('script');</span>
    <span style="color: #3e999f;">                dsq.type = 'text/javascript';</span>
    <span style="color: #3e999f;">                dsq.async = true;</span>
    <span style="color: #3e999f;">                dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';</span>
    <span style="color: #3e999f;">                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);</span>
    <span style="color: #3e999f;">                  })();</span>
    <span style="color: #3e999f;">              &lt;/script&gt;</span>
    <span style="color: #3e999f;">              &lt;noscript&gt;Please enable JavaScript to view the</span>
    <span style="color: #3e999f;">                  &lt;a href=\"http://disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span>
    <span style="color: #3e999f;">              &lt;a href=\"http://disqus.com\" class=\"dsq-brlink\"&gt;comments powered by &lt;span class=\"logo-disqus\"&gt;Disqus&lt;/span&gt;&lt;/a&gt;"</span>)))
    <span style="color: #8959a8;">:exclude</span> <span style="color: #3e999f;">"rss.org</span><span style="color: #eab700; font-weight: bold;">\\</span><span style="color: #8959a8; font-weight: bold;">|</span><span style="color: #3e999f;">archive.org</span><span style="color: #eab700; font-weight: bold;">\\</span><span style="color: #8959a8; font-weight: bold;">|</span><span style="color: #3e999f;">theindex.org"</span>)
    (<span style="color: #3e999f;">"blog-rss"</span>
    <span style="color: #8959a8;">:base-directory</span> <span style="color: #3e999f;">"~/Projects/blog/posts"</span>
    <span style="color: #8959a8;">:base-extension</span> <span style="color: #3e999f;">"org"</span>
    <span style="color: #8959a8;">:publishing-directory</span> <span style="color: #3e999f;">"~/Projects/blog/publish"</span>
    <span style="color: #8959a8;">:publishing-function</span> (org-rss-publish-to-rss)
    <span style="color: #8959a8;">:html-link-home</span> <span style="color: #3e999f;">"http://bastibe.de/"</span>
    <span style="color: #8959a8;">:html-link-use-abs-url</span> t
    <span style="color: #8959a8;">:exclude</span> <span style="color: #3e999f;">".*"</span>
    <span style="color: #8959a8;">:include</span> (<span style="color: #3e999f;">"rss.org"</span>)
    <span style="color: #8959a8;">:with-toc</span> nil
    <span style="color: #8959a8;">:section-numbers</span> nil
    <span style="color: #8959a8;">:title</span> <span style="color: #3e999f;">"Bastis Scratchpad on the Internet"</span>)
    (<span style="color: #3e999f;">"blog-static"</span>
    <span style="color: #8959a8;">:base-directory</span> <span style="color: #3e999f;">"~/Projects/blog/static"</span>
    <span style="color: #8959a8;">:base-extension</span> <span style="color: #3e999f;">"png</span><span style="color: #eab700; font-weight: bold;">\\</span><span style="color: #8959a8; font-weight: bold;">|</span><span style="color: #3e999f;">jpg</span><span style="color: #eab700; font-weight: bold;">\\</span><span style="color: #8959a8; font-weight: bold;">|</span><span style="color: #3e999f;">css"</span>
    <span style="color: #8959a8;">:publishing-directory</span> <span style="color: #3e999f;">"~/Projects/blog/publish/static"</span>
    <span style="color: #8959a8;">:recursive</span> t
    <span style="color: #8959a8;">:publishing-function</span> org-publish-attachment)))
  </pre>
</div>

<p>
  All other sources, including the source code to all blog posts, can be found on <a href="https://github.com/bastibe/bastibe.github.com">Github</a> (the <i>master</i> branch contains HTML, the <i>source</i> branch contains Org).
</p>
]]></description>
</item>
<item>
  <title>Speeding up Matplotlib</title>
  <link>http://bastibe.de/"http://bastibe.de/2013-05-30-speeding-up-matplotlib.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2013-05-30-speeding-up-matplotlib.html"</guid>
  <pubDate>Thu, 30 May 2013 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  For the record, <a href="http://matplotlib.org">Matplotlib</a> is awesome! Its output looks amazing, it is extremely configurable and very easy to use. What more could you want?
</p>

<p>
  Well... speed. If there is one thing I could criticize about Matplotlib, it is its relative slowness. To measure that, lets make a very simple line plot and draw some random numbers as quickly as possible:
</p>

<div class="org-src-container">

  <pre class="src src-python"><span style="color: #718c00;">import</span> matplotlib.pyplot <span style="color: #718c00;">as</span> plt
  <span style="color: #718c00;">import</span> numpy <span style="color: #718c00;">as</span> np
  <span style="color: #718c00;">import</span> time

  <span style="color: #eab700;">fig</span>, <span style="color: #eab700;">ax</span> = plt.subplots()

  <span style="color: #eab700;">tstart</span> = time.time()
  <span style="color: #eab700;">num_plots</span> = 0
  <span style="color: #718c00;">while</span> time.time()-tstart &lt; 1:
  ax.clear()
  ax.plot(np.random.randn(100))
  plt.pause(0.001)
  <span style="color: #eab700;">num_plots</span> += 1
  <span style="color: #718c00;">print</span>(num_plots)
  </pre>
</div>

<p>
  On my machine, I get about 11 plots per second. I am using <code>pause()</code> here to update the plot without blocking. The correct way to do this is to use <code>draw()</code> instead, but due to a bug in the Qt4Agg backend, you can&rsquo;t use it there. If you are not using the Qt4Agg backend, <code>draw()</code> is supposedly the correct choice.
</p>

<p>
  For a single plot, ten plots per second is not terrible. But then, this is really the simplest case possible, so ten frames per second in the simplest case probably means bad things for not so simple cases.
</p>

<p>
  One thing that really takes time here is creating all the axes and text labels over and over again. So let&rsquo;s not do that.
</p>

<p>
  Instead of calling <code>clear()</code> and then <code>plot()</code>, thus effectively deleting everything about the plot, then re-creating it for every frame, we can keep an existing plot and only modify its data:
</p>

<div class="org-src-container">

  <pre class="src src-python"><span style="color: #eab700;">fig</span>, <span style="color: #eab700;">ax</span> = plt.subplots()
  line, = ax.plot(np.random.randn(100))

  <span style="color: #eab700;">tstart</span> = time.time()
  <span style="color: #eab700;">num_plots</span> = 0
  <span style="color: #718c00;">while</span> time.time()-tstart &lt; 1:
  line.set_ydata(np.random.randn(100))
  plt.pause(0.001)
  <span style="color: #eab700;">num_plots</span> += 1
  <span style="color: #718c00;">print</span>(num_plots)
  </pre>
</div>

<p>
  which yields about 26 plots per second. Not bad for a simple change like this. The downside is that the axes are not re-scaled any longer when the data changes. Thus, they won&rsquo;t change their limits based on the data any more.
</p>

<p>
  Profiling this yields some interesting results:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
    <col  class="right" />

    <col  class="right" />

    <col  class="right" />

    <col  class="right" />

    <col  class="right" />

    <col  class="left" />
  </colgroup>
  <tbody>
    <tr>
      <td class="right">ncalls</td>
      <td class="right">tottime</td>
      <td class="right">percall</td>
      <td class="right">cumtime</td>
      <td class="right">percall</td>
      <td class="left">filename:lineno(function)</td>
    </tr>

    <tr>
      <td class="right">15</td>
      <td class="right">0.167</td>
      <td class="right">0.011</td>
      <td class="right">0.167</td>
      <td class="right">0.011</td>
      <td class="left">{built-in method sleep)</td>
    </tr>
  </tbody>
</table>

<p>
  The one function that uses the biggest chunk of runtime is <code>sleep()</code>, of all things. Clearly, this is not what we want. Delving deeper into the profiler shows that this is indeed happening in the call do <code>pause()</code>. Then again, I <i>was</i> wondering if using <i>pause</i> really was a great idea for performance...
</p>

<p>
  As it turns out, <code>pause()</code> internally calls <code>fig.canvas.draw()</code>, then <code>plt.show()</code>, then <code>fig.canvas.start_event_loop()</code>. The default implementation of <code>fig.canvas.start_event_loop()</code> then calls <code>fig.canvas.flush_events()</code>, then sleeps for the requested time. To add insult to injury, it even insists on sleeping at least one hundredth of a second, which actually explains the profiler output of 0.167 seconds of <code>sleep()</code> for 15 calls very well.
</p>

<p>
  Putting this all together now yields:
</p>

<div class="org-src-container">

  <pre class="src src-python"><span style="color: #eab700;">fig</span>, <span style="color: #eab700;">ax</span> = plt.subplots()
  line, = ax.plot(np.random.randn(100))

  <span style="color: #eab700;">tstart</span> = time.time()
  <span style="color: #eab700;">num_plots</span> = 0
  <span style="color: #718c00;">while</span> time.time()-tstart &lt; 1:
  line.set_ydata(np.random.randn(100))
  fig.canvas.draw()
  fig.canvas.flush_events()
  <span style="color: #eab700;">num_plots</span> += 1
  <span style="color: #718c00;">print</span>(num_plots)
  </pre>
</div>

<p>
  which now plots about 40 frames per second. Note that the call to <code>show()</code> mentioned earlier can be omitted since the figure is already on screen. <code>flush_events()</code> just runs the Qt event loop, so there is probably nothing to optimize there.
</p>

<p>
  The only thing left to optimize now is thus <code>fig.canvas.draw()</code>. What this really is doing is drawing all the artists contained in the <code>ax</code>. Those artists can be accessed using <code>ax.get_children()</code>. For a simple plot like this, the artists are:
</p>

<ul class="org-ul">
  <li>the background <code>ax.patch</code>
  </li>
  <li>the line, as returned from the <code>plot()</code> function
  </li>
  <li>the spines <code>ax.spines</code>
  </li>
  <li>the axes <code>ax.xaxis</code> and <code>ax.yaxis</code>
  </li>
</ul>

<p>
  What we can do here is to selectively draw only the parts that are actually changing. That is, at least the background and the line. To only redraw these, the code now looks like this:
</p>

<div class="org-src-container">

  <pre class="src src-python"><span style="color: #eab700;">fig</span>, <span style="color: #eab700;">ax</span> = plt.subplots()
  line, = ax.plot(np.random.randn(100))
  plt.show(block=<span style="color: #4271ae;">False</span>)

  <span style="color: #eab700;">tstart</span> = time.time()
  <span style="color: #eab700;">num_plots</span> = 0
  <span style="color: #718c00;">while</span> time.time()-tstart &lt; 5:
  line.set_ydata(np.random.randn(100))
  ax.draw_artist(ax.patch)
  ax.draw_artist(line)
  fig.canvas.update()
  fig.canvas.flush_events()
  <span style="color: #eab700;">num_plots</span> += 1
  <span style="color: #718c00;">print</span>(num_plots/5)
  </pre>
</div>

<p>
  Note that you have to add <code>fig.canvas.update()</code> to copy the newly rendered lines to the drawing backend.
</p>

<p>
  This now plots about 500 frames per second. Five hundred times per second! Frankly, this is quite amazing!
</p>

<p>
  Note that since we are only redrawing the background and the line, some detail in the axes will be overwritten. To also draw the spines, use <code>for spine in ax.spines.values(): ax.draw_artist(spine)</code>. To draw the axes, use <code>ax.draw_artist(ax.xaxis)</code> and <code>ax.draw_artist(ax.yaxis)</code>. If you draw all of them, you get roughly the same performance as <code>fig.canvas.draw()</code>. The axes in particular are quite expensive.
</p>

<p>
  There is also <a href="http://stackoverflow.com/a/8956211/1034">a way</a> of drawing the complete figure once and copying the complete but empty background, then reinstating that and only plotting a new line on top of it. This is equally fast as the code above without any visual artifacts, but breaks if you resize the plot.
</p>

<p>
  In conclusion, I am quite impressed with the flexibility of Matplotlib. Matplotlib by default values quality over performance. But if you really need the performance at some point, it is flexible and hackable enough to let you tweak it to your hearts content. Really, an amazing piece of technology!
</p>

<p>
  <b>EDIT</b>: As it turns out, <code>fig.canvas.blit(ax.bbox)</code> is a bad idea since it leaks memory like crazy. What you should use instead is <code>fig.canvas.update()</code>, which is equally fast but does not leak memory.
</p>
]]></description>
</item>
<item>
  <title>A Python Primer for Matlab Users</title>
  <link>http://bastibe.de/"http://bastibe.de/2013-01-20-a-python-primer-for-matlab-users.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2013-01-20-a-python-primer-for-matlab-users.html"</guid>
  <pubDate>Sun, 20 Jan 2013 00:00:00 +0100</pubDate>

  <description><![CDATA[<blockquote>
  <p>
    Why would you want to use Python over Matlab?
  </p>
</blockquote>

<ul class="org-ul">
  <li>Because Python is free and Matlab is not.
  </li>
  <li>Because Python is a general purpose programming language and Matlab is not.
  </li>
</ul>

<p>
  Let me qualify that a bit. Matlab is a very useful programming environment for numerical problems. For a very particular set of problems, Matlab is an awesome tool. For many other problems however, it is just about unusable. For example, you would not write a complex GUI program in Matlab, you would not write your blogging engine in Matlab and you would not write a web service in Matlab. You can do all that and more in Python.
</p>
  ]]></description>
</item>
<item>
  <title>Real Time Signal Processing in Python</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-11-02-real-time-signal-processing-in-python.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-11-02-real-time-signal-processing-in-python.html"</guid>
  <pubDate>Fri, 02 Nov 2012 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  Wouldn&rsquo;t it be nice if you could do real time audio processing in a convenient programming language? Matlab comes to mind as a convenient language for signal processing. But while Matlab is pretty fast, it is really only fast for algorithms that can be vectorized. In audio however, we have many algorithms that need knowledge about the previous sample to calculate the next one, so they can&rsquo;t be vectorized.
</p>

<p>
  But this is not going to be about Matlab. This is going to be about Python. Combine Python with Numpy (and Scipy and Matplotlib) and you have a signal processing system very comparable to Matlab. Additionally, you can do real-time audio input/output using PyAudio. PyAudio is a wrapper around PortAudio and provides cross platform audio recording/playback in a nice, pythonic way. (Real time capabilities were added in 0.2.6 with the help of yours truly).
</p>

<p>
  However, this does not solve the problem with vectorization. Just like Matlab, Python/Numpy is only fast for vectorizable algorithms. So as an example, let&rsquo;s define an iterative algorithm that is not vectorizable:
</p>
  ]]></description>
</item>
<item>
  <title>An error occurred loading this content. Try again later.</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-11-01-apple-tv.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-11-01-apple-tv.html"</guid>
  <pubDate>Thu, 01 Nov 2012 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  Since we moved, our Apple TV has been giving us trouble: we would rent a movie on the Apple TV, and instead of playing it, the Apple TV would just display
</p>

<blockquote>
  <p>
    An error occurred loading this content.
    Try again later.
  </p>
</blockquote>

<p>
  Rebooting, then trying again, would sometimes solve the issue. Trying to play a trailer before trying to play the movie seemed to increase chances of the Apple TV actually downloading the movie, too.
</p>

<p>
  Finally, some forum or other pointed me to the correct solution: For some reason, the Apple TV did not play nice with our ISP DNS server. Simply changing the DNS server in the Apple TV settings to one of the Google DNS servers (8.8.8.8 and 8.8.4.4) solved the issue. Any other DNS will probably work, too.
</p>
  ]]></description>
</item>
<item>
  <title>Names</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-10-28-names.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-10-28-names.html"</guid>
  <pubDate>Sun, 28 Oct 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<blockquote>
  <p>
    Names are everywhere in software. We name our variables, our functions, our arguments, classes, and packages. We name our source files and the directories that contain them. We name our jar files and war files and ear files. We name and name and name. Because we do so much of it, we&rsquo;d better do it well.
  </p>
</blockquote>

<p>
  -- from the Introduction to chapter 2 &ldquo;Meaningful Names&rdquo; of &ldquo;Clean Code&rdquo; by Robert C. Martin.
</p>

<p>
  Indeed we name a lot of things in software. As The Structure and Interpretation of Computer Programs points out, the primary purpose of a function (lambda) is to provide names for its arguments that are independent of names elsewhere. A function provides a closure in which stuff has defined names. The closure itself can then be embedded into other closures to form composite structures. Take any complex program structure and decompose its names through all its lambdas and you will only find more names right until you reach turtles.
</p>

<p>
  At its heart, programming is about naming things. If I squint my eyes a little, I can nearly convince myself that naming is really all there is. All the rest is just playing games with syntax.
</p>

<p>
  It&rsquo;s situations like this that I realize that The Structure and Interpretation of Computer Programs really changed how I view programming.
</p>

<p>
  If you like programming at all, I implore you to <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">read it</a>, or <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">watch it</a>, or <a href="http://mitpress.mit.edu/books/structure-and-interpretation-computer-programs">buy it</a>. It really blew my mind.
</p>
  ]]></description>
</item>
<item>
  <title>Matlab, Mex, Homebrew and OS X 10.8 Mountain Lion</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-10-20-matlab-mex-and-osx.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-10-20-matlab-mex-and-osx.html"</guid>
  <pubDate>Sat, 20 Oct 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Now that I am a student again, I have to use Matlab again. Among the many joys of Matlab is the compilation of mex files.
</p>

<p>
  Because it does not work. So angry.
</p>

<p>
  Basically, <code>mex</code> does not work because it assumes that you have OS X 10.6 installed. In OS X 10.6 you had <code>gcc-4.2</code> and your system SDK was stored in <i>\/Developer\/SDKs\/MacOSX10.6.sdk</i>. However, as of 10.7 (I think), the <i>\/Developer</i> directory has been deprecated in favor of distributing the whole development environment within the App package of XCode. Also, <code>gcc</code> has been deprecated in favor of <code>clang</code>. While a <code>gcc</code> binary is still provided, <code>gcc-4.2</code> is not. Of course, that is what <code>mex</code> relies on. Lastly, <code>mex</code> of course completely disregards common system paths such as, say, <i>\/usr\/local\/bin</i>, so compiling against some homebrew library won&rsquo;t work.
</p>

<p>
  At least these things are rather easy to fix, since all these settings are saved in a file called <i>mexopts.sh</i>, which is saved to <i>~\</i>.matlab\/R2012a\// by default. The relevant section on 64-bit OS X begins after <code>maci64)</code> and should look like this: (changes are marked by comments)
</p>

<div class="org-src-container">

  <pre class="src src-makefile"><span style="color: #8e908c; font-style: italic;">#</span><span style="color: #8e908c; font-style: italic;">----------------------------------------------------------------------------</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">StorageVersion: 1.0</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">CkeyName: GNU C</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">CkeyManufacturer: GNU</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">CkeyLanguage: C</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">CkeyVersion:</span>
  <span style="color: #eab700;">CC</span>=<span style="color: #3e999f;">'gcc'</span> <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">used to be 'gcc-4.2'</span>

  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">used to be '/Developer/SDKs/MacOSX10.6.sdk'</span>
  <span style="color: #eab700;">SDKROOT</span>=<span style="color: #3e999f;">'/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk'</span>
  <span style="color: #eab700;">MACOSX_DEPLOYMENT_TARGET</span>=<span style="color: #3e999f;">'10.8'</span> <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">used to be '10.5'</span>
  <span style="color: #eab700;">ARCHS</span>=<span style="color: #3e999f;">'x86_64'</span>
  <span style="color: #eab700;">CFLAGS</span>=<span style="color: #3e999f;">"-fno-common -no-cpp-precomp -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"</span>
  <span style="color: #eab700;">CFLAGS</span>=<span style="color: #3e999f;">"$CFLAGS  -fexceptions"</span>
  <span style="color: #eab700;">CFLAGS</span>=<span style="color: #3e999f;">"$CFLAGS -I/usr/local/include"</span> <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">Homebrew include path</span>
  <span style="color: #eab700;">CLIBS</span>=<span style="color: #3e999f;">"$MLIBS"</span>
  <span style="color: #eab700;">COPTIMFLAGS</span>=<span style="color: #3e999f;">'-O2 -DNDEBUG'</span>
  <span style="color: #eab700;">CDEBUGFLAGS</span>=<span style="color: #3e999f;">'-g'</span>
  <span style="color: #8e908c; font-style: italic;">#</span>
  <span style="color: #eab700;">CLIBS</span>=<span style="color: #3e999f;">"$CLIBS -lstdc++"</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">C++keyName: GNU C++</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">C++keyManufacturer: GNU</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">C++keyLanguage: C++</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">C++keyVersion:</span>
  <span style="color: #eab700;">CXX</span>=g++ <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">used to be 'g++-4.2'</span>
  <span style="color: #eab700;">CXXFLAGS</span>=<span style="color: #3e999f;">"-fno-common -no-cpp-precomp -fexceptions -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"</span>
  <span style="color: #eab700;">CXXLIBS</span>=<span style="color: #3e999f;">"$MLIBS -lstdc++"</span>
  <span style="color: #eab700;">CXXOPTIMFLAGS</span>=<span style="color: #3e999f;">'-O2 -DNDEBUG'</span>
  <span style="color: #eab700;">CXXDEBUGFLAGS</span>=<span style="color: #3e999f;">'-g'</span>
  <span style="color: #8e908c; font-style: italic;">#</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">FortrankeyName: GNU Fortran</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">FortrankeyManufacturer: GNU</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">FortrankeyLanguage: Fortran</span>
  <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">FortrankeyVersion:</span>
  <span style="color: #eab700;">FC</span>=<span style="color: #3e999f;">'gfortran'</span>
  <span style="color: #eab700;">FFLAGS</span>=<span style="color: #3e999f;">'-fexceptions -m64 -fbackslash'</span>
  <span style="color: #eab700;">FC_LIBDIR</span>=<span style="color: #3e999f;">`$FC -print-file-name=libgfortran.dylib 2&gt;&amp;1 | sed -n '1s/\/*libgfortran\.dylib//p'`</span>
  <span style="color: #eab700;">FC_LIBDIR2</span>=<span style="color: #3e999f;">`$FC -print-file-name=libgfortranbegin.a 2&gt;&amp;1 | sed -n '1s/\/*libgfortranbegin\.a//p'`</span>
  <span style="color: #eab700;">FLIBS</span>=<span style="color: #3e999f;">"$MLIBS -L$FC_LIBDIR -lgfortran -L$FC_LIBDIR2 -lgfortranbegin"</span>
  <span style="color: #eab700;">FOPTIMFLAGS</span>=<span style="color: #3e999f;">'-O'</span>
  <span style="color: #eab700;">FDEBUGFLAGS</span>=<span style="color: #3e999f;">'-g'</span>
  <span style="color: #8e908c; font-style: italic;">#</span>
  <span style="color: #eab700;">LD</span>=<span style="color: #3e999f;">"$CC"</span>
  <span style="color: #eab700;">LDEXTENSION</span>=<span style="color: #3e999f;">'.mexmaci64'</span>
  <span style="color: #eab700;">LDFLAGS</span>=<span style="color: #3e999f;">"-Wl,-twolevel_namespace -undefined error -arch $ARCHS -Wl,-syslibroot,$SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET"</span>
  <span style="color: #eab700;">LDFLAGS</span>=<span style="color: #3e999f;">"$LDFLAGS -bundle -Wl,-exported_symbols_list,$TMW_ROOT/extern/lib/$Arch/$MAPFILE"</span>
  <span style="color: #eab700;">LDFLAGS</span>=<span style="color: #3e999f;">"$LDFLAGS -L/usr/local/lib"</span> <span style="color: #8e908c; font-style: italic;"># </span><span style="color: #8e908c; font-style: italic;">Homebrew library path</span>
  <span style="color: #eab700;">LDOPTIMFLAGS</span>=<span style="color: #3e999f;">'-O'</span>
  <span style="color: #eab700;">LDDEBUGFLAGS</span>=<span style="color: #3e999f;">'-g'</span>
  <span style="color: #8e908c; font-style: italic;">#</span>
  <span style="color: #eab700;">POSTLINK_CMDS</span>=<span style="color: #3e999f;">':'</span>
  <span style="color: #8e908c; font-style: italic;">#</span><span style="color: #8e908c; font-style: italic;">----------------------------------------------------------------------------</span>
</pre>
</div>

<p>
  To summarize:
</p>

<ul class="org-ul">
  <li>changed <code>gcc-4.2</code> to <code>gcc</code>
  </li>
  <li>changed <code>/Developer/SDKs/MacOSX10.6.sdk</code> to <code>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk</code>
  </li>
  <li>changed <code>10.5</code> to <code>10.8</code>
  </li>
  <li>added ~CFLAGS="$CFLAGS -I/usr/local/include&rdquo;~
  </li>
  <li>changed <code>g++-4.2</code> to <code>g++</code>
  </li>
  <li>added ~LDFLAGS="$LDFLAGS -L/usr/local/lib&rdquo;~
  </li>
</ul>

<p>
  With those settings, the mex compiler should work and it should pick up any libraries installed by homebrew.
</p>
]]></description>
</item>
<item>
  <title>My Emacs customizations</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-10-14-emacs-customizations.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-10-14-emacs-customizations.html"</guid>
  <pubDate>Sun, 14 Oct 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  I don&rsquo;t host my <code>.emacs</code> in a repository. I tried it for a while, but it did not work for me. I think repos are great for managing multiple divergent versions of the same source tree. However, my dotfiles should never diverge, they should just be kept in sync. This is what Dropbox is great at. So I use Dropbox instead of git.
</p>

<p>
  One downside of that is that it is not as easy to provide a public link to my dotfiles. Or maybe it is. Here goes
</p>

<p>
  <a href="https://dl.dropbox.com/s/0ne31wkur81wgzb/.emacs">My <i>.emacs</i></a>
</p>

<p>
  Now on to the meat of this post: Some customizations I made that I think are cool.
</p>
  ]]></description>
</item>
<item>
  <title>Emacs</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-10-13-emacs.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-10-13-emacs.html"</guid>
  <pubDate>Sat, 13 Oct 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  In college, I realized for the first time how a good text editor could save me serious time, when I dragged an image file into Textmate and it auto-inserted all the LaTeX boilerplate for a figure. A few years later, on my first job, I learned <a href="http://www.viemu.com/">Vim key bindings for Visual Studio</a> because I hated text editing in Visual Studio so much. This showed me another way how a good text editor could save me serious time. A year after that, I was bored and tried Emacs. With Emacs, I discovered the marvelous world of <a href="https://en.wikipedia.org/wiki/REPL">REPLs</a> and <a href="http://orgmode.org/">outlining</a>.
</p>

<p>
  Note that this is not supposed to be a comparison between text editors. I have done that <a href="http://bastibe.de/text-editors.html">already</a>. This will be a collection of some of the coolest things my text editor of choice is capable of. Stuff I love!
</p>
  ]]></description>
</item>
<item>
  <title>A Story about Schemes</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-09-20-story-about-schemes.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-09-20-story-about-schemes.html"</guid>
  <pubDate>Thu, 20 Sep 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  <b>Disclaimer:</b> If you are a programmer, or wanting to be a programmer, or interested in programming, or, well, reading this, you should absolutely, positively watch the 1986 MIT lecture about <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/">The Structure and Interpretation of Computer Programs</a>. (Most conveniently available <a href="http://ia600401.us.archive.org/8/items/MIT_Structure_of_Computer_Programs_1986/">here</a>)
</p>

<p>
  I tried reading <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">the book</a> numerous times, but it was too dry for my taste. The lecture however is juicy, brain-bending bliss. Especially if you don&rsquo;t know much functional programming yet. It certainly blew my mind. Frequently. Like, every ten minutes. Basically, I feel reborn as a programmer, with a new sense of what I am doing and how it should be done.
</p>

<p>
  However, this is not about SICP, it is about Scheme, which happens to be the programming language that SICP uses to preach its sermons. Above all, Scheme beautiful. It is an astounding marriage of simplicity and power. It is also a mess in terms of implementations. There are dozens of implementations and they all implement a different, partly overlapping set of features that may or may not be part of the canonical Scheme--if there is such a thing.
</p>

<p>
  So, how to select the correct Scheme? Naively, I first chose the one SICP uses, <a href="http://www.gnu.org/software/mit-scheme/">MIT-Scheme</a>. However, I soon found out that it does not work well with Emacs (that is, it did not work at all with <code>scheme-mode</code> and <code>run-scheme</code>). Also, its prompt is weird: <code>]=&gt;</code>. Whatever.
</p>

<p>
  So next, I tried <a href="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page">Gambit Scheme</a>, which works a lot better with Emacs. But then, I soon found out that it does not support functions like <code>filter</code>, which are kind of essential. I was quick to write my own version of that, but really, this stuff should be provided. Turns out, <code>filter</code> is part of a Scheme Request For Implementation, or SRFI. <code>filter</code> is part of SRFI1. There is a <a href="http://srfi.schemers.org/srfi-implementers.html">huge list</a> of different Schemes and the SRFIs they support. Also, there is a list of <a href="http://www.cs.utah.edu/~mflatt/benchmarks-20100126/log3/Benchmarks.html">Schemes sorted by performance</a>. With <a href="http://www.cs.utah.edu/%7Emflatt/benchmarks-20100126/log3/Benchmarks-plot.html">plots</a>, even. It&rsquo;s a mess.
</p>

<p>
  So this left me profoundly confused. What Scheme would I use? Ideally, it should be fast, work with Emacs and implement a reasonable set of SRFIs. Homebrew lists these:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
    <col  class="left" />

    <col  class="left" />

    <col  class="left" />
  </colgroup>
  <tbody>
    <tr>
      <td class="left">bigloo</td>
      <td class="left">chibi-scheme</td>
      <td class="left">chicken</td>
    </tr>

    <tr>
      <td class="left">gambit-scheme</td>
      <td class="left">gauche</td>
      <td class="left">guile</td>
    </tr>

    <tr>
      <td class="left">kawa</td>
      <td class="left">mit-scheme</td>
      <td class="left">plt-racket</td>
    </tr>

    <tr>
      <td class="left">scheme48</td>
      <td class="left">scsh</td>
      <td class="left">sisc-scheme</td>
    </tr>

    <tr>
      <td class="left">stklos</td>
      <td class="left">tinyscheme</td>
      <td class="left">&#xa0;</td>
    </tr>
  </tbody>
</table>

<p>
  Difficult decision. Frankly, I don&rsquo;t have an answer. That said, I found <code>plt-racket</code> to be a joy to work with. <code>(help filter)</code> will open your browser with the appropriate help page for <code>filter</code>. Amazing. Also, it implements <a href="http://srfi.schemers.org/srfi-implementers.html">a long list</a> of SRFIs that will probably satisfy my simplistic needs. And the <a href="http://docs.racket-lang.org/">documentation</a> is excellent. And then there is DrRacket, which is a nice REPL that comes right with <a href="http://racket-lang.org/">Racket</a>. I like it.
</p>
]]></description>
</item>
<item>
  <title>Kindle.app not starting on a case-sensitive file system</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-09-13-Kindle-app-does-not-start.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-09-13-Kindle-app-does-not-start.html"</guid>
  <pubDate>Thu, 13 Sep 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  So Kindle.app was updated through the App Store and did not start any more. It just crashed and the crash reporter came up.
</p>

<p>
  A quick look at Console.app turns up a link to the actual crash report. And the crash report starts with
</p>

<pre class="example">
  Dyld Error Message:
  Library not loaded: @executable_path/../Frameworks/libWEbCoreKRF.dylib
  Referenced from: /Applications/Kindle.app/Contents/Frameworks/libWebCoreViewer.dylib
  Reason: image not found
</pre>

<p>
  <code>libWEbCoreKRF.dylib</code>? With a capitalized <code>E</code>? That looks very much like a spelling error. So, point your terminal to <code>/Applications/Kindle.app/Contents/Frameworks/</code>, type
</p>

<div class="org-src-container">

  <pre class="src src-sh">sudo ln -s libWebCoreKRF.dylib libWEbCoreKRF.dylib
  </pre>
</div>

<p>
  to create a symlink with the misspelled name. Done.
</p>

<p>
  Kindle works again.
</p>

<p>
  Spelling is hard, it seems.
</p>
  ]]></description>
</item>
<item>
  <title>On the Virtue of Contributing to and Using Open Source Software</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-09-08-on-the-virtue-of-oss.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-09-08-on-the-virtue-of-oss.html"</guid>
  <pubDate>Sat, 08 Sep 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  I am a mostly self-taught programmer. Apart from a few programming side jobs at the university, I have been programming professionally for the last two and a half years.
</p>

<p>
  About two years ago, we wanted to buy a Matlab license for our company. However, our investors declined for dubious reasons. So I started looking for alternatives. Inspired by a good friend (thank you, Marc), I looked into Python. Python has this brilliant environment for <a href="http://numpy.scipy.org/">numpy</a> <a href="http://scipy.org/">scipy</a> and <a href="http://matplotlib.sourceforge.net/">matplotlib</a> that, for my particular purposes, rivals Matlab.
</p>

<p>
  However, just like Matlab, Python lacked a way of playing real time audio out of the box. At the university, we used <a href="http://playrec.co.uk/">Playrec</a> for that purpose, which implements <a href="http://www.portaudio.com/">PortAudio</a> bindings for Matlab. Luckily, there was a similar package available for Python, called <a href="http://people.csail.mit.edu/hubert/pyaudio/">PyAudio</a>.
</p>

<p>
  But, it had one crucial flaw: it only implemented blocking-mode audio I/O, so not much luck for my real time requirements. (Blocking mode means that whenever you want to play some audio, you have to wait until the piece of audio finishes playing before you can begin to play the next piece or do some computation. Clearly, you can not process audio while it is playing with such a scheme). After a lot of research, I figured that my best bet would be to dive in and add non blocking I/O to PyAudio.
</p>

<p>
  At the time, I knew nothing of the Python C API (or Python, really), so those first attempts were riddled with subtle bugs and memory leaks. Nevertheless, it got the job done. I could play back audio in real time using Python!
</p>

<p>
  This was a revelation to me: I could not only <i>use</i> a piece of software, I could also <i>change</i> it and mold it to my special needs!
</p>

<p>
  Thus, I put up my changes on <a href="https://github.com/bastibe/PyAudio">github</a> and emailed the PyAudio maintainer. While the maintainer at the time did not have the time to incorporate my changes into the official PyAudio distribution, a few people discovered my version of it on github and contributed to it!
</p>

<p>
  This, again, was a revelation to me: Not only could <i>I</i> change stuff other people did, wonderful people from around the world could collaborate and help each other. It always gave me a warm feeling of appreciation when some stranger on the internet chose to work with me!
</p>

<p>
  Then, finally, I decided to take the plunge to Python 3. The main obstacle for this was that PyAudio did not support Python 3. So, again, I dove in and figured out how to make it compatible with Python 3. Again, I put the changes up on github and emailed the official PyAudio maintainer. This time, he took immediate notice and we started working on an official release of PyAudio including Python 3 support and non-blocking I/O.
</p>

<p>
  And during those weeks, I had my third, and biggest, revelation about Open Source Software: The PyAudio maintainer is a brilliant mind, and I was humbled to find that I could learn a lot from this man.
</p>

<p>
  <b>By working on Open Source Software, you can work with really smart people, and learn from them. And the fruits of that labor can serve as instructions to yet more people to learn from.</b>
</p>
  ]]></description>
</item>
<item>
  <title>Fixing Errors in Epydoc</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-08-28-errors-in-epydoc.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-08-28-errors-in-epydoc.html"</guid>
  <pubDate>Tue, 28 Aug 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  I ran into this error twice now and wasted an hour both times, so it is time to put this on my universal scratchpad, i.e. this blog.
</p>

<p>
  If you ever get this error when using <a href="http://epydoc.sourceforge.net/">epydoc</a>:
</p>

<pre class="example">
  UNEXPECTED ERROR:
  'Text' object has no attribute 'data'
</pre>

<p>
  You are probably running a version of Python that is greater than the latest one that is supported by epydoc. This is because epydoc has not been updated since 2008 and Python 2.5.
</p>

<p>
  Luckily, some <a href="http://www.agapow.net/programming/python/epydoc-go-boom">fine</a> <a href="http://stackoverflow.com/questions/6704770/epydoc-attributeerror-text-object-has-no-attribute-data">folks</a> on the internet have figured out how to fix these things.
</p>

<p>
  Short answer: Find your <i>site-packages</i> directory:
</p>

<div class="org-src-container">

  <pre class="src src-python"><span style="color: #718c00;">from</span> distutils.sysconfig <span style="color: #718c00;">import</span> get_python_lib
  <span style="color: #718c00;">print</span>(get_python_lib())
  </pre>
</div>

<p>
  Go there, navigate to the <i>epydoc\/markup</i> directory and change line 307 of the file <i>restructuredtext.py</i> from
</p>

<div class="org-src-container">

  <pre class="src src-python"><span style="color: #eab700;">m</span> = <span style="color: #718c00;">self</span>._SUMMARY_RE.match(child.data)
  </pre>
</div>

<p>
  to
</p>

<div class="org-src-container">

  <pre class="src src-python"><span style="color: #718c00;">try</span>:
  <span style="color: #eab700;">m</span> = <span style="color: #718c00;">self</span>._SUMMARY_RE.match(child.data)
  <span style="color: #718c00;">except</span> <span style="color: #4271ae;">AttributeError</span>:
  <span style="color: #eab700;">m</span> = <span style="color: #4271ae;">None</span>
  </pre>
</div>

<p>
  This should fix that problem.
</p>
  ]]></description>
</item>
<item>
  <title>Using a Raspberry Pi as a Time Capsule for Mountain Lion</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-07-29-using-raspberry-pi-as-time-machine.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-07-29-using-raspberry-pi-as-time-machine.html"</guid>
  <pubDate>Sun, 29 Jul 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  A while ago, I bought a Time Capsule to take care of my backups. I can&rsquo;t say it has been smooth sailing. Every now and then, the Time Capsule would claim that the backup did fail. Sometimes a reboot would help, sometimes not. Sometimes <code>hdiutil</code> would be able to salvage the backups, sometimes not. Sometimes, the backup disk image would simply be corrupted and the only option would be to delete it and start over.
</p>

<p>
  This might be bad luck or it might be due to a defective Time Capsule or it might be due to my computer. I have no idea. But the thing is, if I have to hack on my backup system anyway, lets do it in style, at least. So here goes:
</p>
  ]]></description>
</item>
<item>
  <title>How Apple is Failing me</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-07-09-apple-is-failing-me.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-07-09-apple-is-failing-me.html"</guid>
  <pubDate>Mon, 09 Jul 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  I bought my first Apple computer in 2007 after a long time of gaming on Windows and a few years of Linux. In the beginning, I was just amazed at the consistency, practicality and sanity of the whole experience. I think I had a bad case of tinkeritis and neophilia in my Linux days, so this was probably to be expected.
</p>

<p>
  Later, I marveled at the level of polish in the third party software ecosystem around Macs. Then I was just glad to have a slick GUI with actual Unix underpinnings. For reference, this happened in the time span from OS X 10.5 Leopard until 10.7 Lion. However, in that same time frame, I also noticed a gradual increase in problems. The computer seems to crash slightly more often, programs seemed to become more buggy, behavior less logical. At first, I marked this up as mostly a matter of my own increasing knowledge of the system, but as time went on, I became more and more convinced that it was actually the system getting worse, not myself becoming more sensitive.
</p>

<p>
  So here are some of those problems:
</p>
  ]]></description>
</item>
<item>
  <title>Blogging with Pelican (and not Octopress)</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-07-18-blogging-with-pelican.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-07-18-blogging-with-pelican.html"</guid>
  <pubDate>Wed, 18 Jul 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  For a while now, I have been moving more and more services I use off Google. The reasons for that are manyfold, and few of them have anything to do with Google being evil or not--just to get that out of the way.
</p>

<p>
  One of the last holdouts has been <a href="http://daskrachen.com">my neglected Blogspot blog</a>. And one of the reasons for it being neglected is that it was hosted on Blogspot. Now don&rsquo;t get me wrong here, Blogspot is a terriffic blogging platform. You have this very nice nearly-WYSIWYG text editor right in your browser, you can upload images, you can publish instantly to your blog... Basically everything is taken care of for you conveniently right there in your browser. Google Style.
</p>

<p>
  Its just that I don&rsquo;t like to work that way. I like plain text. I like typing stuff into a plain text editor. I like to be in control. And Blogspot might be convenient, but it did not make me feel like I was in control. In fact, I lost at least one article to Blogspot for unknown reasons.
</p>

<p>
  Enter static site generators. The idea is that instead of writing rich text into some website, you create you content however you want on your own computer, then use a static generator which converts it into a set of static HTML pages and upload those to your website. Now all of the creation process is happening on your computer. You are in control. Probably the most popular program to do that is <a href="https://github.com/mojombo/jekyll">Jekyll</a>.
</p>

<p>
  The second part of the equation is some kind of publishing platform. With these static site generators, really any web server does that trick. Just push your generated HTML files to the server and be done with it. Even cooler is Github. Using <a href="http://pages.github.com/">Github pages</a>, you can use your existing Github account and infrastructure to publish your blog just by pushing the HTML to Github. This is seriously cool!
</p>

<p>
  So, I set out and tried <a href="http://octopress.org/">Octopress</a>, which combines these two things into a nice blogging platform. Honestly though, I don&rsquo;t know much Ruby and all that <code>rake</code> workflow did not make me much more comfortable than pushing stuff into Blogspot.
</p>

<p>
  Hence, I looked for alternatives. What I ended up with is <a href="http://pelican.notmyidea.org/">Pelican</a>, a very simple static site generator written in Python. Finally, this is a codebase that is easy enough for me to understand and modify. If there is any trouble with my blog, I will be (and have been) able to just look at the source code and figure out what is going wrong. I like this!
</p>

<p>
  To publish a new blog post, I will start by writing the post in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> (a format I understand), process it using the very simple command line <code>pelican -s my_config_file.py posts/</code>, and push the result to GitHub. Easy as pie. And I feel like I am in control again!
</p>

<p>
  Actually, if this is just a bit too technical for you, check out <a href="http://calepin.co/">Calepin</a> instead. It uses the very same Pelican engine, but instead of fiddling with Git, you just put your markdown files into your Dropbox, and--poof--you magically have a Blog!
</p>

<p>
  If you want to see my blog as a repo on Github, just <a href="https://github.com/bastibe/bastibe.github.com/">go have a look</a> (the <code>master</code> branch contains the HTML, the <code>source</code> branch contains the configuration and Markdown).
</p>
  ]]></description>
</item>
<item>
  <title>How to get solarized syntax highlighting on your blog</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-07-15-solarized-for-pygments.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-07-15-solarized-for-pygments.html"</guid>
  <pubDate>Sun, 15 Jul 2012 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Yesterday, I spent a few hours creating a solarized like CSS file for use with my new blogging tool. You could just scrape the settings from this very website, but for convenience, here they are:
</p>

<pre class="example">
  /* Text */
  .codehilite .t   { color: #586e75 }

  /* Whitespace */
  .codehilite .w   { color: #073642 }

  /* Error */
  .codehilite .err { color: #cb4b16; }

  /* Keyword */
  .codehilite .k   { color: #859900 }
  .codehilite .kc  { color: #2aa198 } /* Keyword.Constant */
  .codehilite .kd  { color: #268bd2 } /* Keyword.Declaration */
  .codehilite .kn  { color: #b58900 } /* Keyword.Namespace */
  .codehilite .kp  { color: #859900 } /* Keyword.Pseudo */
  .codehilite .kr  { color: #073642 } /* Keyword.Reserved */
  .codehilite .kt  { color: #b58900 } /* Keyword.Type */

  /* Name */
  .codehilite .n   { color: #586e75 }
  .codehilite .na  { color: #2aa198 } /* Name.Attribute */
  .codehilite .nb  { color: #268bd2 } /* Name.Builtin */
  .codehilite .nc  { color: #268bd2 } /* Name.Class */
  .codehilite .ne  { color: #cb4b16 } /* Name.Error */
  .codehilite .no  { color: #2aa198 } /* Name.Constant */
  .codehilite .nd  { color: #2aa198 } /* Name.Decorator */
  .codehilite .ni  { color: #2aa198; font-weight: bold } /* Name.Entity */
  .codehilite .nf  { color: #268bd2 } /* Name.Function */
  .codehilite .nn  { color: #586e75; } /* Name.Namespace */
  .codehilite .nt  { color: #2aa198; font-weight: bold } /* Name.Tag */
  .codehilite .nv  { color: #cb4b16 } /* Name.Variable */

  /* Builtin */
  .codehilite .b   { color: #859900 }
  .codehilite .bp  { color: #586e75 } /* Name.Builtin.Pseudo */

  /* Variable */
  .codehilite .v   { color: #586e75 }
  .codehilite .vc  { color: #586e75 } /* Name.Variable.Class */
  .codehilite .vg  { color: #268bd2 } /* Name.Variable.Global */
  .codehilite .vi  { color: #268bd2 } /* Name.Variable.Instance */

  /* Literal */

  /* Literal.Number */
  .codehilite .m { color: #268bd2 } /* Literal.Number */
  .codehilite .mf { color: #268bd2 } /* Literal.Number.Float */
  .codehilite .mh { color: #268bd2 } /* Literal.Number.Hex */
  .codehilite .mi { color: #268bd2 } /* Literal.Number.Integer */
  .codehilite .mo { color: #268bd2 } /* Literal.Number.Oct */

  /* Literal.String */
  .codehilite .s { color: #2aa198 }
  .codehilite .sb { color: #2aa198 } /* Literal.String.Backtick */
  .codehilite .sc { color: #2aa198 } /* Literal.String.Char */
  .codehilite .sd { color: #2aa198 } /* Literal.String.Doc */
  .codehilite .s2 { color: #2aa198 } /* Literal.String.Double */
  .codehilite .se { color: #cb4b16 } /* Literal.String.Escape */
  .codehilite .sh { color: #2aa198 } /* Literal.String.Heredoc */
  .codehilite .si { color: #cb4b16 } /* Literal.String.Interpol */
  .codehilite .sx { color: #2aa198 } /* Literal.String.Other */
  .codehilite .sr { color: #cb4b16 } /* Literal.String.Regex */
  .codehilite .s1 { color: #2aa198 } /* Literal.String.Single */
  .codehilite .ss { color: #cb4b16 } /* Literal.String.Symbol */

  /* Literal.Integer */
  .codehilite .il { color: #268bd2 } /* Literal.Number.Integer.Long */

  /* Operator */
  .codehilite .o  { color: #586e75 }
  .codehilite .ow { color: #859900 } /* Operator.Word */

  /* Punctuation */
  .codehilite .p  { color: #586e75 }

  /* Comment */
  .codehilite .c { color: #93a1a1; font-style: italic }
  .codehilite .cm { color: #93a1a1; } /* Comment.Multiline */
  .codehilite .cp { color: #93a1a1 } /* Comment.Preproc */
  .codehilite .c1 { color: #93a1a1; } /* Comment.Single */
  .codehilite .cs { color: #93a1a1; } /* Comment.Special */

  .codehilite .hll { background-color: #dc322f }

  /* Generic */
  .codehilite .g { color: #586e75 }
  .codehilite .gd { color: #586e75 } /* Generic.Deleted */
  .codehilite .ge { font-style: italic } /* Generic.Emph */
  .codehilite .gr { color: #586e75 } /* Generic.Error */
  .codehilite .gh { color: #586e75; font-weight: bold } /* Generic.Heading */
  .codehilite .gi { color: #586e75 } /* Generic.Inserted */
  .codehilite .go { color: #586e75 } /* Generic.Output */
  .codehilite .gp { color: #586e75 } /* Generic.Prompt */
  .codehilite .gs { font-weight: 586e75 } /* Generic.Strong */
  .codehilite .gu { color: #586e75; font-weight: bold } /* Generic.Subheading */
  .codehilite .gt { color: #586e75 } /* Generic.Traceback */
</pre>

<pre class="example">
  code, pre {
  background: #fdf6e3;
  -webkit-box-shadow: inset 0 0 2px #000000;
  -moz-box-shadow: inset 0 0 2px #000000;
  box-shadow: inset 0 0 2px #000000;
  color: #586e75;
  margin-left: 0px;
  font-family: 'Droid Sans Mono', monospace;
  padding: 2px;
  -webkit-border-radius: 4px;
  -moz-border-radius: 4px;
  border-radius: 4px;
  -moz-background-clip: padding;
  -webkit-background-clip: padding-box;
  background-clip: padding-box;
  }
</pre>

<p>
  Keep in mind though that I have no formal knowledge of CSS whatsoever beyond what I could gather from these very files.
</p>
]]></description>
</item>
<item>
  <title>Hoe to gem install rlua on OSX/homebrew</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-02-22-how-to-gem-install-rlua-on-osx-slash-homebrew.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-02-22-how-to-gem-install-rlua-on-osx-slash-homebrew.html"</guid>
  <pubDate>Wed, 22 Feb 2012 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  If you want to use rlua, you need to have Lua installed. However, OSX does not come with Lua preinstalled, so you install it using
</p>

<p>
  #+begin src sh
  brew install lua
  #end<sub>src</sub>
</p>

<p>
  Oh, would it be nice if everyone agreed on how to install stuff like this. Case in point, homebrew installs liblua (quite reasonable) in <code>/usr/local/lib/liblua.[5.1[.4]].dylib</code>
</p>

<p>
  rlua however expects it to be called <code>liblua5.1.dylib</code> (notice the missing <code>.</code>).
</p>

<p>
  Similarly, the headers are installed plainly into <code>/usr/local/include</code>, whereas rlua expects them to be in a folder called <code>lua5.1</code>.
</p>

<p>
  Hence, here is how you get rlua to install:
</p>

<div class="org-src-container">

  <pre class="src src-sh">ln -s /usr/local/Cellar/lua/5.1.4/lib/liblua.5.1.4.dylib /usr/local/lib/liblua5.1.dylib
  ln -s /usr/local/Cellar/lua/5.1.4/include/ /usr/local/include/lua5.1
  </pre>
</div>

<p>
  Not exactly a beautiful solution, but it works.
</p>
  ]]></description>
</item>
<item>
  <title>Text Editors</title>
  <link>http://bastibe.de/"http://bastibe.de/2012-02-03-text-editors.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2012-02-03-text-editors.html"</guid>
  <pubDate>Fri, 03 Feb 2012 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  As far as I can tell, there has been a resurgence of development in the landscape of text editors of late. Only a few years ago, the text editing scene one the Mac seemed to be dominated by
</p>

<ul class="org-ul">
  <li>Crazy unix farts using Vim or Emacs
  </li>
  <li>BBEdit users
  </li>
  <li>Textmate users
  </li>
</ul>

<p>
  During a very short period of time though, a raft of new text editors became available. Sublime Text in particular has been getting a lot of attention and rave reviews by many people. To me, this warrants another look at what these new (and old) text editors are offering.
</p>
  ]]></description>
</item>
<item>
  <title>How to make Tagbar work with Objective-C</title>
  <link>http://bastibe.de/"http://bastibe.de/2011-12-04-how-to-make-tagbar-work-with-objective-c.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2011-12-04-how-to-make-tagbar-work-with-objective-c.html"</guid>
  <pubDate>Sun, 04 Dec 2011 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  For the longest time, ctags did not support Objective-C. Without tags, many of the cool programming-related features of Vim simply didn&rsquo;t work. (There are ways to coax other programs to output tags, but this is usually painful)
</p>

<p>
  Recently however, ctags finally gained support for Objective-C! Huzzah!
  As of today, Objective-C support is not in the stable branch yet, but thanks to the magic of homebrew, an Obj-C ready ctags is only a <code>brew install ctags --HEAD</code> away!
</p>

<p>
  With that, tag navigation in Vim works for Objective-C. Awesome!
  However, Tagbar does not work yet. There used to be <a href="http://stackoverflow.com/a/5790832/1034">a workaround</a> that apparently worked for some people, but it did not work for me.
  Things like this drive me nuts. I can see that tags are being generated, but Tagbar won&rsquo;t show them. What is going wrong?
</p>

<p>
  Some investigation proved: There is simply no template in Tagbar for Objective-C! Luckily, that can be fixed quite easily: Simply put this code in your .vimrc:
</p>

<pre class="example">
  " add a definition for Objective-C to tagbar
  let g:tagbar_type_objc = {
  \ 'ctagstype' : 'ObjectiveC',
  \ 'kinds'     : [
  \ 'i:interface',
  \ 'I:implementation',
  \ 'p:Protocol',
  \ 'm:Object_method',
  \ 'c:Class_method',
  \ 'v:Global_variable',
  \ 'F:Object field',
  \ 'f:function',
  \ 'p:property',
  \ 't:type_alias',
  \ 's:type_structure',
  \ 'e:enumeration',
  \ 'M:preprocessor_macro',
  \ ],
  \ 'sro'        : ' ',
  \ 'kind2scope' : {
  \ 'i' : 'interface',
  \ 'I' : 'implementation',
  \ 'p' : 'Protocol',
  \ 's' : 'type_structure',
  \ 'e' : 'enumeration'
  \ },
  \ 'scope2kind' : {
  \ 'interface'      : 'i',
  \ 'implementation' : 'I',
  \ 'Protocol'       : 'p',
  \ 'type_structure' : 's',
  \ 'enumeration'    : 'e'
  \ }
  \ }
</pre>

<p>
  With that, Tagbar should work. Admittedly, it won&rsquo;t work perfectly yet. Class definitions will show up in addition to their contents and the contents of all categories will go into the same list. Also, you won&rsquo;t get much more than a flat list of functions with no way to distinguish between class methods and object methods. This can be confusing at times, but by and large, it does the job!
</p>


<p>
  Happy Vimming!
</p>
  ]]></description>
</item>
<item>
  <title>Compiling Scipy and Matplotlib again</title>
  <link>http://bastibe.de/"http://bastibe.de/2011-10-13-compiling-scipy-and-matplotlib-again.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2011-10-13-compiling-scipy-and-matplotlib-again.html"</guid>
  <pubDate>Thu, 13 Oct 2011 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Well, it&rsquo;s compile time again. Once again, I need to install scipy and matplotlib using homebrew and pip on Lion.
  It seems things have improved since I tried to compile last time! Well, it still does not work out of the box, but at least now it can be done without compiling by hand:
  (remember to <code>brew install pkg-config gfortran</code> first)
</p>

<div class="org-src-container">

  <pre class="src src-sh">pip install -e git+https://github.com/scipy/scipy#<span style="color: #eab700;">egg</span>=scipy-dev
  pip install -e git+https://github.com/matplotlib/matplotlib#<span style="color: #eab700;">egg</span>=matplotlib
  </pre>
</div>

<p>
  I must say, this is still a mess. But at least, it is getting less bad.
</p>
  ]]></description>
</item>
<item>
  <title>Adobe AIR Application Crashes</title>
  <link>http://bastibe.de/"http://bastibe.de/2011-09-03-adobe-air-application-crashes.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2011-09-03-adobe-air-application-crashes.html"</guid>
  <pubDate>Sat, 03 Sep 2011 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Adobe, oh Adobe. Why?
</p>

<p>
  Your updater pops open. Adobe AIR 2.5, if I remember correctly. It runs, and after that, all AIR applications stop working. They boot, then crash and barf up a crash report.
</p>

<p>
  Turns out, this is a problem with case sensitive file systems. If your file system is not case sensitive, you are experiencing some other problem and this fix is not for you.
</p>

<p>
  See, Adobe has this library called <code>WebKit.dylib</code>. However, their code actually looks for <code>Webkit.dylib</code> (note the capitalisation of the K). Well, spelling is hard, I presume.
</p>

<p>
  At least this is an error that can easily be fixed. Fire up your terminal, type
</p>

<div class="org-src-container">

  <pre class="src src-sh"><span style="color: #8959a8;">cd</span> /Library/Frameworks/Adobe<span style="color: #3e999f;">\ </span>AIR.framework/Version/Current/Resources/
  sudo ln -s WebKit.dylib Webkit.dylib
  </pre>
</div>

<p>
  Then enter your password and your AIR applications should work again.
</p>

<p>
  Dear Adobe, is it too much to ask to pretty please make your software work on a case sensitive file system? Spelling is primary school stuff. It is really not that hard!
</p>
  ]]></description>
</item>
<item>
  <title>Compiling Scipy and Matplotlib using pip on Lion</title>
  <link>http://bastibe.de/"http://bastibe.de/2011-08-01-compiling-scipy-and-matplotlib-using-pip-on-lion.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2011-08-01-compiling-scipy-and-matplotlib-using-pip-on-lion.html"</guid>
  <pubDate>Mon, 01 Aug 2011 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  So I upgraded to Lion. Predictably, some things went wrong. This time, the main thing that bit me was that for some reason, <code>pip</code> stopped working. After a bit of messing around with <code>brew</code>, <code>pip</code> and <code>easy_install</code>, I found out it was almost entirely my own fault. I messed up my <code>PATH</code>.
</p>

<p>
  In the meantime, I had uninstalled all of <code>brew</code>&lsquo;s Python, so I had to reinstall. For me, that entails Python, Numpy, Scipy and Matplotlib. Only this time, Scipy would not build. Some obscure error in some <code>veclib_cabi_c.c</code> would report errors. A quick <a href="http://mail.scipy.org/pipermail/scipy-user/2009-June/021383.html">round of googling</a> reveals:
</p>

<p>
  In order to get Scipy to compile, you need to insert <code>#include &lt;complex.h&gt;</code> in
</p>

<div class="org-src-container">

  <pre class="src src-sh">./scipy/lib/blas/fblaswrap_veclib_c.c.src
  ./scipy/linalg/src/fblaswrap_veclib_c.c
  ./scipy/sparse/linalg/eigen/arpack/ARPACK/FWRAPPERS/veclib_cabi_c.c
  </pre>
</div>

<p>
  That done, Scipy compiles perfectly fine.
</p>

<p>
  But, that is not enough yet. As <a href="http://jholewinski.wordpress.com/2011/07/21/installing-matplotlib-on-os-x-10-7-with-homebrew/">this blogpost</a> outlines, Matplotlib is not currently compatible with <code>libpng</code> 1.5, which ships with Lion. Fortunately, this is already fixed in the most recent source on the Matplotlib repo, so you just have to checkout that:
</p>

<div class="org-src-container">

  <pre class="src src-sh">pip install -e git+https://github.com/matplotlib/matplotlib.git#<span style="color: #eab700;">egg</span>=matplotlib
  </pre>
</div>

<p>
  By doing that, Matplotlib should install just fine.
</p>

<p>
  Seriously though, these PyPi repos are in a very sorry state. Every time I install one of these packages, I have to jump through hoops and spend hours debugging packages that really should work right out of the box. After all, <code>brew</code>, <code>rvm</code> and <code>gem</code> can do it just fine. Why is <code>pip</code> such a horrible mess?
</p>
  ]]></description>
</item>
<item>
  <title>Installing Pygame using Hombrew</title>
  <link>http://bastibe.de/"http://bastibe.de/2011-03-04-installing-pygame-using-homebrew.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2011-03-04-installing-pygame-using-homebrew.html"</guid>
  <pubDate>Fri, 04 Mar 2011 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  So I want to do audio development on the Mac without using Matlab. An alternative to Matlab is Python, or rather, <a href="http://www.daskrachen.com/2011/02/installing-pythonnumpyscipymatplotlib.html">Numpy, Scipy and Matplotlib</a>. They are awesome for working with audio data. What they don&rsquo;t do however is playing back audio. There are several packages out there that would afford audio playback. If you are serious about this though, you not only want audio playback, you want asynchronous audio playback. That is, you want to send some audio data to the sound card and continue with your program without waiting for the audio to finish playing. This allows continuous audio playback of computer-generated sound.
</p>

<p>
  <a href="http://www.pygame.org/news.html">Pygame</a> is one package that allows this. (I will submit a patch to <a href="http://people.csail.mit.edu/hubert/pyaudio/">Pyaudio</a> soon that will enable it there, too). There are pre-built binaries on the Pygame website that you can install easily. But then there would be no easy way to uninstall them, so what I would rather want is to install Pygame using package managers that allow easy updating and uninstallation. My tool of choice on the Mac is of course <a href="https://github.com/mxcl/homebrew/">Homebrew</a>.
</p>

<p>
  Note that although I am mostly interested in audio playback, this post will detail the installation of all modules of Pygame, not just <code>pygame.mixer</code>.
</p>

<p>
  Homebrew won&rsquo;t install Pygame, but it will install all the prerequisites for Pygame. So, let&rsquo;s do that.
</p>

<pre class="example">
  brew install sdl, sdl_mixer, sdl_ttf, libpng, jpeg, sdl_image, portmidi
</pre>

<p>
  This will install most packages for you. Note that <code>libpng</code> is also available as a system library, so it is installed <code>keg_only</code>, that is, without linking it in your path. We will need to compile against it though, so the next step is
</p>

<pre class="example">
  brew link libpng
</pre>

<p>
  Now there is still one package missing, <code>smpeg</code>. Sadly, <code>smpeg</code> does not install its headers, so you can&rsquo;t compile against it. To fix that, type
</p>

<pre class="example">
  brew edit smpeg
</pre>

<p>
  and add the following line just above the two end at the end of the file
</p>

<pre class="example">
  include.install Dir["*.h"]
</pre>

<p>
  Then save the file. (I submitted a bug to have this fixed, so you might not need to do this when you read this). Now you can install <code>smpeg</code> with the usual
</p>

<pre class="example">
  brew install smpeg
</pre>

<p>
  and you will get the headers, too. Isn&rsquo;t Homebrew great?
</p>

<p>
  Now that all the prerequisites are met, lets look at Pygame itself. This is rather more difficult, as it will not build properly against Homebrew libraries on its own. First, download the source package of Pygame from the [official website](<a href="http://www.pygame.org/download.shtml">http://www.pygame.org/download.shtml</a>). Unpack it to some directory.
</p>

<p>
  Now open a terminal and navigate to that directory. Me, I like [iTerm](<a href="http://iterm.sourceforge.net/">http://iterm.sourceforge.net/</a>), but Terminal.app will do just fine, too. In there, run <code>python config.py</code> to create an initial setup file.
</p>

<p>
  At this point, the setup file is mostly useless since <code>config.py</code> failed to find any homebrew-installed library. It is also strangely garbled, so there is some manual labor to do. Open the file <code>Setup</code> (no extension) in your favourite text editor. After the first comment block, you will see a line that looks like this
</p>

<pre class="example">
  SDL = -I/NEED_INC_PATH_FIX -L/NEED_LIB_PATH_FIX -lSDL
</pre>

<p>
  Obviously, this is lacking the paths to the SDL library. If you installed Homebrew to its default directory, this will be in <code>/usr/local…</code>. Hence, change this line to
</p>

<pre class="example">
  SDL = -I/usr/local/include/SDL -L/usr/local/lib -lSDL
</pre>

<p>
  The next lines are strangely garbled. They say, for example
</p>

<pre class="example">
  FONT = -lS -lD -lL -l_ -lt -lt -lf
</pre>

<p>
  Where they actually should say
</p>

<pre class="example">
  FONT = -lSDL_ttf
</pre>

<p>
  Instead of having one <code>-l</code> and then the library name <code>SDL_ttf</code>, they put <code>-l</code> in front of every single letter of the name. This is strange, and certainly wrong. So, correct it for <code>FONT</code>, <code>IMAGE</code>, <code>MIXER</code> and <code>SMPEG</code>.
</p>

<p>
  Note that I did not tell you to do this for <code>PORTTIME</code>, too. Actually, <code>PORTTIME</code> is already correctly linked in <code>PORTMIDI</code>, so you don&rsquo;t need that at all any more. Just delete or comment the <code>PORTTIME</code> line.
</p>

<p>
  Now that all the dependencies are corrected, lets enable the features. A few lines further down, there will be a block of lines, where most lines begin with a <code>#</code> except for the ones beginning with <code>_numericsurfarray…</code> and <code>_camera…</code>, These are the different features of Pygame: The ones with the <code>#</code> are disabled, the other two are enabled.
</p>

<p>
  With all the stuff we installed earlier, you can now enable all features (remove the <code>#</code> in front of <code>imageext…</code>, <code>font…</code>, <code>mixer…</code>, <code>mixer_music…</code>, <code>_minericsndarray…</code>, <code>movie…</code>, <code>scrap…</code> and <code>pypm…</code>).
</p>

<p>
  Remember we disabled <code>PORTTIME</code> a while ago? Right, so we have to remove that dependency: In the line starting with <code>pypm…</code>, delete the part that says <code>$(PORTTIME)</code>. Great. That was easy, right? Now save that file and go back to the Terminal.
</p>

<p>
  We are now going to compile and install Pygame. The nice thing is, even though we are installing it manually, it will go in the right directories and it will be registered with <code>pip</code> or <code>easy_install</code>, so you can just invoke them if you want to uninstall it later by typing <code>pip uninstall pygame</code>. This is something I love about Python!
</p>

<p>
  Alright, now without further ado, install Pygame by typing
</p>

<pre class="example">
  python setup.py install
</pre>

<p>
  Great! That&rsquo;s it! Everything should work now!
</p>
]]></description>
</item>
<item>
  <title>Installing Python/Numpy/Scipy/Matplotlib on OSX</title>
  <link>http://bastibe.de/"http://bastibe.de/2011-02-03-installing-python-slash-numpy-slash-scipy-slash-matplotlib-on-osx.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2011-02-03-installing-python-slash-numpy-slash-scipy-slash-matplotlib-on-osx.html"</guid>
  <pubDate>Thu, 03 Feb 2011 00:00:00 +0100</pubDate>

  <description><![CDATA[<p>
  For numerical analysis and signal processing prototyping, you would use <a href="http://www.mathworks.com/products/matlab/">Matlab</a>. However, Matlab has some downsides that might make it unsuitable for your project. It might be too expensive. You might be a snobbish programmer that can&rsquo;t stand less-than-elegant programming languages. I certainly am.
</p>

<p>
  So, you look for alternatives. You could take <a href="http://www.gnu.org/software/octave/">Octave</a>, which is free, but that would not solve that ugly-code issue. You could take any scripting language you fancy, but Ruby, Perl and Python are too slow to do serious number crunching.
</p>

<p>
  Then, you stumble upon that Python package called <a href="http://numpy.scipy.org/">Numpy</a>, which seems to be nearly as fast as Matlab when it comes to matrix processing and linear algebra. You then discover <a href="http://www.scipy.org/">SciPy</a>, which would add all that signal processing prowess of Matlab (do quick transformations, random numbers, statistics) to your toolbox. Last but not least, you need plotting. That would be <a href="http://matplotlib.sourceforge.net/">Matplotlib</a> then, which provides quick plotting facilities in Python.
</p>

<p>
  And the best thing is, these three systems work really well together. They seem to be the perfect replacement for Matlab that could even be superiour to it in many regards.
</p>

<p>
  Next up, you need to install all that stuff. If you are like me, you naturally want to do all that on a Mac. Also, you kind of dislike all these installer-thingies, which install stuff to unknown places and are nigh impossible to uninstall or update cleanly. Even though, you could of course just go to the individual websites, download Python, Numpy, SciPy and Matplotlib, run them installers, and be done. You would save yourself a lot of trouble that way.
</p>

<p>
  But since you allegedly are like me, you instead fire up <a href="http://mxcl.github.com/homebrew"><code>brew</code></a> and try to install all that stuff using that. Again, you could use <a href="http://www.macports.org/">MacPorts</a> or <a href="http://www.finkproject.org/">Fink</a> instead, but you probably had some bad experiences with them and you generally love the hackishness of Homebrew, so this is your natural first try.
</p>

<p>
  So you set about this, you believe in packet managers and trust them to take care of every obstacle that might be lying in your way. First of all, install the latest developer tools from <a href="http://developer.apple.com/">developer.apple.com</a>. You might need to register (for free) to get them. Also, you need to install <a href="http://mxcl.github.com/homebrew">Homebrew</a>.
</p>

<p>
  To cut this short, here is what you need to get that Python running:
</p>

<div class="org-src-container">

  <pre class="src src-sh">brew install python
  </pre>
</div>

<p>
  This one should be obvious. At the time of writing, it will install Python 2.7.1. You could take Python 3, but matplotlib is not compatible to it, so you kind of have to stick with 2.7.1 instead.
</p>

<p>
  You also need to put <code>/usr/local/bin</code> and <code>/usr/local/sbin</code> in the beginning of your path to make sure the new Python gets loaded instead of the pre-installed one. You do that by writing
</p>

<div class="org-src-container">

  <pre class="src src-sh"><span style="color: #8959a8;">export</span> <span style="color: #eab700;">PATH</span>=/usr/local/bin:/usr/local/sbin:$<span style="color: #eab700;">PATH</span>
  </pre>
</div>

<p>
  in your <code>\~/.bash_profile</code>. (Create it if its not there--it is just a simple text file).
</p>

<p>
  Now, if you type <code>python --version</code>, you should get <code>Python 2.7.1</code> as a response.
</p>

<p>
  Alright, next up, install the python package manager:
</p>

<div class="org-src-container">

  <pre class="src src-sh">brew install distribute
  brew install pip
  </pre>
</div>

<p>
  This will come preconfigured for your newly installed Python. In an ideal world, this should be all. The world being as it is, the pip package of Matplotlib is severely broken and has one other unstated dependency:
</p>

<div class="org-src-container">

  <pre class="src src-sh">brew install pkg-config
  </pre>
</div>

<p>
  Also, SciPy is using some FORTRAN sources, so you need a fortran compiler:
</p>

<div class="org-src-container">

  <pre class="src src-sh">brew install gfortran
  </pre>
</div>

<p>
  Alright. That was enough. Now on to pip. With all these dependencies cleared, pip should be able to download Numpy and Scipy without trouble:
</p>

<div class="org-src-container">

  <pre class="src src-sh">pip install numpy
  pip install scipy
  </pre>
</div>

<p>
  Matplotlib, on the other hand, is more difficult to install. You see, pip is looking at the Python package repository <a href="http://pypi.python.org/">PyPi</a> for each package. PyPi then provides a URL. Pip then scans that website for links to suitable package files. But, <a href="http://sourceforge.net/">Sourceforge</a> changed its links a while ago, so pip gets confused and will download an outdated version. Sourceforge says, its new links are way better and no way we will change them back; Pip says, well, if Sourceforge can&rsquo;t provide proper links, that&rsquo;s not our problem. Oh My. Silly children.
</p>

<p>
  So we have to do this manually:
</p>

<div class="org-src-container">

  <pre class="src src-sh">pip install -f http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-1.0.1/matplotlib-1.0.1.tar.gz matplotlib
  </pre>
</div>

<p>
  That URL comes straight from Sourceforge. Look for the latest version of Matplotlib, search for the download link to the source distribution (<code>*.tar.gz</code>), copy that link and strip any trailing &lsquo;/download&rsquo;.
</p>

<p>
  UPDATE:
</p>

<p>
  It seems the matplotlib package was updated in the meantime, so you can just run <code>pip install matplotlib</code> now.
</p>

<p>
  This should now download and install matplotlib.
</p>

<p>
  Thank you for reading.
</p>
]]></description>
</item>
<item>
  <title>The strangeness of widescreen displays on modern operating systems</title>
  <link>http://bastibe.de/"http://bastibe.de/2010-07-03-strangeness-of-widescreen-displays-in-modern-operating-systems.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2010-07-03-strangeness-of-widescreen-displays-in-modern-operating-systems.html"</guid>
  <pubDate>Sat, 03 Jul 2010 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  So today, pretty much everyone has widescreen displays. That is, displays that are far more wide than high. This was not always so. In ye olden days, computers were mainly used for displaying text, hence displays tended to have a similar layout as books or magazines. Today, they are more like movies (which might be worrying in itself).
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2010-03/aspect_ratios.png" alt="aspect_ratios.png" />
  </p>
</div>

<p>
  So todays displays are widescreen. To do all that modern stuff, like watch (widesreened) videos or multitask (display two windows side by side). However, this also means that vertical pixels are something of a scarcity. Especially on those small Laptop screens. In fact, the first Netbook screens were so tiny that many of Windows&rsquo; own windows could not be used at all since the lower parts did not fit on the screen. Raise your hand if Word 2007 leaves barely ten lines of visible text between all its blue-tinted UI-splendour on your laptop screen.
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2010-03/word_small.png" alt="word_small.png" />
  </p>
</div>

<p>
  This gets most straining when reading text. On the internet for example. There is practically no website at all that can be displayed in its entirity even on one of those full HD displays. Print-formatted documents are a similar matter. Actually, I find myself craving for pixels regularly. I even disable the bookmark bar in my browser to free those extra two lines of text. And I memorize keyboard shortcuts so I can hide toolbars. And I use Google Chrome instead of Firefox/Safari/Internet Explorer, not least of all since it has the smallest title bar and no bottom bar.
</p>

<p>
  Why, then, do modern operating systems still waste so much vertical space with that Dock/Taskbar? This is something I really don&rsquo;t get. Vertical space is such a scarcity, yet virtually every operating system choses to waste at least three lines of text with something that could easily go on the side of the display. Well, at least on Windows 7 and OSX that is something you can easily change.
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2010-03/dock_small.png" alt="dock_small.png" />
  </p>
</div>

<p>
  So if you are like me and appreciate every added line of text, do yourself a favour and put your Dock/Taskbar on the side. Really, this should be the default.
</p>
  ]]></description>
</item>
<item>
  <title>Gedanken zu User Interfaces</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-04-25-gedanken-zu-user-interfaces.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-04-25-gedanken-zu-user-interfaces.html"</guid>
  <pubDate>Sat, 25 Apr 2009 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Jeder kennt dieses Fenster:
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2009-04/delete_file.png" alt="delete_file.png" />
  </p>
</div>

<p>
  Dieses Fenster ist eine ziemlich schlechte Idee, denn jeder geübte Benutzer hat irgendwann gelernt, dass die Aktion &ldquo;Dateien Löschen&rdquo; aus drei Gesten besteht: (1) Dateien auswählen, (2) Die Löschaktion einleiten, (3) Den Löschdialog bestätigen. Leider hat man schon vor mehr als zwanzig Jahren nachgewiesen, dass solche zusammengehörigen Gesten von den Benutzern als einzelne &ldquo;Datei-Löschen&rdquo; Geste abstrahiert werden. Man kennt das vom Tippen: Man tippt Worte nicht, indem man einzelne Buchstaben aneinander hängt, sondern man tippt Worte fast immer am Stück; Hat man erst einmal angefangen, ein falsches Wort zu tippen, kann man damit nicht aufhören, bis das gesamte Wort getippt ist. Auf ähnliche Weise ist es dem Benutzer auch nicht möglich, auf den Löschdialog sinnvoll zu reagieren, da das Bestätigen der Sicherheitsfrage vollkommen automatisiert ist und daher nicht einmal verhindert werden könnte, wenn man wollte.
  Die Alternative ist ein alter Bekannter: Undo. Statt den Benutzer im Vorfeld zu fragen, ob er die Datei wirklich löschen möchte (was er durch Einleiten der Löschaktion bereits bejaht hat) gibt man ihm die Möglichkeit, die Aktion im Nachhinein wieder rückgängig zu machen. Das ist wesentlich effektiver und kommt ohne nerviger Dialogbox aus. Übrigens funktioniert Dateiaktion-Undo bereits heute in allen Betriebssystem außer Linux, jedoch ohne Menüicon und zumeist nur für die letzte Aktion. Wäre es nicht schön, wenn dies noch weiter ausgebaut würde?
</p>

<p>
  Noch ein gefährlicher Dialog:
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2009-04/ja_nein_abbrechen.png" alt="ja_nein_abbrechen.png" />
  </p>
</div>

<p>
  Das ist ebenfalls ein alter Bekannter, der immer dann erscheint, wenn man ein Programm schließen will, welches noch ungesichte Änderungen enthält: Abgesehen von dem offensichtlichen Problem, dass &ldquo;Abbrechen&rdquo; keinen wirklichen Sinn ergibt (Was abbrechen? Das Programm?) erfordert diese Frage jedes Mal das komplette Lesen der Meldung, bis man entschlüsseln kann, was &ldquo;Ja&rdquo; und &ldquo;Nein&rdquo; in diesem Kontext bedeuten. Um das noch einmal zu verdeutlichen, hier ein besonders schlimmes Beispiel:
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2009-04/bad_gui.png" alt="bad_gui.png" />
  </p>
</div>

<p>
  Es leuchtet ein, dass hier ein eindeutigerer Dialog wesentlich sinnvoller wäre, bei dem sofort ersichtlich ist, was welcher Button tun wird: (Merke: Auf Buttons gehören immer Verben)
</p>

<p>
  <img src="http://bastibe.de/static/2009-04/speichern_windows.png" alt="speichern_windows.png" />]]
  <img src="http://bastibe.de/static/2009-04/speichern_mac.png" alt="speichern_mac.png" />
</p>

<p>
  Aber warum eigentlich überhaupt speichern? Warum muss ich mich persönlich darum kümmern, meine Arbeit zu speichern? Ich dachte, ich würde mit einer Datei arbeiten -- aber wenn diese Datei nicht geändert wird, wenn ich nicht zuerst &ldquo;Speichern&rdquo; anklicke, habe ich wohl eigentlich doch nicht mit dieser Datei, sondern mit einer heimlichen Kopie gearbeitet. Wäre es nicht viel sinnvoller, immer automatisch zu speichern, und statt des &ldquo;Speichern"-Buttons eine &ldquo;auf Urzustand zurücksetzen"-Funktion bereitzustellen? Ich bin mir auf jeden Fall sicher, dass man den &ldquo;Undo all changes"-Button wesentlich seltener bräuchte als den &ldquo;Speichern"-Button, denn wenn der Benutzer nicht vorgehabt hätte, neuen Text in eine Datei zu schreiben, dann hätte er keinen neuen Text in die Datei geschrieben. Hat er dennoch &ldquo;versehentlich&rdquo; Text eingegeben, ist das ein klarer &ldquo;Benutzerfehler&rdquo;, also der logische Einsatzzweck für Undo.
</p>

<p>
  Das sind nur zwei Beispiele, wie man intelligente Undo-Mechanismen sinnvoll einsetzen könnte, um das Arbeiten am Computer angenehmer zu gestalten. Ich wünschte, mehr Leute würden sich mit diesen Dingen auseinander setzen...
</p>
]]></description>
</item>
<item>
  <title>Tagged File System</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-04-19-tagged-file-system.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-04-19-tagged-file-system.html"</guid>
  <pubDate>Sun, 19 Apr 2009 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Ein großes Problem bei der Benutzung von Computern ist, dass unerfahrene Benutzer oftmals kein Verständnis für Ordnerstrukturen haben. Das ist im Grunde auch klar, denn die Ordner-Metapher legt nahe, dass sich Ordner auf dem Computer wie echte Aktenordner verhalten, also dass jeder Ordner mehrere Dateien, jedoch nicht andere Ordner enthalten kann. Ganz im Gegenteil dazu basiert aber eine normale Verzeichnisstruktur meist aus vielen, tief ineinander geschachtelten Ordnern. Von einem Usablitity-Standpunkt aus ist daher der Begriff &ldquo;Ordner&rdquo; wahrscheinlich schlecht gewählt. Vielleicht würde es schon reichen, den älteren Namen &ldquo;Verzeichnis&rdquo; wieder einzuführen. (Dann bräuchten wir nur noch ein passendes Piktogramm für &ldquo;Verzeichnis&rdquo;...)
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2009-04/standard_finder_small.png" alt="standard_finder_small.png" />
  </p>
</div>

<p>
  Es wäre daher wünschenswert, eine einfacher zu verstehende Alternative zu Ordnerhierarchien zu haben. Die gibt es auch schon, in Form der bekannten Verzeichnisse &ldquo;Meine Bilder&rdquo;, &ldquo;Meine Dokumente&rdquo;, etc.
  Diese Ordner wollen den Benutzer mit einfachen Piktogrammen und klaren Namen dazu animieren, einen natürlichen Ort für seine Dateien zu wählen und so ein wenig Ordnung zu schaffen. Tatsächlich ist dieses Konzept einer Tag-Struktur schon relativ ähnlich, da auch hier nicht davon ausgegangen wird, dass sich der Benutzer selbst um eine tief geschachtelte Orderhierarchie kümmert, sondern nur wenige, einfach zu verstehende Markierungsmöglichkeiten (&ldquo;Bilder&rdquo;, &ldquo;Dokumente&rdquo;) geboten werden.
</p>

<p>
  Ein echtes Tag-basiertes System könnte vollkommen ohne Verzeichnisse auskommen, wobei man dann eben beim Speichern einer Datei nicht mehr aus einer hierarchischen Liste von Ordnern den Speicherort auswählen würde, sondern von einer flachen Liste von Tags. Die Usability-Kosten davon wären vernachlässigbar.
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2009-04/tagged_finder_small.png" alt="tagged_finder_small.png" />
  </p>
</div>

<p>
  Ähnlich würde das Finden von Dateien funktionieren: Statt eine hierarchische Liste von Ordnern nacheinander anzuklicken, würde man eine flache Liste von Tags nacheinander anklicken, jedoch mit dem Bonus, dass man die gesuchte Datei nicht erst bei Anklicken aller Tags, sondern mit großer Wahrscheinlichkeit schon nach ein oder zwei Tags gefunden hätte.
</p>

<p>
  Ein Problem würde jedoch mit Projekten entstehen, die aus mehreren Dateien bestehen. Hier müsste man sicher stellen, dass sie im Dateisystem nur als einzelne große Projektdatei auftauchen und nicht jede einzelne Unterdatei gelistet wird. Das ließe sich zum Beispiel durch &ldquo;Bundles&rdquo; lösen, wie sie heute schon in OSX vorkommen (Ordner mit definierter Namesendung und Inhalt werden wie Dateien behandelt) oder einfach durch einen speziellen Tag, der die einzelnen Dateien vor der normalen Suche versteckt.
  Dieses Konzept wird übrigens heute schon vielfach verwendet, so ist etwa eine aktuelle Word-Datei nur eine ZIP-Datei, die eine definierte Verzeichnisstruktur mit allen Bildern, dem Text (als XML), einer Vorschau-Grafik etc. enthält.
</p>


<div class="figure">
  <p><img src="http://bastibe.de/static/2009-04/bundles_small.png" alt="bundles_small.png" />
  </p>
</div>

<p>
  Ich glaube, dass man mit solch einem Tag-basierten Dateisystem deutlich einfacher arbeiten könnte als mit den heute üblichen Verzeichnisstrukturen. Tja, jetzt fehlt nur noch eine innovative Firma, die sich um die Umsetzung kümmert...
</p>
  ]]></description>
</item>
<item>
  <title>Es geht um Tabs</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-31-es-geht-um-tabs.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-31-es-geht-um-tabs.html"</guid>
  <pubDate>Tue, 31 Mar 2009 00:00:00 +0200</pubDate>

  <description><![CDATA[<p>
  Tabs sind kaputt. Tabs waren noch nie eine gute Idee. Tabs werden dafür benutzt, um in einem Programm mehrere Fensterflächen voll Inhalt in nur einem Fenster darzustellen. Speziell zu diesem Zweck entwarf man in grauer Vorzeit eine neue Klasse von Programmen namens Fenstermanager. Fenstermanager erlauben es, mehrere Fenster gleichzeitig darzustellen, gerne auch nebeneinander, hintereinander oder übereinander. Kennt jeder. Und Tabs sind eine Krücke, die genau dieses Prinzip unterlaufen, denn sie organisieren Fenster ineinander.
</p>

<p>
  Aber es ist ja nicht nur das. Wir kennen Tabs schon lange in ganz verschiedenen Formen:
</p>

<p>
  <img src="http://bastibe.de/static/2009-03/tabs_firefox_preferences.png" alt="tabs_firefox_preferences.png" />
  <img src="http://bastibe.de/static/2009-03/tabs_osx.png" alt="tabs_osx.png" />
  <img src="http://bastibe.de/static/2009-03/tabs_windows.png" alt="tabs_windows.png" />
</p>

<p>
  All diesen Formen gemein ist, dass sie wenigstens einen Rahmen bilden, der andeutet, welcher Teil des Fensters sich ändern wird, wenn man einen anderen Tab öffnet. Die Ausnahme: Browser.
</p>

<p>
  <img src="http://bastibe.de/static/2009-03/tabs_ie8.png" alt="tabs_ie8.png" />
  <img src="http://bastibe.de/static/2009-03/tabs_firefox.png" alt="tabs_firefox.png" />
</p>

<p>
  Wo hat ein Browser seine Tabs? zwischen Adressleiste und Webseiteninhalt. Bei Firefox (besondere Perversion) sind die Tabs sogar so dargestellt, als würden sie nur die Adresszeile ändern (oben befestigte Reiter), ganz im Gegensatz dazu ändern sie aber sowohl die Adresszeile als auch -viel wichtiger- den Webseiteninhalt. Wenn überhaupt, dann sollten sich die Tabs also am oberen Bildschirmrand befinden, so dass man mit ihnen wenigstens konsistent den kompletten Fensterinhalt ändert. Immerhin hier sieht man bereits Licht: Google Chrome und Safari 4 funktionieren bereits so:
</p>

<p>
  <img src="http://bastibe.de/static/2009-03/tabs_chrome.png" alt="tabs_chrome.png" />
  <img src="http://bastibe.de/static/2009-03/tabs_safari_windows.png" alt="tabs_safari_windows.png" />
  <img src="http://bastibe.de/static/2009-03/tabs_safari_osx.png" alt="tabs_safari_osx.png" />
</p>

<p>
  Die Lösung von Safari hat noch ein paar Probleme: Wo verschiebt man Tabs? (Ungeschickt: an dem kleinen Handle am rechten Tabgreifer-Rand), Wieso haben die Tabs keine Favicons? Aber nicht verzagen: Noch ist Safari 4 lediglich eine Beta. Gut hingegen fände ich es, wenn dieses Tabbed-Fenster-Interface nicht nur für Safari, sondern für jedes andere Programm auch verwendbar wäre, also als Feature des Fenstermanagers implementiert würde. Man müsste daran noch ein wenig feilen, aber es würde Einiges sehr viel übersichtlicher gestalten. Snow Leopard anyone?
</p>

<p>
  Weitere gute Ideen rund um Tabs, sortiert nach Browser:
</p>

<ul class="org-ul">
  <li><a href="http://www.microsoft.com/windows/internet-explorer/default.aspx">Microsoft Internet Explorer 8</a>
  <ul class="org-ul">
    <li>Tabs werden nach Farben sortiert, je nach dem von welchem Tab aus sie geöffnet wurden
    </li>
    <li>Im neuen Fenstermanager von Windows 7 werden alle Tabs als eigene Fenster aufgeführt
    </li>
    <li>Jeder Tab läuft in seinem eigenen Prozess. Bringt aber nix, weil wenn einer abstürzt nimmt er trotzdem den ganzen Browser mit. Ist aber auch noch nur Beta!
    </li>
  </ul>

  <div class="figure">
    <p><img src="http://bastibe.de/static/2009-03/tabs_ie8_goodness_small.png" alt="tabs_ie8_goodness_small.png" />
    </p>
  </div>
  </li>
  <li><a href="http://www.mozilla-europe.org/de/firefox/">Firefox 3</a> Preview
  <ul class="org-ul">
    <li>Tabs sollen über ein neuartiges Interface beim Wechsel als Miniaturen dargestellt werden, so dass man einfacher zwischen ihnen wechseln kann
    </li>
    <li>Viele andere nette Vorschläge rund um diese Idee gibts hier: <a href="http://www.azarask.in/blog/post/new-tab-iterations/">Aza Raskins Blog</a>
    </li>
  </ul>
  </li>
  <li><a href="http://www.apple.com/safari/">Safari 4</a>
  <ul class="org-ul">
    <li>Die Tableiste nimmt keinen eigenen Platz auf dem Bildschirm ein
    </li>
    <li>Tabs sind am richtigen Ort (oben)
    </li>
  </ul>
  </li>
  <li><a href="http://www.google.com/chrome">Google Chrome</a>
  <ul class="org-ul">
    <li>Tabs sind am richtigen Ort (oben) aber es gibt dennoch eine klassische Titelleiste des Fensters (im Gegensatz zu Safari 4)
    </li>
    <li>Jeder Tab läuft in einem eigenen Prozess, daher können einzelne Tabs abstürzen ohne den Browser mitzunehmen.
    </li>
    <li>Jeder Tab läuft in seiner eigenen Sandbox, was es Angreifern wesentlich erschwert, den Browser hochzunehmen.
    </li>
  </ul>

  <div class="figure">
    <p><img src="http://bastibe.de/static/2009-03/tabs_chrome_goodness.png" alt="tabs_chrome_goodness.png" />
    </p>
  </div>
  </li>
</ul>

<p>
  Fazit: Es gibt noch viel zu tun, aber anscheinend ergibt sich langsam aber sicher ein Konsens, dass etwas mit Tabs getan werden muss. Es bleibt spannend.
</p>
]]></description>
</item>
<item>
  <title>Mirrors Edge</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-29-mirrors-edge.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-29-mirrors-edge.html"</guid>
  <pubDate>Sun, 29 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/mirrors_edge.png" alt="mirrors_edge.png" />
  </p>
  </div>

  <p>
  Ich habe am Wochenende, wie in Twitter schon verkündet, Mirror’s Edge (durch-) gespielt. Ganz kurz: Mirror’s Edge ist ein Videospiel für PC/XBOX360/PS3, im Endeffekt ein Platformer aus der Ego-Perspektive, zwar mit der Möglichkeit, Waffen aufzunehmen, aber mit dem klaren Fokus auf Rennen, genauer: Parkours, dem modernen Hindernislauf, hier mit dem Extratwist: auf Hochhausdächern.
  </p>

  <p>
  Es wurde schon viel gesagt über dieses Spiel. Müde Story, schlechte Charactermodelle, schlechte Shooter-Elemente, unübersichtliche Atmosphäre, kurze Spieldauer, um nur einige der üblichen Kritikpunkte zu nennen.
  </p>


  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/mirrors_edge_jump.png" alt="mirrors_edge_jump.png" />
  </p>
  </div>

  <p>
  Ich sage: Alles Popauswurf. Was Mirror’s Edge versucht, ist die Direktheit und Intimität der Egoperspektive mit dem Flow und der Geschwindigkeit eines modernen Platformers zu verbinden. Faith, der Hauptcharakter ist eine kleine “Eurasierin” (Zitat der Entwickler), deren Eltern in einem Widerstandskampf… Bla, bla, bla.
  Es geht um Flow, es geht darum, mit blitzschnellen Reflexen und akrobatischem Geschick einen Weg über die Dächer einer Großstadt zu finden. Es geht darum, nicht stehen zu bleiben, nicht zu zögern. Es geht um Geschwindigkeit und Freiheit, über Straßenschluchten zu springen, zwischen Klimaanlagen und Baugerüsten zu sprinten und immer schneller, immer weiter, den Großstadtlärm hinter sich zu lassen. Nur begleitet von Faiths immer wieder ins Bild ragenden Armen und Beinen, ihrem schnellen Atem, dem Rhythmus ihrer Schritte. Und ja, man stirbt häufig, wenn man sich bei einem Sprung verschätzt oder es doch nicht schafft, den Jägern zu entkommen. Aber um so größer ist die Befriedigung einen komplizierten Run endlich zu schaffen und mit einem perfekten Sprung über eine Häuserschlucht die Polizei hinter sich zu lassen.
  </p>

  <p>
  Mirror’s Edge perfektioniert den Flow, das Gefühl der Freiheit und der Geschwindigkeit. Klar, dass da die Ego-Shooter-Mechanik auf der Strecke bleibt, aber Faith ist auch keine Kämpferin, sondern selbsterklärter Runner. Sicher, die Story ist ein wenig lahm, aber wir reden hier über ein Computerspiel: Die Story hat allein das Ziel, die einzelnen Schauplätze miteinander zu verbinden, und das gelingt ihr. Charakterentwicklung kennt das Spiel nicht, allein der Spieler wird besser. Und auch das ist gut so, denn in den späteren Leveln ist der Schwierigkeitsgrad nicht von schlechten Eltern. Aber Checkpoints sind häufig und fair verteilt, so dass dies selten ein Problem wird.
  </p>

  <p>
  Ach ja, und der Sound ist genial, selten habe ich mich so sehr in eine Spielfigur hineinversetzt gefühlt wie in Faith. Und die Grafik… Ich könnte hier viel schreiben; Ich glaube schlicht, dass die aktuelle Konsolengeneration im Grunde ein Niveau erreicht hat, auf dem weitere Verbesserungen keine große Rolle mehr spielen. Mirror’s Edge, mit seiner gleißend-Weiß-plus-Farbe Ästhetik zeigt hier eine Welt, wie man sie noch nie gesehen hat, in der Farbe nicht nur als Stilmittel, sondern auch als Wegweiser und tatsächlich Spielhilfe eingesetzt wird: Rot ist, wo es weiter geht. Diese Ästhetik ist schwer in Worte zu fassen und gibt dem Ganzen eine ganz eigene Freiheit, im starken Kontrast zum “realistisch”-Grau-Braun, dem sich so viele andere Spiele verschrieben haben.
  </p>

  <p>
  Und was bleibt unterm Strich? Ich sage: Das Spiel ist es Wert. Es mag seine Mängel haben, aber allein der Mut, einmal etwas Neues zu machen und nicht dem Einheitsbrei ins Land der Realo-Shooter und der digitalen Nebenjobs zu folgen ist der Beachtung Wert. Einmal nicht schießen zu müssen und stumpfen Missionen zu folgen, sondern in einem Spiel Freiheit zu finden, dass ist eine außergewöhnliche Erfahrung. Wer als Spieler etwas Erfrischung sucht, sollte es probieren. Ich finds geil!
  </p>


  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/mirrors_edge_faith.png" alt="mirrors_edge_faith.png" />
  </p>
  </div>
  ]]></description>
</item>
<item>
  <title>Synchronisieren von Google, Äpfeln, Fenstern und Telefonen</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-28-synchronisieren-von-google.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-28-synchronisieren-von-google.html"</guid>
  <pubDate>Sat, 28 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/cloud.jpg" alt="cloud.jpg" />
  </p>
  </div>

  <p>
  Ich hatte lange Zeit zwei Computer, einen Desktop und einen Laptop, jeweils mit verschiedenen Betriebssystemen und Datensätzen. Um dennoch immer mit den selben Daten arbeiten zu können, verwendete ich eine externe Festplatte. Obwohl sehr low-tech, funktionierte diese Lösung absolut tadellos: Meine Linux-Kisten mounteten die Festplatte automatisch in ihr jeweiliges home-Verzeichnis und so konnte ich auf verschiedenen Computern arbeiten, ohne mich um die Synchronizität der Daten kümmern zu müssen.
  </p>

  <p>
  Fast-forward ein Jahr, tausche Linux gegen Apple und finde es jetzt doch sehr anstrengend, immer eine externe Festplatte mit mir herumzuschleppen -- Apple-Snob, der ich bin. Sieht auch unelegant aus, dieses schwarze Kästchen an den hübschen Laptop zu klemmen. Es muss also eine andere Lösung her, um immer auf beiden Rechnern mit aktuellen Dateien arbeiten zu können. Es bietet sich an: MobileMe (damals noch .Mac), genauer, die iDisk, also ein Stück online-Speicher bei Apple, auf dem man von mehreren (Apple-) Rechnern aus arbeiten kann. Das Angebot ist verlockend, aber leider erfüllt MobileMe meine Erwartungen nicht, es gehen Daten verloren und ich ärgere mich, jemals Geld für diesen Dreck ausgegeben zu haben.
  </p>

  <p>
  Eine Alternative finde ich in Dropbox, welches die Vision des immer synchronen Datenspeichers &ldquo;in the cloud&rdquo; endlich erfüllt, wenn auch als Ordner und nicht als Laufwerk. Inzwischen erbringt auch Syncplicity diese Leistung, wenn auch mit einem eigenen Set an Einschränkungen (Es ist aber noch Beta, also kein Grund zur Sorge).
  </p>

  <p>
  Dennoch: ganz zufrieden bin ich nicht, einfach, weil zwei Rechner immer eine gewisse Menge &ldquo;mental overhead&rdquo; bedeuten. Allein, nicht immer am selben Gerät zu sitzen stellt einfach eine Irritation dar, die im Grunde nicht nötig ist. Na gut, und dieses neue &ldquo;Unibody"-MacBook Pro ist einfach sexy. Also, tausche iMac + MacBook gegen MacBook Pro. Das löst -logisch- auch alle Synchronizitätsprobleme.
  </p>

  <p>
  Aber ich wäre nicht der Sohn meines Vaters, wenn ich nicht immer noch mehr technischen Schnickschnack haben müsste, enter: the iPhone. Dank Apple und iTunes ist es natürlich kein Problem, Kalender, Email, Kontakte und Musik immer synchronisiert zu halten; Kabel reinstecken, iTunes machen lassen und fertig.
  Perfektioniert wird das alles aber erst durch Beihilfe von Google, welches durch ActiveSync (sprich: Exchange) nun auch alle meine Kontakte, Kalendereinträge, Emails und Dokumente auf allen Geräten zur Verfügung stellt. Dieses Setup ist nun endlich wirklich extrem zufriedenstellend. Es ist zwar ein Haufen Kleinkram, den man durcharbeiten muss, bis man das alles richtig konfiguriert hat, aber hat man das einmal getan funktioniert es wirklich tadellos! Und Syncplicity und Dropbox laufen auf dem Rechner einfach nur noch als Backup weiter.
  </p>
  ]]></description>
</item>
<item>
  <title>E Text Editor goes Open Source</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-24-e-text-editor-goes-open-source.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-24-e-text-editor-goes-open-source.html"</guid>
  <pubDate>Tue, 24 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/e_text_editor.png" alt="e_text_editor.png" />
  </p>
  </div>

  <p>
  Als ich heute von der FH nach Hause kam, lag <a href="http://e-texteditor.com/blog/2009/opencompany">das hier</a> in meinem Newsreader und ich war, in Ermangelung eines besseren Wortes, geschockt.
  </p>

  <p>
  Nur, um es noch einmal zu wiederholen: E, der meiner Meinung nach beste Texteditor der Welt wird Open Source. Das kann man nicht oft genug sagen.
  </p>

  <p>
  Warum ist E so fantastisch?
  <a href="http://www.e-texteditor.com/">E</a> ist ein recht neuer, kleiner <a href="http://de.wikipedia.org/wiki/Texteditor">Texteditor</a> für Windows. Nein, um ihm Genüge zu tun, muss man E in einem Satz mit <a href="http://de.wikipedia.org/wiki/Emacs">Emacs</a>, <a href="http://de.wikipedia.org/wiki/Vim">Vim</a> und <a href="http://macromates.com/">Textmate</a> nennen, denn wie diese Drei Großen Texteditoren sind auch E keine Grenzen gesetzt, da all seine Funktionalität durch kleine, einfache Skripte entsteht, die von jedem Nutzer beliebig verbessert werden können. Genauer gesagt: E tritt in die direkten Fußstapfen von Textmate, einem Editor für den Mac und ist vollkommen kompatibel mit dessen Erweiterungen, so dass E schon bei seiner Markteinführung auf eine riesige Masse von <a href="http://svn.textmate.org/trunk/Bundles/">Sprachen, Snippets und Programmen</a> zurückgreifen konnte, mit der sich jede noch so obskure Textmanipulation bewältigen lässt. Anders als Emacs oder Vim folgt E dabei aber modernen Bedienungs- und Designrichtlinien und fühlt sich genauso flüssig und heimisch an, wie das für eine Windows-Anwendung nur möglich ist.
  Seine zweite große, und kaum weniger berauschende Stärke ist sein <a href="http://e-texteditor.com/blog/2006/making-undo-usable">History-System</a>. Jeder Benutzer eines Texteditors kennt die Undo-Taste (<a href="http://stackoverflow.com/questions/247568/how-can-i-undo-more-than-a-single-character-in-textmate/248255">mit Ausnahme von Textmate</a>. <a href="http://nslog.com/2006/11/08/textmates_undo">What a shame</a>.). Undo macht die zuletzt gemachte Änderung rückgängig und ist damit der beste Freund von notirisch fehleranfälligen Menschen. E bringt Undo auf das nächste Level: Denn neben dem normalen Undo-Befehl gibt es noch eine komplette Übersicht aller jemals an einem Dokument gemachten Änderungen, komplett mit verschiedenen Pfaden, die zu verschiedenen Zeiten genommen wurden kompakt und übersichtlich verpackt in einem fantastischen Baumdiagramm.
  Dazu kommen ein riesiger Haufen Features, die eigentlich jedes Programm haben sollte, welche man aber nur viel zu selten findet:
  </p>

  <ul class="org-ul">
  <li>Inkrementielle Suche mit sofortiger Ergebnisvorschau und Unterstützung von Regulären Ausdrücken!
  </li>
  <li>Direkte Unterstützung von Cygwin für alle möglichen Skriptsprachen!
  </li>
  <li>Syntax-Highlighting für so ziemlich jede denkbare Sprache!
  </li>
  <li>Unterstützung für Snippets!
  </li>
  <li>Multiline-Editing!
  </li>
  <li>Kontinuierliche Weiterentwicklung des Editors!
  </li>
  <li>...
  </li>
  </ul>

  <p>
  Wer mehr wissen will, der surfe nach <a href="http://e-texteditor.com/index.html">e-texteditor.com</a> und schaue sich dort den Screencast und den Blog an, lade sich die Demo herunter oder suche im Internet nach Reviews zu E.
  </p>

  <p>
  Selbst ich, als eingefleischter Textmate-Benutzer halte E als meinen heimlichen Lieblingseditor, denn schließlich kann er alles, was Textmate kann (und das ist schon enorm gut) und dazu noch eine gute Latte mehr. Wer, wie ich, eigentlich seinen Tag nur mit (a) surfen und (b) tippen verbringt, sollte wirklich darüber nachdenken, ein wenig Geld für einen guten Texteditor auszugeben. Es lohnt sich, und E ist ohne Frage einer der Besten. Und jetzt wird er Open Source. Ich bin begeistert!
  </p>
  ]]></description>
</item>
<item>
  <title>Western Digital Festplatten-Umtausch mit Überraschungen</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-19-western-digital-festplatten-umtausch-mit-uberraschungen.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-19-western-digital-festplatten-umtausch-mit-uberraschungen.html"</guid>
  <pubDate>Thu, 19 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/festplatte.jpg" alt="festplatte.jpg" />
  </p>
  </div>

  <p>
  Ich hatte mir vor einer Weile eine externe Festplatte nur für TimeMachine gekauft. Denn TimeMachine ist super, die einzige Backup-Lösung die ganz bewusst nie in Erscheinung tritt es sei denn man braucht sie. TimeMachine läuft leise und unbeachtet im Hintergrund, und gibt mir dieses flauschige Gefühl von Sicherheit, quasi das unsicht- und spürbare Kondom der Computerwelt (bzw. Apple-Welt).
  </p>

  <p>
  ...Bis ich einmal den fatalen Fehler beging, meine externe Festplatte HOCHZUHEBEN. Nicht ruckartig, nicht gewaltsam, sondern tatsächlich sehr sanft, aber wohl gerade zu einem ungünstigen Zeitpunkt, denn die Festplatte gab ein leises Klick von sich und hörte auf zu funktionieren.
  </p>

  <p>
  Es handelt sich hierbei um eine externe Festplatte der Marke Western Digital MyBook mit 500 Gigabytes, gekauft bei Norskit. Ein Anruf beim Verkäufer ergab, dass dies eine alte Bestellung (weltbewegende 9 Monate) sei und ich daher bei einer anderen Nummer anrufen sollte. Eine sehr freundliche Mitarbeiterin teilte mir dort mit, dass die Firma leider Insolvent sei und ich meine Supportanfrage daher an den Hersteller richten sollte. Und was soll ich sagen? EIN GLÜCK, dass sie das sagte!
  </p>

  <p>
  Denn auf der Webseite von Western Digital gibt es nicht nur eine Support-Telefonnummer, sondern gleich ein komplettes austausch-Programm für Festplatten, welches vollkommen automatisiert abläuft: Man gibt die Modellnummer seiner Festplatte und -für Notfälle- seine Email-Adresse an und bekommt sofort eine neue Festplatte zugeschickt, mit der einzigen Auflage, die alte, defekte Platte innerhalb von 30 Tagen einzuschicken. Und tatsächlich wurde die neue Platte prompt am nächsten Tag verschickt und kam heute pünktlich per UPS bei mir an.
  </p>

  <p>
  Faszinierend, so wünsche ich mir Kundenservice. Der einzige Wermutstropfen ist, dass Western Digital offenbar nicht sehr überzeugt von der Ausfallsicherheit seiner Festplatten ist, wenn sie so viel Infrastruktur für den einfachen Austausch bereitstellen... Na egal, ich will mal nicht meckern ;-)
  </p>

  <p>
  <b>Nachschlag:</b> Es stellt sich heraus, die neue Festplatte unterscheidet sich ein wenig von der alten: Sie ist silber statt schwarz und hat zwei Firewire 800 Anschlüsse anstatt Firewire 400 -- ein Glück, dass auch Kabel mitgeliefert wurden, sonst könnte ich sie jetzt nicht anschließen!
  </p>
  ]]></description>
</item>
<item>
  <title>Debugging und GCC auf Windows</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-15-debugging-und-gcc-auf-windows.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-15-debugging-und-gcc-auf-windows.html"</guid>
  <pubDate>Sun, 15 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/code.png" alt="code.png" />
  </p>
  </div>

  <p>
  So, jetzt habe ich mein Mex-File zum Einlesen beliebiger Audiodateien endlich lauffähig auf Windows und Mac. Leider werde ich nicht dafür bezahlt, auch noch eine Linux-Version zu bauen, aber falls Interesse besteht, versuche ich mich vielleicht einmal daran.
  </p>

  <p>
  <a href="http://en.wikipedia.org/wiki/State_of_the_Union">The State of The Union</a>: Kleine Dateien einlesen, kein Problem. Exotische Formate einlesen, kein Problem. Metadaten auslesen, kein Problem. Dateigröße, Bitrate und Samplerate auslesen, ein kleines Problem, da diese Parameter bei komprimierten Formaten nicht unbedingt fest stehen. Große Dateien einlösen, auf dem Mac kein Problem, auf Windows… nun ja, es dauert. Eine WAV-Datei von 5:30 min einzulesen, dauert mit Windows momentan ca. eine Stunde. Das kann nicht sein, in der Zeit habe ich die Datei dem Programm vorgelesen, wenn es sein muss.
  </p>

  <p>
  Also, was ist da faul? Jetzt heißt es debuggen: <a href="http://de.wikipedia.org/wiki/GNU_Debugger">GDB</a> ist mein Freund, aber leider spreche ich seine Sprache nicht, also Oldschool-Debugging mit <a href="http://www.cplusplus.com/reference/clibrary/cstdio/printf.html">printf()</a> (bzw. <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mexprintf.html">mexPrintf()</a>; Aber da `#define printf mexPrintf` ist das das selbe). Blöd nur, dass Matlab selbst entscheidet, wann es meine Printfs auf den Bildschirm schreibt und es sich dazu entschlossen hat, dies immer erst nach dem Ausführen der Datei, also erst nachdem es bereits eine Stunde gearbeitet hat, zu tun. Einiges Hirnen später konnte ich Matlab endlich über eine Kombination aus <a href="http://de.wikipedia.org/wiki/Typumwandlung">Typecasts</a>, <a href="http://www.cplusplus.com/reference/clibrary/cstdio/sprintf.html">sprintf</a> und <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mexwarnmsgtxt.html">mexWarnMsgTxt</a> dazu überreden, wenigstens sporadisch ein paar Informationen herauszugeben.
  </p>

  <p>
  Das Ergebnis:
  </p>

  <ol class="org-ol">
  <li>Die Datei funktioniert tadellos, ist nur ein wenig langsam (s.o.)
  </li>
  <li>Wer ist schuld? <a href="http://www.cplusplus.com/reference/clibrary/cstdlib/realloc.html">Realloc</a> ist schuld!
  </li>
  </ol>

  <p>
  Das kam überraschend! Offenbar ist realloc auf dem Mac um mehrere Größenordnungen performanter als auf <a href="http://www.mingw.org/">MinGW</a>/Windows, denn die selbe Anwendung, die auf dem Mac ca. eine Sekunde braucht, braucht auf Windows eine Stunde! Und das allein wegen realloc! (Eigentlich: eine halbe Stunde wegen realloc, der Rest ist der Tatsache geschuldet, dass Windows in einer <a href="http://www.vmware.com/de/products/fusion/">VM</a> läuft)
  </p>

  <p>
  Bei WAV-Dateien werden immer 2048 Samples an einem Stück ausgelesen. Danach verwende ich ein realloc, um meinen haupt-Speicherpuffer um diese Größe zu vergrößern und kopiere die neuen Daten dort hinein. Bei meinen 5:30 min macht das bei einer Samplerate von 44100 kHz und zwei Kanälen ca. 15000 Aufrufe von realloc. Komprimierte Datenformate haben üblicherweise kleinere Frames und damit noch einmal wesentlich mehr realloc-Aufrufe.
  Der Plan ist also, jetzt statt häufiger, kleiner realloc-Aufrufe, seltenere, größere Aufrufe zu machen. Zeit für ein paar Experimente:
  </p>


  <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
  <col  class="left" />

  <col  class="right" />

  <col  class="left" />
  </colgroup>
  <tbody>
  <tr>
  <td class="left">realloc()-Größe</td>
  <td class="right">realloc()-Aufrufe</td>
  <td class="left">benötigte   Zeit</td>
  </tr>

  <tr>
  <td class="left">2<sup>11</sup> =    2048</td>
  <td class="right">15000</td>
  <td class="left">~1 h</td>
  </tr>

  <tr>
  <td class="left">2<sup>16</sup> =   65536</td>
  <td class="right">470</td>
  <td class="left">~2 min</td>
  </tr>

  <tr>
  <td class="left">2<sup>17</sup> =  131072</td>
  <td class="right">240</td>
  <td class="left">~1 min</td>
  </tr>

  <tr>
  <td class="left">2<sup>18</sup> =  262144</td>
  <td class="right">120</td>
  <td class="left">30 s</td>
  </tr>

  <tr>
  <td class="left">2<sup>19</sup> =  524288</td>
  <td class="right">60</td>
  <td class="left">18 s</td>
  </tr>

  <tr>
  <td class="left">2<sup>20</sup> = 1048576</td>
  <td class="right">30</td>
  <td class="left">10.5 s</td>
  </tr>

  <tr>
  <td class="left">2<sup>21</sup> = 2097152</td>
  <td class="right">15</td>
  <td class="left">7.3 s</td>
  </tr>

  <tr>
  <td class="left">2<sup>22</sup> = 4194304</td>
  <td class="right">7</td>
  <td class="left">5.1 s</td>
  </tr>

  <tr>
  <td class="left">2<sup>23</sup> = 8388608</td>
  <td class="right">3</td>
  <td class="left">4.2 s</td>
  </tr>
  </tbody>
  </table>

  <p>
  Das Spannende ist: Ich ändere durch meine Methodik praktisch nichts außer der Anzahl und Größe der realloc-Aufrufe, aber man erkennt einen eindeutigen Zusammenhang zwischen Performance und Anzahl der Aufrufe, ergo ist realloc der alleinige Schuldige für mein Performanceproblem auf Windows.
  </p>

  <p>
  An dieser Stelle fiel mir ein, dass ich bereits an früherer Stelle einmal die gesamte Länge des Audio-Streams anhand der Metadaten geschätzt hatte. Durch eine somit vorgenommene Prä-Allokation des gesamten Speichers lässt sie die Laufzeit weiter auf 2.2 s drücken. Das ist immernoch nicht einmal halb so schnell wie auf OSX (0.9 s), aber das mag auch an der virtuellen Maschine liegen.
  </p>

  <p>
  Mehr als diesen anecdotal Evidence kann ich nicht anbieten, aber ich bin mir sicher, dass ich ab jetzt die Finger von inkrementiellen Speichervergrößerungen auf MinGW/Windows lassen werde. Ist das in MSVC ähnlich schlimm, oder habe ich da etwa einen Bug entdeckt?
  </p>
  ]]></description>
</item>
<item>
  <title>Get a Mac</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-14-get-a-mac.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-14-get-a-mac.html"</guid>
  <pubDate>Sat, 14 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/osx.png" alt="osx.png" />
  </p>
  </div>

  <p>
  Bei meinem üblichen, Samstagmorgendlichen, bettlägrigen Web-Rundgang habe ich heute drei sehr nette Artikel von David Alison gefunden, einem Windows-Programmierer und selbsternanntem Microsoft-Fanboy, der sich einen Mac zulegt und unverhofft glücklich damit wird. So glücklich sogar, dass er inzwischen mehr oder weniger ein Mac-only-User geworden ist.
  </p>

  <p>
  Ziemlich genau wie ihm ging es mir auch.
  </p>

  <ul class="org-ul">
  <li>Teil 1: <a href="http://www.davidalison.com/2008/02/hardcore-windows-guy-switches-to-mac.html">A hardcore Windows guy gets a Mac</a>
  </li>
  <li>Teil 2: <a href="http://www.davidalison.com/2008/04/mac-after-two-months-of-mac-heres-why-i.html">After two months of Mac, here&rsquo;s why I switched</a>
  </li>
  <li>Teil 3: <a href="http://www.davidalison.com/2009/03/switching-from-windows-to-mac-one-year.html">Switching from Windows to Mac - One Year Later</a>
  </li>
  </ul>

  <p>
  Wens interessiert: Das ist eine sehr hübsche Einführung darin, warum Macs toll sind. Viel besser als alles, was ich dazu schreiben würde oder <a href="http://www.meinstudi.de/basti/?p=49">bereits</a> <a href="http://www.meinstudi.de/basti/?p=4">getan</a> <a href="http://www.meinstudi.de/basti/?p=24">habe</a>.
  </p>
  ]]></description>
</item>
<item>
  <title>Kompilieren auf Windows</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-12-kompilieren-auf-windows.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-12-kompilieren-auf-windows.html"</guid>
  <pubDate>Thu, 12 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/open_source_rules.png" alt="open_source_rules.png" />
  </p>
  </div>

  <p>
  Seit einigen Wochen arbeite ich an einem kleinen Projekt: Eine Matlab-Funktion, die, ähnlich wie die standard-Funktion <a href="http://www.mathworks.com/access/helpdesk_r13/help/techdoc/ref/wavread.html">wavread()</a>, Audiodateien einlesen kann. Aber nicht irgendwelche Audiofiles, sondern ALLE MÖGLICHEN Audiofiles. Wie geht das? Jeder kennt <a href="http://www.videolan.org/vlc/">VLC</a>, den Video-Player, der so ziemlich jedes Video öffnen kann, das man ihm vorsetzt, selbst wenn man überhaupt keine Codecs installiert hat. VLC basiert auf <a href="http://de.wikipedia.org/wiki/FFmpeg">FFmpeg</a>, einem Open-Source Programm, welches Funktionen bereit stellt, um eben alle möglichen Mediendaten zu öffnen.
  </p>

  <p>
  Und da FFmpeg freie Software ist, kann man sie auch für andere Dinge verwenden, etwa, um mit Matlab Audiodateien zu öffnen. Fehlt noch eine Verbindung zwischen Matlab und den FFmpeg-C-Bibliotheken, und die gibt es in Form von <a href="http://www.mathworks.com/support/tech-notes/1600/1605.html#intro">Mex</a>, der C-Schnittstelle von Matlab. Feine Sache, zwar hat es eine Weile gedauert, bis ich mich in libavformat und libavcodec eingearbeitet hatte (die beiden wichtigsten FFmpeg-Bibliotheken), aber im Endeffekt lief das alles sehr schmerzfrei -- und das, obwohl ich bisher Mex-Kompilieren mit Matlab immer als eine grausige Beschäftigung in Erinnerung hatte, gespickt von kryptischen Kompiler-Fehlern und hässlichen Notlösungen.
  </p>

  <p>
  Bumms, Zack, kaum hatte ich mich versehen, hatte ich ein lauffähiges, tadellos funktionierendes <a href="http://en.wikipedia.org/wiki/MATLAB#Calling_C_and_Fortran_functions">Mex-File</a> auf meinem Mac liegen. Damit hatte ich nicht gerechnet. Also sofort die momentane Euphorie ausnutzen und weiter zu Schritt 2, das Ganze nochmal auf Windows. Meine Probleme, Windows so einzurichten, dass ich endlich Kompilieren kann, <a href="http://www.daskrachen.com/2009/03/great-scott.html">hatte ich ja schon berichtet</a>. Ich hatte also Visual Studio 2005 installiert, um Matlab zufrieden zu stellen und einen anständigen Kompiler auf dem System zu haben. Aber war ja klar, MSVC macht wieder sein eigenes Ding und nichts ist mit Standardkonformität und Trallalla: Keine <a href="http://de.wikipedia.org/wiki/C99#C99">C99</a>-Unterstützung, also keine Variablendeklarationen mitten im Code und keine stdint.h oder inttype.h. Ein Glück, es gibt wieder ein wenig mehr Free Software, die wenigstens <a href="http://code.google.com/p/msinttypes/">letztere Lücke schließt</a>. Dennoch; Ich bekomme mein mex-File nicht zum Laufen. Es ist wie verflucht, kaum setze ich mich an eine Windows-Maschine zum Programmieren, fällt meine Produktivität auf das Niveau eines Backsteins.
  </p>

  <p>
  Enter <a href="http://sourceforge.net/projects/gnumex">gnumex</a>, noch ein weiteres Stück FOSS, das es ermöglicht, GCC als Mex-Kompiler zu verwenden, AUF WINDOWS. Um die Dinge zu vereinfachen, verwendete ich die <a href="http://www.mingw.org/">MinGW</a>-Variante und kaum war diese Hürde genommen... lief alles. Einfach so. Wahrscheinlich bin ich ein Dickschädel und habe einfach nicht die Geistesschärfe, mit Windows-Kompilern zu arbeiten, aber mir scheint, alles was ich diesbezüglich anfasse und das nicht GCC heißt ist zum Scheitern verurteilt. Ein Glück, dass es die vielen klugen Jungen und Mädchen gibt, die so wunderbare freie Software schreiben, die mir das Leben so viel einfacher macht!
  </p>

  <p>
  Eine Fortsetzung kommt noch...
  </p>
  ]]></description>
</item>
<item>
  <title>Vom Sinn und Unsinn, ein Cross-Platform-Compiling-Matlab-System aufzubauen</title>
  <link>http://bastibe.de/"http://bastibe.de/2009-03-05-great-scott.html"</link>
  <guid isPermaLink="false">http://bastibe.de/"http://bastibe.de/2009-03-05-great-scott.html"</guid>
  <pubDate>Thu, 05 Mar 2009 00:00:00 +0100</pubDate>

  <description><![CDATA[
  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/bitte_warten.png" alt="bitte_warten.png" />
  </p>
  </div>

  <p>
  Mal wieder: Ich schreibe ein Stück Software für meinen Nebenjob bei meinem Signalverarbeitung-Prof. Diesmal geht es darum, beliebige Audio-Files in Matlab einlesen zu können. Perfekt geeignet ist dafür die selbe Bibliothek, die auch von VLC verwendet wird, libavcodec/libavformat. Das ist eine normale C-Bibliothek, es braucht also nur noch ein kleines mex-File, um ihre Funktionalität für Matlab zur Verfügung zu stellen. Klappt auch wunderbar. Auf dem Mac.
  </p>

  <p>
  Schritt zwei ist dann, das Ganze auf Windows und Linux zum Laufen zu bringen. Eigentlich kein Problem, denn ich habe keine wilden Dinge getan und die Libraries selbst sind wunderbar Cross-Platform, es gibt sie sogar schon vorkompiliert für praktisch jedes denkbare Betriebssystem.
  </p>

  <p>
  Also, was brauche ich? Zwei Dinge: Matlab und einen C-Compiler (der mitgelieferte LLC-Compiler macht mein Hirn bluten). Matlab zu installieren ist meiner Erfahrung nach schmerzhaft. Bigtime. Nicht, weil Matlab schwer zu installieren wäre, sondern, weil Mathworks nur zwei Installationen pro Schachtel erlaubt, was für meine drei Betriebssysteme zu gewissen Problemen führt. Außerdem müsste ich meine eine Lizenz erst für die Windows-installation umschreiben lassen, und... ach, Schmerzen. Offenbar habe ich die Jungs dort aber schon derart häufig mit Lizenzanfragen genervt, dass sie mich einfach als hoffnungslos aufgegeben haben, denn dieses Mal musste ich keine neue Lizenz erstellen lassen, sondern einfach installieren, Passwort eingeben, und los. Mein Account meldet jetzt, dass ich fünf gleichzeitige Installationen hätte (von zwei erlaubten). Mir solls Recht sein.
  </p>

  <p>
  Außerdem: ein aktuelles Linux muss her. VMWare sei Dank, lauert im Linux-Installieren nicht mehr der Schrecken, im Zweifelsfall den kompletten Festplatteninhalt zu verlieren, sondern nur noch, an akuter Progressbar-itis zu ersticken. War ja klar, dass Autoupdate sich diesen Nachmittag aussucht, um meine Ubuntu-VM hoffnungslos zu zerstören. Also, neues Ubuntu heruntergeladen, neu installiert, neu Updates aufgespielt, zwei Stunden Lifetime verloren. Immerhin: es hat fehlerfrei funktioniert, das ist was Neues. Matlab hinterher, VMWare Tools dazu, fertig ist die Development-Kiste. Jetzt fehlt nur noch eine Verbindung zu meinem Development-Verzeichnis, damit ich auf meine Dateien zugreifen kann. Fehlanzeige. Dukommsthiernichrein. Na Toll.
  </p>


  <div class="figure">
  <p><img src="http://bastibe.de/static/2009-03/upgradepatch.png" alt="upgradepatch.png" />
  </p>
  </div>

  <p>
  Also weiter zu Windows. Frühere Versuche ergaben bereits, dass ich Matlab nicht dazu bewegen kann, (a) GCC als Compiler zu nehmen oder (b) das bereits installierte Microsoft Visual Studio C++ .Net Professional Directors Cut Special Edition 2008 Ultimate zu verwenden. Nähere Nachforschungen zeigen: Zu neu, Kennternich. Geht nur bis MSVC Jahrgang 2005. Also: Neues MSVC deinstallieren, Altes installieren. ich freue mich immer darauf, MSVC zu deinstallieren, denn es besteht lediglich aus kompakten 12 Programmen, die sich zwar alle auf einem Haufen Installieren- jedoch nicht De-Installieren lassen. Immerhin ist es dank MSDNAA-Membership nicht schwer, an die alten Versionen heranzukommen. Und klar, die Systemsteuerung lässt einen auch immer nur ein Programm auf einmal deinstallieren. Multitasking ist nicht. Dank Syncplicity kann Windows die Zwischenzeit immerhin dazu verwenden, all meine Development-Files auf den Rechner zu laden. Yay!
  Das Schöne an Fortschrittsbalken ist ja, sie zeigen Fortschritt. Damit haben sie einen klaren Vorteil gegenüber etwa Dachbalken oder den Bittewartenpunktpunktpunkt-Balken, die die Microsoft SQL Server 2008-Deinstallation stolz herumzeigt. Die fühlt sich wohl sehr wichtig, denn sie rödelt eine starke halbe Stunde im Bitte-Warten-Modus herum. So mag ich Deinstallationen.
  </p>

  <p>
  To be continued...
  </p>
  ]]></description>
</item>
<div id="footnotes">
  <h2 class="footnotes">Footnotes: </h2>
  <div id="text-footnotes">

    <div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
    As a matter of fact, I would love to see well enough to see Retina at all, but that is beside the point
    </p></div>


  </div>
</div></channel>
</rss>
