#+title: How I Record Screen Casts
#+date: <2020-05-19 16:33>
#+filetags: programming

This semester is weird. Instead of holding my "Applied Programming" lecture as I normally would, live-coding in front of the students and narrating my foibles, this time it all had to be done online, thanks to the ongoing pandemic. Which meant I had to record videos. I have no idea how recording video works. This is a record of what I did, in case I have to do more of it. You can see the results of my efforts in my [[https://bastibe.de/2020-03-20-qt-for-python-tutorial.html][Qt for Python video tutorials]] and my [[https://bastibe.de/2020-05-20-file-parsing-tutorial.html][file parsing with Python video tutorials]]. Through some strange coincidences, wired.com wrote an [[https://www.wired.com/story/anyones-celebrity-streamer-open-source-app/][article]] about my use of OBS.

Working on Linux, I used the [[https://obsproject.com/][Open Broadcaster Software]], or OBS for short, as my recording program. OBS can do much more than record screencasts, but I only use it for two things: Recording a portion of my screen, and switching between different portions.

#+begin_export html
<img src="/static/2020-05/OBS_screenshot.png">
#+end_export

To this end, I divide my screen into four quadrants. The top left is OBS, for monitoring my recording and mic levels. The bottom left is a text editor with my speaker notes. The top right and bottom right are my two recording /scenes/, usually a terminal or browser in the top right, and a text editor in the bottom right. The screenshot shows the /Editor/ scene, which has a filter applied to its source to record only the bottom right quadrant. On a 4K screen, each quadrant is exactly full HD.

In OBS's settings, I set hotkeys to switch scenes: I use F1 and F2 to select the /Browser/ and /Editor/ scenes, and F6 for starting and stopping recordings. To make these recordings look clean, I disable window shadows for the duration of the recording. For more compatible video files, I enable "Automatically remux to mp4" in OBS' advanced settings.

The second ingredient to my recording setup is KDE, where I assign F3 and F4 to activate the browser or editor window (right click any window → More Actions → Assign Window Shortcut). For example, to switch to the /Browser/ scene, I hit F1 and F3, or F2 and F4 for the /Editor/ scene. To make this work smoothly, I disabled these shortcuts within my terminal, browser, and text editor.

With that, I can record screen casts with very minimal effort. The last ingredient however is editing; and I loathe video editing. I'd much rather record a few more takes than spend the same time in a video editor. Instead, I record short snippets of a few minutes each, and simply concatenate them with [[https://ffmpeg.org/][FFmpeg]]:

Create a file /concatenate.txt/, that lists all the files to be concatenated:

#+begin_src
file part-one.mp4
file part-two.mp4
file part-three.mp4
#+end_src

then run ~ffmpeg -f concat -i concatenate.txt -c copy output.mp4~ to concatenate them into a new file ~output.mp4~.

The great thing about this method is that it uses the ~copy~ codec, which does not re-encode the file. I.e. it only takes a fraction of a second, and does not degrade quality.

In summary, this setup works very well for me. It is simple and efficient, and does not require any video editing. The ability to switch scenes is cool and powerful. But I don't know how often I accidentally recorded the wrong part of the screen and had to redo a recording. All in all, the 18 videos in the file parsing tutorials took 250 takes, according to my trash directory.
