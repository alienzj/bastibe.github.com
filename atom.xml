<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"> <title>Bastis Scratchpad on the Internet</title> <link href="http://bastibe.de"/> <link type="application/atom+xml" rel="self" href="http://bastibe.de/atom.xml"/> <updated>Wed, 29 May 2013 15:08:00 GMT</updated> <author> <name>Bastian Bechtold</name> </author> <entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/A-Python-Primer-for-Matlab-Users.html"/> <title>A Python Primer for Matlab Users</title> <published>2013-01-20 10:55</published> <updated>2013-01-20 10:55</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;blockquote&gt;
&lt;p&gt;Why would you want to use Python over Matlab?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Because Python is free and Matlab is not.&lt;/li&gt;
&lt;li&gt;Because Python is a general purpose programming language and Matlab is not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me qualify that a bit. Matlab is a very useful programming environment for numerical problems. For a very particular set of problems, Matlab is an awesome tool. For many other problems however, it is just about unusable. For example, you would not write a complex GUI program in Matlab, you would not write your blogging engine in Matlab and you would not write a web service in Matlab. You can do all that and more in Python.&lt;/p&gt;

&lt;h2&gt;Python as a Matlab replacement&lt;/h2&gt;

&lt;p&gt;The biggest strength of Matlab is its matrix engine. Most of the data you work with in Matlab are matrices and there is a host of functions available to manipulate and visualize those matrices. Python, by itself, does not have a convenient matrix engine. However, there are three packages (think Matlab Toolboxes) out there that will add this capability to Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numpy (the matrix engine)&lt;/li&gt;
&lt;li&gt;Scipy (matrix manipulation)&lt;/li&gt;
&lt;li&gt;Matplotlib (plotting)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can either grab the individual installers for &lt;a href=&quot;http://python.org&quot; &gt;Python&lt;/a&gt;, &lt;a href=&quot;http://numpy.org&quot; &gt;Numpy&lt;/a&gt;, &lt;a href=&quot;http://scipy.org&quot; &gt;Scipy&lt;/a&gt; and &lt;a href=&quot;http://matplotlib.org&quot; &gt;Matplotlib&lt;/a&gt; from their respective websites, or get them pre-packaged from &lt;a href=&quot;https://code.google.com/p/pythonxy/&quot; &gt;pythonxy()&lt;/a&gt; or &lt;a href=&quot;http://www.enthought.com/products/epd.php&quot; &gt;EPD&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;A 30,000 foot overview&lt;/h2&gt;

&lt;p&gt;Like Matlab, Python is &lt;em&gt;interpreted&lt;/em&gt;, that is, there is no need for a compiler and code can be executed at any time as long as Python is installed on the machine. Also, code can be copied from one machine to another and will run without change.&lt;/p&gt;

&lt;p&gt;Like Matlab, Python is &lt;em&gt;dynamically typed&lt;/em&gt;, that is, every variable can hold data of any type, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Python
&lt;/span&gt;    a = 5         &lt;span class=&quot;comment&quot;&gt;# a number
&lt;/span&gt;    a = &lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1, 2, 3&lt;/span&gt;]&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# a list
&lt;/span&gt;    a = &lt;span class=&quot;string&quot;&gt;&#039;text&#039;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# a string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Contrast this with C, where you can not assign different data types to the same variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// C
&lt;/span&gt;    &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; a = 5;
    &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; b&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;3&lt;/span&gt;]&lt;/span&gt; = &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;1.0, 2.0, 3.0&lt;/span&gt;}&lt;/span&gt;;
    &lt;span class=&quot;symbol&quot;&gt;char&lt;/span&gt; c&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;]&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike Matlab, Python is &lt;em&gt;strongly typed&lt;/em&gt;, that is, you can not add a number to a string.
In Matlab, adding a single number to a string will convert that string into an array of numbers, then add the single number to each of the numbers in the array. Python will simply throw an error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    % Matlab
    a = &#039;text&#039;
    b = a + 5 % [121 106 125 121]&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Python
&lt;/span&gt;    a = &lt;span class=&quot;string&quot;&gt;&#039;text&#039;&lt;/span&gt;
    b = a + 5 &lt;span class=&quot;comment&quot;&gt;# TypeError: Can&#039;t convert &#039;int&#039; object to str implicitly&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike Matlab, every Python file can contain as many functions as you like. Basically, you can organize your code in as many files as you want. To access functions from other files, use &lt;code&gt;import filename&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Matlab, Python is very quick to start. In fact, most operating systems automatically start a new Python process whenever you run a Python program and quit that process once the program has finished. Thus, every Python program behaves as if it indeed were an independent program. There is no need to wait for that big Matlab mother ship to start before writing or executing code.&lt;/p&gt;

&lt;p&gt;Unlike Matlab, the source code of Python is readily available. Every detail of Python&#039;s inner workings is available to everyone. It is thus feasible and encouraged to actively participate in the development of Python itself or some add-on package. Furthermore, there is no dependence on some company deciding where to go next with Python.&lt;/p&gt;

&lt;h2&gt;Reading Python&lt;/h2&gt;

&lt;p&gt;When you start up Python, it is a rather empty environment. In order to do anything useful, you first have to &lt;code&gt;import&lt;/code&gt; some functionality into your workspace. Thus, you will see a few lines of &lt;code&gt;import&lt;/code&gt; statements at the top of every Python file. Moreover, Python has &lt;em&gt;namespaces&lt;/em&gt;, so if you &lt;code&gt;import numpy&lt;/code&gt;, you will have to prefix every feature of Numpy with its name, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; numpy
    a = numpy.zeros&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;10, 1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is clearly cumbersome if you are planning to use Numpy all the time. So instead, you can import all of Numpy into the global environment like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; *
    a = ones&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;30, 1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Better yet, there is a pre-packaged namespace that contains the whole Numpy-Scipy-Matplotlib stack in one piece:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; pylab &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; *
    a = randn&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;100, 1&lt;/span&gt;)&lt;/span&gt;
    plot&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;
    show&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Python does not plot immediately when you type &lt;code&gt;plot()&lt;/code&gt;. Instead, it will collect all plotting information and only show it on the screen once you type &lt;code&gt;show()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far, the code you have seen should look pretty familiar. A few differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No semicolons at the end of lines;&lt;br/&gt;
  In order to print stuff to the console, use the &lt;code&gt;print()&lt;/code&gt; function instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No &lt;code&gt;end&lt;/code&gt; anywhere.&lt;br/&gt;
  In Python, blocks of code are identified by indentation and they always start with a colon like so:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    sum = 0
    &lt;span class=&quot;symbol&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;symbol&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1, 2, 3, 4, 5&lt;/span&gt;]&lt;/span&gt;:
        sum = sum + n
    &lt;span class=&quot;symbol&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;sum&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Function definitions are different.&lt;br/&gt;
  They use the &lt;code&gt;def&lt;/code&gt; keyword instead of &lt;code&gt;function&lt;/code&gt;.&lt;br/&gt;
  You don&#039;t have to name the output variable names in the definition and instead use &lt;code&gt;return()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Python
&lt;/span&gt;    &lt;span class=&quot;special&quot;&gt;def&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; abs&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;number&lt;/span&gt;)&lt;/span&gt;:
        &lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt; number &amp;gt; 0:
            &lt;span class=&quot;symbol&quot;&gt;return&lt;/span&gt; number
        else:
            &lt;span class=&quot;symbol&quot;&gt;return&lt;/span&gt; -number&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    % Matlab
    function [out] = abs(number)
        if number &gt; 0
            out = number
        else
            out = -number
        end
    end&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;There is no easy way to write out a list or matrix.&lt;br/&gt;
  Since Python only gains a matrix engine by importing Numpy, it does not have a convenient way of writing arrays or matrices.   This sounds more inconvenient than it actually is, since you are probably using mostly functions like &lt;code&gt;zeros()&lt;/code&gt; or &lt;code&gt;randn()&lt;/code&gt; anyway and those work just fine. Also, many places accept Python lists (like this &lt;code&gt;[1, 2, 3]&lt;/code&gt;) instead of Numpy arrays, so this rarely is a problem. Note that you &lt;em&gt;must&lt;/em&gt; use commas to separate items and can not use semicolons to separate lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# create a numpy matrix:
&lt;/span&gt;    m = array&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren2&quot;&gt;[&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1, 2, 3&lt;/span&gt;]&lt;/span&gt;,
               &lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;4, 5, 6&lt;/span&gt;]&lt;/span&gt;,
               &lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;7, 8, 9&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# create a Python list:
&lt;/span&gt;    l = &lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1 2 3&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Arrays access uses brackets and is numbered from 0.&lt;br/&gt;
  Thus, ranges &lt;em&gt;exclude&lt;/em&gt; the last number (see below).&lt;br/&gt;
  Mostly, this just means that array access does not need any &lt;code&gt;+1&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt; when indexing arrays anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    a = linspace&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;1, 10, 10&lt;/span&gt;)&lt;/span&gt;
    one = a&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;
    two = a&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;comment&quot;&gt;# &quot;6:8&quot; is a range of two elements:
&lt;/span&gt;    a&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;6:8&lt;/span&gt;]&lt;/span&gt; = &lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;70, 80&lt;/span&gt;]&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# &amp;lt;-- a Python list!&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Common traps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Array slicing does not copy.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    a = array&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren2&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1 2 3 4 5&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    b = a&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1:4&lt;/span&gt;]&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# [2 3 4]
&lt;/span&gt;    b&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1&lt;/span&gt;]&lt;/span&gt; = rand&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# this will change a and b!
&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# make a copy like this:
&lt;/span&gt;    c = array&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;a&lt;span class=&quot;paren2&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1:4&lt;/span&gt;]&lt;/span&gt;, copy=True&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# copy=True can be omitted
&lt;/span&gt;    c&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1&lt;/span&gt;]&lt;/span&gt; = rand&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# changes only c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Arrays retain their data type.
  You can slice them, you can dice them, you can do math on them, but a 16 bit integer array will never lose its data type. Use &lt;code&gt;new = array(old, dtype=double)&lt;/code&gt; to convert an array of any data type to the default &lt;code&gt;double&lt;/code&gt; type (like in Matlab).&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# pretend this came from a wave file:
&lt;/span&gt;    a = array&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren2&quot;&gt;[&lt;span class=&quot;code&quot;&gt;1000, 2000, 3000, 4000, 5000&lt;/span&gt;]&lt;/span&gt;, dtype=int16&lt;/span&gt;)&lt;/span&gt;
    a = a * 10 &lt;span class=&quot;comment&quot;&gt;# int16 only goes to 32768!
&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# a is now [10000, 20000, 30000, -25536, -15536]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Going further&lt;/h2&gt;

&lt;p&gt;Now you should be able to read Python code reasonably well. Numpy, Scipy and Matplotlib are actually modeled after Matlab in many ways, so many functions will have a very similar name and functionality. A lot of the numerical code you write in Python will look very similar to the equivalent code in Matlab. For a more in-depth comparison of Matlab and Python syntax, head over to &lt;a href=&quot;http://www.scipy.org/NumPy_for_Matlab_Users&quot; &gt;the Numpy documentation for Matlab users&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, since Python is a general purpose programming language, it offers some more tools. To begin with, there are a few more data types like associative arrays, tuples (unchangeable lists), proper strings and a full-featured object system. Then, there is a plethora of add-on packages, most of which actually come with your standard installation of Python. For example, there are &lt;a href=&quot;http://docs.python.org/3/library/internet.html&quot; &gt;internet protocols&lt;/a&gt;, &lt;a href=&quot;http://www.riverbankcomputing.com/software/pyqt/intro&quot; &gt;GUI programming frameworks&lt;/a&gt;, &lt;a href=&quot;https://people.csail.mit.edu/hubert/pyaudio/&quot; &gt;real-time audio interfaces&lt;/a&gt;, &lt;a href=&quot;https://www.djangoproject.com/&quot; &gt;web frameworks&lt;/a&gt; and &lt;a href=&quot;http://www.pygame.org/&quot; &gt;game development libraries&lt;/a&gt;. Even &lt;a href=&quot;https://github.com/bastibe/bastibe.github.com/tree/source&quot; &gt;this very blog&lt;/a&gt; is created using a Python &lt;a href=&quot;http://pelican.readthedocs.org&quot; &gt;static site generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, Python has a great &lt;a href=&quot;http://docs.python.org/3/&quot; &gt;online documentation site&lt;/a&gt; including a &lt;a href=&quot;http://docs.python.org/3.3/tutorial/&quot; &gt;tutorial&lt;/a&gt;, there are &lt;a href=&quot;http://wiki.python.org/moin/PythonBooks&quot; &gt;many books&lt;/a&gt; &lt;a href=&quot;http://www.learnpythonthehardway.org/&quot; &gt;on Python&lt;/a&gt; and there is a helpful &lt;a href=&quot;http://wiki.python.org/moin/BeginnersGuide&quot; &gt;Wiki on Python&lt;/a&gt;. There is also a &lt;a href=&quot;http://scipy.org/Getting_Started&quot; &gt;tutorial&lt;/a&gt; and &lt;a href=&quot;http://docs.scipy.org/doc/&quot; &gt;documentation&lt;/a&gt; for Numpy, Scipy and &lt;a href=&quot;http://matplotlib.org/contents.html&quot; &gt;Matplotlib&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A great way to get to know any programming language is to solve the first few problems on &lt;a href=&quot;https://projecteuler.net/&quot; &gt;project euler&lt;/a&gt;.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/Real-Time-Signal-Processing-in-Python.html"/> <title>Real Time Signal Processing in Python</title> <published>2012-11-02 10:53</published> <updated>2012-11-02 10:53</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;Wouldn&#039;t it be nice if you could do real time audio processing in a convenient programming language? Matlab comes to mind as a convenient language for signal processing. But while Matlab is pretty fast, it is really only fast for algorithms that can be vectorized. In audio however, we have many algorithms that need knowledge about the previous sample to calculate the next one, so they can&#039;t be vectorized.&lt;/p&gt;

&lt;p&gt;But this is not going to be about Matlab. This is going to be about Python. Combine Python with Numpy (and Scipy and Matplotlib) and you have a signal processing system very comparable to Matlab. Additionally, you can do real-time audio input/output using PyAudio. PyAudio is a wrapper around PortAudio and provides cross platform audio recording/playback in a nice, pythonic way. (Real time capabilities were added in 0.2.6 with the help of yours truly).&lt;/p&gt;

&lt;p&gt;However, this does not solve the problem with vectorization. Just like Matlab, Python/Numpy is only fast for vectorizable algorithms. So as an example, let&#039;s define an iterative algorithm that is not vectorizable:&lt;/p&gt;

&lt;h2&gt;A Simple Limiter&lt;/h2&gt;

&lt;p&gt;A limiter is an audio effect that controls the system gain so that it does not exceed a certain threshold level. One could do this by simply cutting off any signal peaks above that level, but that sounds awful. So instead, the whole system gain is reduced smoothly if the signal gets too loud and is amplified back to its original gain again when it does not exceed the threshold any more. The important part is that the gain change is done &lt;em&gt;smoothly&lt;/em&gt;, since otherwise it would introduce a lot of distortion.&lt;/p&gt;

&lt;p&gt;If a signal peak is detected, the limiter will thus need a certain amount of time to reduce the gain accordingly. If you still want to prevent all peaks, the limiter will have to know of the peaks in advance, which is of course impossible in a real time system. Instead, the signal is delayed by a short time to give the limiter time to adjust the system gain before the peak is actually played. To keep this delay as short as possible, this &amp;quot;attack&amp;quot; phase where the gain is decreased should be very short, too. &amp;quot;Releasing&amp;quot; the gain back up to its original value can be done more slowly, thus introducing less distortion.&lt;/p&gt;

&lt;p&gt;With that out of the way, let me present you a simple implementation of such a limiter. First, lets define a signal envelope $e[n]$ that catches all the peaks and smoothly decays after them:&lt;/p&gt;

&lt;p&gt;$ e[n] = \max( |s[n]|, e[n-1] \cdot f_r ) $&lt;/p&gt;

&lt;p&gt;where $s[n]$ is the current signal and $0 &amp;lt; f_r &amp;lt; 1$ is a release factor.&lt;/p&gt;

&lt;p&gt;If this is applied to a signal, it will create an envelope like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bastibe.de/static/2012-11/envelope.png&quot; alt=&quot;Envelope&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on that envelope, and assuming that the signal ranges from -1 to 1, the target gain $g_t[n]$ can be calculated using&lt;/p&gt;

&lt;p&gt;\begin{equation}
g_t[n] = \begin{cases}
    1 &amp;amp; e[n] &amp;lt; t \\
    1 + t - e[n] &amp;amp; e[n] &amp;gt; t
\end{cases}
\end{equation}&lt;/p&gt;

&lt;p&gt;Now, the output gain $g[n]$ can smoothly move towards that target gain using&lt;/p&gt;

&lt;p&gt;$ g[n] = g[n-1] \cdot f_a + g_t[n] \cdot (1-f_a) $&lt;/p&gt;

&lt;p&gt;where $0 &amp;lt; f_a \ll f_r$ is the attack factor.&lt;/p&gt;

&lt;p&gt;Here you can see how that would look in practice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bastibe.de/static/2012-11/gain.png&quot; alt=&quot;Gain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zooming in on one of the limited section reveals that the gain is actually moving smoothly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bastibe.de/static/2012-11/detail.png&quot; alt=&quot;Detail Gain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gain can now be multiplied on the delayed input signal and will safely keep that below the threshold.&lt;/p&gt;

&lt;p&gt;In Python, this might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;special&quot;&gt;class&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; Limiter&lt;/span&gt;:
        &lt;span class=&quot;special&quot;&gt;def&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; __init__&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;self, attack_coeff, release_coeff, delay, dtype=float32&lt;/span&gt;)&lt;/span&gt;:
            self.delay_index = 0
            self.envelope = 0
            self.gain = 1
            self.delay = delay
            self.delay_line = zeros&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;delay, dtype=dtype&lt;/span&gt;)&lt;/span&gt;
            self.release_coeff = release_coeff
            self.attack_coeff = attack_coeff

        &lt;span class=&quot;special&quot;&gt;def&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; limit&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;self, signal, threshold&lt;/span&gt;)&lt;/span&gt;:
            &lt;span class=&quot;symbol&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;symbol&quot;&gt;in&lt;/span&gt; arange&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;len&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;signal&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;:
                self.delay_line&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;self.delay_index&lt;/span&gt;]&lt;/span&gt; = signal&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt;
                self.delay_index = &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;self.delay_index + 1&lt;/span&gt;)&lt;/span&gt; % self.delay

                &lt;span class=&quot;comment&quot;&gt;# calculate an envelope of the signal
&lt;/span&gt;                self.envelope *= self.release_coeff
                self.envelope  = max&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;abs&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;signal&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;, self.envelope&lt;/span&gt;)&lt;/span&gt;

                &lt;span class=&quot;comment&quot;&gt;# have self.gain go towards a desired limiter gain
&lt;/span&gt;                &lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt; self.envelope &amp;gt; threshold:
                    target_gain = &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;1+threshold-self.envelope&lt;/span&gt;)&lt;/span&gt;
                else:
                    target_gain = 1.0
                self.gain = &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt; self.gain*self.attack_coeff +
                              target_gain*&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;1-self.attack_coeff&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;)&lt;/span&gt;

                &lt;span class=&quot;comment&quot;&gt;# limit the delayed signal
&lt;/span&gt;                signal&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt; = self.delay_line&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;self.delay_index&lt;/span&gt;]&lt;/span&gt; * self.gain&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this limiter does not &lt;em&gt;actually&lt;/em&gt; clip all peaks completely, since the envelope for a single peak will have decayed a bit before the target gain will have reached it. Thus, the output gain will actually be slightly higher than what would be necessary to limit the output to the threshold. Since the attack factor is supposed to be significantly smaller than the release factor, this does not matter much though.&lt;/p&gt;

&lt;p&gt;Also, it would probably be more useful to define the factors $f_a$ and $f_r$ in terms of the time they take to reach their target and the threshold $t$ in dB FS.&lt;/p&gt;

&lt;h2&gt;Implementing audio processing in Python&lt;/h2&gt;

&lt;p&gt;A real-time audio processing framework using PyAudio would look like this:&lt;/p&gt;

&lt;p&gt;(&lt;code&gt;callback&lt;/code&gt; is a function that will be defined shortly)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; pyaudio &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; PyAudio, paFloat32

    pa = PyAudio&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;

    stream = pa.open&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;format = paFloat32,
                     channels = 1,
                     rate = 44100,
                     output = True,
                     frames_per_buffer = 1024,
                     stream_callback = callback&lt;/span&gt;)&lt;/span&gt;

    &lt;span class=&quot;symbol&quot;&gt;while&lt;/span&gt; stream.is_active&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;:
        sleep&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;0.1&lt;/span&gt;)&lt;/span&gt;

    stream.close&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
    pa.terminate&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open a &lt;code&gt;stream&lt;/code&gt;, which is a PyAudio construct that manages input and output to/from one sound device. In this case, it is configured to use &lt;code&gt;float&lt;/code&gt; values, only open one channel, play audio at a sample rate of 44100 Hz, have that one channel be output only and call the function &lt;code&gt;callback&lt;/code&gt; every 1024 samples.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;callback&lt;/code&gt; will be executed on a different thread, control flow will continue immediately after &lt;code&gt;pa.open()&lt;/code&gt;. In order to analyze the resulting signal, the &lt;code&gt;while stream.is_active()&lt;/code&gt; loop waits until the signal has been processed completely.&lt;/p&gt;

&lt;p&gt;Every time the &lt;code&gt;callback&lt;/code&gt; is called, it will have to return 1024 samples of audio data. Using the class &lt;code&gt;Limiter&lt;/code&gt; above, a sample counter &lt;code&gt;counter&lt;/code&gt; and an audio signal &lt;code&gt;signal&lt;/code&gt;, this can be implemented like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    limiter = Limiter&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;attack_coeff, release_coeff, delay, dtype&lt;/span&gt;)&lt;/span&gt;

    &lt;span class=&quot;special&quot;&gt;def&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; callback&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;in_data, frame_count, time_info, flag&lt;/span&gt;)&lt;/span&gt;:
        &lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt; flag:
            &lt;span class=&quot;symbol&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Playback Error: %i&quot;&lt;/span&gt; % flag&lt;/span&gt;)&lt;/span&gt;
        played_frames = counter
        counter += frame_count
        limiter.limit&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;signal&lt;span class=&quot;paren2&quot;&gt;[&lt;span class=&quot;code&quot;&gt;played_frames:counter&lt;/span&gt;]&lt;/span&gt;, threshold&lt;/span&gt;)&lt;/span&gt;
        &lt;span class=&quot;symbol&quot;&gt;return&lt;/span&gt; signal&lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;played_frames:counter&lt;/span&gt;]&lt;/span&gt;, paContinue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;paContinue&lt;/code&gt; at the end is a flag signifying that the audio processing is not done yet and the &lt;code&gt;callback&lt;/code&gt; wants to be called again. Returning &lt;code&gt;paComplete&lt;/code&gt; or an insufficient number of samples instead would stop audio processing after the current block and thus invalidate &lt;code&gt;stream.is_active()&lt;/code&gt; and resume control flow in the snippet above.&lt;/p&gt;

&lt;p&gt;Now this will run the limiter and play back the result. Sadly however, Python is just a bit too slow to make this work reliably. Even with a long block size of 1024 samples, this will result in occasional hickups and discontinuities. (Which the &lt;code&gt;callback&lt;/code&gt; will display in the &lt;code&gt;print(...)&lt;/code&gt; statement).&lt;/p&gt;

&lt;h2&gt;Speeding up execution using Cython&lt;/h2&gt;

&lt;p&gt;The limiter defined above could be rewritten in C like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// this corresponds to the Python Limiter class.
&lt;/span&gt;    &lt;span class=&quot;symbol&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;struct&lt;/span&gt; limiter_state_t &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
        &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; delay_index;
        &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; delay_length;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; envelope;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; current_gain;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; attack_coeff;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; release_coeff;
    &lt;/span&gt;}&lt;/span&gt; limiter_state;

    &lt;span class=&quot;special&quot;&gt;#define MAX(x,y) ((x)&amp;gt;(y)?(x):(y))
&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// this corresponds to the Python __init__ function.
&lt;/span&gt;    limiter_state init_limiter&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; attack_coeff, &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; release_coeff, &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; delay_len&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
        limiter_state state;
        state.attack_coeff = attack_coeff;
        state.release_coeff = release_coeff;
        state.delay_index = 0;
        state.envelope = 0;
        state.current_gain = 1;
        state.delay_length = delay_len;
        &lt;span class=&quot;symbol&quot;&gt;return&lt;/span&gt; state;
    &lt;/span&gt;}&lt;/span&gt;

    &lt;span class=&quot;symbol&quot;&gt;void&lt;/span&gt; limit&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; *signal, &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; block_length, &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; threshold,
               &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; *delay_line, limiter_state *state&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
        &lt;span class=&quot;symbol&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;block_length; i++&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren2&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
            delay_line&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;state-&amp;gt;delay_index&lt;/span&gt;]&lt;/span&gt; = signal&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt;;
            state-&amp;gt;delay_index = &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;state-&amp;gt;delay_index + 1&lt;/span&gt;)&lt;/span&gt; % state-&amp;gt;delay_length;

            &lt;span class=&quot;comment&quot;&gt;// calculate an envelope of the signal
&lt;/span&gt;            state-&amp;gt;envelope *= state-&amp;gt;release_coeff;
            state-&amp;gt;envelope = MAX&lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;fabs&lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;signal&lt;span class=&quot;paren5&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;, state-&amp;gt;envelope&lt;/span&gt;)&lt;/span&gt;;

            &lt;span class=&quot;comment&quot;&gt;// have current_gain go towards a desired limiter target_gain
&lt;/span&gt;            &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; target_gain;
            &lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;state-&amp;gt;envelope &amp;gt; threshold&lt;/span&gt;)&lt;/span&gt;
                target_gain = &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;1+threshold-state-&amp;gt;envelope&lt;/span&gt;)&lt;/span&gt;;
            &lt;span class=&quot;symbol&quot;&gt;else&lt;/span&gt;
                target_gain = 1.0;
            state-&amp;gt;current_gain = state-&amp;gt;current_gain*state-&amp;gt;attack_coeff +
                target_gain*&lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;1-state-&amp;gt;attack_coeff&lt;/span&gt;)&lt;/span&gt;;

            &lt;span class=&quot;comment&quot;&gt;// limit the delayed signal
&lt;/span&gt;            signal&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;]&lt;/span&gt; = delay_line&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;state-&amp;gt;delay_index&lt;/span&gt;]&lt;/span&gt; * state-&amp;gt;current_gain;
        &lt;/span&gt;}&lt;/span&gt;
    &lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In contrast to the Python version, the delay line will be passed to the &lt;code&gt;limit&lt;/code&gt; function. This is advantageous because now all audio buffers can be managed by Python instead of manually allocating and deallocating them in C.&lt;/p&gt;

&lt;p&gt;Now in order to plug this code into Python I will use Cython. First of all, a &amp;quot;Cython header&amp;quot; file has to be created that declares all exported types and functions to Cython:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    cdef extern &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;limiter.h&quot;&lt;/span&gt;:
        ctypedef struct limiter_state:
            int delay_index
            int delay_length
            float envelope
            float current_gain
            float attack_coeff
            float release_coeff

        limiter_state init_limiter&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;float attack_factor, float release_factor, int delay_len&lt;/span&gt;)&lt;/span&gt;
        void limit&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;float *signal, int block_length, float threshold,
                   float *delay_line, limiter_state *state&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very similar to the C header file of the limiter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;struct&lt;/span&gt; limiter_state_t &lt;span class=&quot;paren1&quot;&gt;{&lt;span class=&quot;code&quot;&gt;
        &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; delay_index;
        &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; delay_length;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; envelope;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; current_gain;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; attack_coeff;
        &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; release_coeff;
    &lt;/span&gt;}&lt;/span&gt; limiter_state;

    limiter_state init_limiter&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; attack_factor, &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; release_factor, &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; delay_len&lt;/span&gt;)&lt;/span&gt;;
    &lt;span class=&quot;symbol&quot;&gt;void&lt;/span&gt; limit&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; *signal, &lt;span class=&quot;symbol&quot;&gt;int&lt;/span&gt; block_length, &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; threshold,
               &lt;span class=&quot;symbol&quot;&gt;float&lt;/span&gt; *delay_line, limiter_state *state&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that squared away, the C functions are accessible for Cython. Now, we only need a small Python wrapper around this code so it becomes usable from Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; numpy as np
    cimport numpy as np
    cimport limiter

    DTYPE = np.float32
    ctypedef np.float32_t DTYPE_t

    cdef &lt;span class=&quot;special&quot;&gt;class&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; Limiter&lt;/span&gt;:
        cdef limiter.limiter_state state
        cdef np.ndarray delay_line
        &lt;span class=&quot;special&quot;&gt;def&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; __init__&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;self, float attack_coeff, float release_coeff,
                     int delay_length&lt;/span&gt;)&lt;/span&gt;:
            self.state = limiter.init_limiter&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;attack_coeff, release_coeff, delay_length&lt;/span&gt;)&lt;/span&gt;
            self.delay_line = np.zeros&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;delay_length, dtype=DTYPE&lt;/span&gt;)&lt;/span&gt;

        &lt;span class=&quot;special&quot;&gt;def&lt;/span&gt;&lt;span
class=&quot;keyword&quot;&gt; limit&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;self, np.ndarray&lt;span class=&quot;paren2&quot;&gt;[&lt;span class=&quot;code&quot;&gt;DTYPE_t,ndim=1&lt;/span&gt;]&lt;/span&gt; signal, float threshold&lt;/span&gt;)&lt;/span&gt;:
            limiter.limit&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&amp;lt;float*&amp;gt;np.PyArray_DATA&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;signal&lt;/span&gt;)&lt;/span&gt;,
                       &amp;lt;int&amp;gt;len&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;signal&lt;/span&gt;)&lt;/span&gt;, threshold,
                       &amp;lt;float*&amp;gt;np.PyArray_DATA&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;self.delay_line&lt;/span&gt;)&lt;/span&gt;,
                       &amp;lt;limiter.limiter_state*&amp;gt;&amp;amp;self.state&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first two lines set this file up to access Numpy arrays both from the Python domain and the C domain, thus bridging the gap. The &lt;code&gt;cimport limiter&lt;/code&gt; imports the C functions and types from above. The &lt;code&gt;DTYPE&lt;/code&gt; stuff is advertising the Numpy &lt;code&gt;float32&lt;/code&gt; type to C.&lt;/p&gt;

&lt;p&gt;The class is defined using &lt;code&gt;cdef&lt;/code&gt; as a C data structure for speed. Also, Cython would naturally translate every C struct into a Python dict and vice versa, but we need to pass the struct to &lt;code&gt;limit&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; have &lt;code&gt;limit&lt;/code&gt; modify it. Thus, &lt;code&gt;cdef limiter.limiter_state state&lt;/code&gt; makes Cython treat it as a C struct only. Finally, the &lt;code&gt;np.PyArray_DATA()&lt;/code&gt; expressions expose the C arrays underlying the Numpy vectors. This is really handy since we don&#039;t have to copy any data around in order to modify the vectors from C.&lt;/p&gt;

&lt;p&gt;As can be seen, the Cython implementation behaves nearly identically to the initial Python implementation (except for passing the &lt;code&gt;dtype&lt;/code&gt; to the constructor) and can be used as a plug-in replacement (with the aforementioned caveat).&lt;/p&gt;

&lt;p&gt;Finally, we need to build the whole contraption. The easiest way to do this is to use a setup file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; distutils.core &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; setup
    &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; distutils.extension &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; Extension
    &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; Cython.Distutils &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; build_ext
    &lt;span class=&quot;symbol&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;symbol&quot;&gt;import&lt;/span&gt; get_include

    ext_modules = &lt;span class=&quot;paren1&quot;&gt;[&lt;span class=&quot;code&quot;&gt;Extension&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;cython_limiter&quot;&lt;/span&gt;,
                             sources=&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;cython_limiter.pyx&quot;&lt;/span&gt;,
                                      &lt;span class=&quot;string&quot;&gt;&quot;limiter.c&quot;&lt;/span&gt;&lt;/span&gt;]&lt;/span&gt;,
                             include_dirs=&lt;span class=&quot;paren3&quot;&gt;[&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#039;.&#039;&lt;/span&gt;, get_include&lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;]&lt;/span&gt;

    setup&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;
        name = &lt;span class=&quot;string&quot;&gt;&quot;cython_limiter&quot;&lt;/span&gt;,
        cmdclass = &lt;span class=&quot;paren2&quot;&gt;{&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#039;build_ext&#039;&lt;/span&gt;: build_ext&lt;/span&gt;}&lt;/span&gt;,
        ext_modules = ext_modules
        &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that saved as &lt;em&gt;setup.py&lt;/em&gt;, &lt;code&gt;python setup.py build_ext --inplace&lt;/code&gt; will convert the Cython code to C, and then compile both the converted Cython code and C code into a binary Python module.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, I developed a simple limiter and how to implement it in both C and Python. Then, I showed how to use the C implementation from Python. Where the Python implementation is struggling to keep a steady frame rate going even at large block sizes, the Cython version runs smoothly down to 2-4 samples per block on a 2 Ghz Core i7. Thus, real-time audio processing is clearly feasable using Python, Cython, Numpy and PyAudio.&lt;/p&gt;

&lt;p&gt;You can find all the source code in this article at https://github.com/bastibe/simple-cython-limiter&lt;/p&gt;

&lt;h2&gt;Disclaimer&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;I invented this limiter myself. I could invent a better sounding limiter, but this article is more about how to combine Python, Numpy, PyAudio and Cython for real-time signal processing than about limiter design.&lt;/li&gt;
&lt;li&gt;I recently worked on something similar at my day job. They agreed that I could write about it so long as I don&#039;t divulge any company secrets. This limiter is not a descendant of any code I worked on.&lt;/li&gt;
&lt;li&gt;Whoever wants to use any piece of code here, feel free to do so. I am hereby placing it in the public domain. Feel free to contact me if you have questions.&lt;/li&gt;
&lt;/ol&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/An-error-occurred-loading-this-content-Try-again-later.html"/> <title>An error occurred loading this content. Try again later.</title> <published>2012-11-01 18:26</published> <updated>2012-11-01 18:26</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;Since we moved, our Apple TV has been giving us trouble: we would rent a movie on the Apple TV, and instead of playing it, the Apple TV would just display&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An error occurred loading this content.
Try again later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rebooting, then trying again, would sometimes solve the issue. Trying to play a trailer before trying to play the movie seemed to increase chances of the Apple TV actually downloading the movie, too.&lt;/p&gt;

&lt;p&gt;Finally, some forum or other pointed me to the correct solution: For some reason, the Apple TV did not play nice with our ISP DNS server. Simply changing the DNS server in the Apple TV settings to one of the Google DNS servers (8.8.8.8 and 8.8.4.4) solved the issue. Any other DNS will probably work, too.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/Names.html"/> <title>Names</title> <published>2012-10-28 22:08</published> <updated>2012-10-28 22:08</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;blockquote&gt;
&lt;p&gt;Names are everywhere in software. We name our variables, our functions, our arguments, classes, and packages. We name our source files and the directories that contain them. We name our jar files and war files and ear files. We name and name and name. Because we do so much of it, we&#039;d better do it well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-- from the Introduction to chapter 2 &amp;quot;Meaningful Names&amp;quot; of &amp;quot;Clean Code&amp;quot; by Robert C. Martin.&lt;/p&gt;

&lt;p&gt;Indeed we name a lot of things in software. As The Structure and Interpretation of Computer Programs points out, the primary purpose of a function (lambda) is to provide names for its arguments that are independent of names elsewhere. A function provides a closure in which stuff has defined names. The closure itself can then be embedded into other closures to form composite structures. Take any complex program structure and decompose its names through all its lambdas and you will only find more names right until you reach turtles.&lt;/p&gt;

&lt;p&gt;At its heart, programming is about naming things. If I squint my eyes a little, I can nearly convince myself that naming is really all there is. All the rest is just playing games with syntax.&lt;/p&gt;

&lt;p&gt;It&#039;s situations like this that I realize that The Structure and Interpretation of Computer Programs really changed how I view programming.&lt;/p&gt;

&lt;p&gt;If you like programming at all, I implore you to &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot; &gt;read it&lt;/a&gt;, or &lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/&quot; &gt;watch it&lt;/a&gt;, or &lt;a href=&quot;http://mitpress.mit.edu/books/structure-and-interpretation-computer-programs&quot; &gt;buy it&lt;/a&gt;. It really blew my mind.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/Matlab-Mex-Homebrew-and-OS-X-108-Mountain-Lion.html"/> <title>Matlab, Mex, Homebrew and OS X 10.8 Mountain Lion</title> <published>2012-10-20 10:12</published> <updated>2012-10-20 10:12</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;Now that I am a student again, I have to use Matlab again. Among the many joys of Matlab is the compilation of mex files.&lt;/p&gt;

&lt;p&gt;Because it does not work. So angry.&lt;/p&gt;

&lt;p&gt;Basically, &lt;code&gt;mex&lt;/code&gt; does not work because it assumes that you have OS X 10.6 installed. In OS X 10.6 you had &lt;code&gt;gcc-4.2&lt;/code&gt; and your system SDK was stored in &lt;em&gt;/Developer/SDKs/MacOSX10.6.sdk&lt;/em&gt;. However, as of 10.7 (I think), the &lt;em&gt;/Developer&lt;/em&gt; directory has been deprecated in favor of distributing the whole development environment within the App package of XCode. Also, &lt;code&gt;gcc&lt;/code&gt; has been deprecated in favor of &lt;code&gt;clang&lt;/code&gt;. While a &lt;code&gt;gcc&lt;/code&gt; binary is still provided, &lt;code&gt;gcc-4.2&lt;/code&gt; is not. Of course, that is what &lt;code&gt;mex&lt;/code&gt; relies on. Lastly, &lt;code&gt;mex&lt;/code&gt; of course completely disregards common system paths such as, say, &lt;em&gt;/usr/local/bin&lt;/em&gt;, so compiling against some homebrew library won&#039;t work.&lt;/p&gt;

&lt;p&gt;At least these things are rather easy to fix, since all these settings are saved in a file called &lt;em&gt;mexopts.sh&lt;/em&gt;, which is saved to &lt;em&gt;~/.matlab/R2012a/&lt;/em&gt; by default. The relevant section on 64-bit OS X begins after &lt;code&gt;maci64)&lt;/code&gt; and should look like this: (changes are marked by comments)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #----------------------------------------------------------------------------
                # StorageVersion: 1.0
                # CkeyName: GNU C
                # CkeyManufacturer: GNU
                # CkeyLanguage: C
                # CkeyVersion:
                CC=&#039;gcc&#039; # used to be &#039;gcc-4.2&#039;
                
                # used to be &#039;/Developer/SDKs/MacOSX10.6.sdk&#039;
                SDKROOT=&#039;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk&#039; 
                MACOSX_DEPLOYMENT_TARGET=&#039;10.8&#039; # used to be &#039;10.5&#039;
                ARCHS=&#039;x86_64&#039;
                CFLAGS=&quot;-fno-common -no-cpp-precomp -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET&quot;
                CFLAGS=&quot;$CFLAGS  -fexceptions&quot;
                CFLAGS=&quot;$CFLAGS -I/usr/local/include&quot; # Homebrew include path
                CLIBS=&quot;$MLIBS&quot;
                COPTIMFLAGS=&#039;-O2 -DNDEBUG&#039;
                CDEBUGFLAGS=&#039;-g&#039;
    #
                CLIBS=&quot;$CLIBS -lstdc++&quot;
                # C++keyName: GNU C++
                # C++keyManufacturer: GNU
                # C++keyLanguage: C++
                # C++keyVersion:
                CXX=g++ # used to be &#039;g++-4.2&#039;
                CXXFLAGS=&quot;-fno-common -no-cpp-precomp -fexceptions -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET&quot;
                CXXLIBS=&quot;$MLIBS -lstdc++&quot;
                CXXOPTIMFLAGS=&#039;-O2 -DNDEBUG&#039;
                CXXDEBUGFLAGS=&#039;-g&#039;
    #
                # FortrankeyName: GNU Fortran
                # FortrankeyManufacturer: GNU
                # FortrankeyLanguage: Fortran
                # FortrankeyVersion:
                FC=&#039;gfortran&#039;
                FFLAGS=&#039;-fexceptions -m64 -fbackslash&#039;
                FC_LIBDIR=`$FC -print-file-name=libgfortran.dylib 2&gt;&amp;1 | sed -n &#039;1s/\/*libgfortran\.dylib//p&#039;`
                FC_LIBDIR2=`$FC -print-file-name=libgfortranbegin.a 2&gt;&amp;1 | sed -n &#039;1s/\/*libgfortranbegin\.a//p&#039;`
                FLIBS=&quot;$MLIBS -L$FC_LIBDIR -lgfortran -L$FC_LIBDIR2 -lgfortranbegin&quot;
                FOPTIMFLAGS=&#039;-O&#039;
                FDEBUGFLAGS=&#039;-g&#039;
    #
                LD=&quot;$CC&quot;
                LDEXTENSION=&#039;.mexmaci64&#039;
                LDFLAGS=&quot;-Wl,-twolevel_namespace -undefined error -arch $ARCHS -Wl,-syslibroot,$SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET&quot;
                LDFLAGS=&quot;$LDFLAGS -bundle -Wl,-exported_symbols_list,$TMW_ROOT/extern/lib/$Arch/$MAPFILE&quot;
                LDFLAGS=&quot;$LDFLAGS -L/usr/local/lib&quot; # Homebrew library path
                LDOPTIMFLAGS=&#039;-O&#039;
                LDDEBUGFLAGS=&#039;-g&#039;
    #
                POSTLINK_CMDS=&#039;:&#039;
    #----------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To summarize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;changed &lt;code&gt;gcc-4.2&lt;/code&gt; to &lt;code&gt;gcc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changed &lt;code&gt;/Developer/SDKs/MacOSX10.6.sdk&lt;/code&gt; to &lt;code&gt;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changed &lt;code&gt;10.5&lt;/code&gt; to &lt;code&gt;10.8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;added &lt;code&gt;CFLAGS=&amp;quot;$CFLAGS -I/usr/local/include&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changed &lt;code&gt;g++-4.2&lt;/code&gt; to &lt;code&gt;g++&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;added &lt;code&gt;LDFLAGS=&amp;quot;$LDFLAGS -L/usr/local/lib&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With those settings, the mex compiler should work and it should pick up any libraries installed by homebrew.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/My-Emacs-customizations.html"/> <title>My Emacs customizations</title> <published>2012-10-14 09:14</published> <updated>2012-10-14 09:14</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;I don&#039;t host my &lt;code&gt;.emacs&lt;/code&gt; in a repository. I tried it for a while, but it did not work for me. I think repos are great for managing multiple divergent versions of the same source tree. However, my dotfiles should never diverge, they should just be kept in sync. This is what Dropbox is great at. So I use Dropbox instead of git.&lt;/p&gt;

&lt;p&gt;One downside of that is that it is not as easy to provide a public link to my dotfiles. Or maybe it is. Here goes&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.dropbox.com/s/0ne31wkur81wgzb/.emacs&quot; &gt;My &lt;em&gt;.emacs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now on to the meat of this post: Some customizations I made that I think are cool.&lt;/p&gt;

&lt;h2&gt;When Emacs starts up, make it fit the left half of the screen&lt;/h2&gt;

&lt;p&gt;First, I need a function to set the size of a frame in terms of pixels. Emacs only provides &lt;code&gt;set-frame-size&lt;/code&gt;, but that works on characters, not pixels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; set-frame-pixel-size &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;frame width height&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;string&quot;&gt;&quot;Sets size of FRAME to WIDTH by HEIGHT, measured in pixels.&quot;&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;let&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;pixels-per-char-width &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;/ &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;frame-pixel-width&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;frame-width&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
        &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;pixels-per-char-height &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;/ &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;frame-pixel-height&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;frame-height&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;set-frame-size frame
                    &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;floor &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;/ width pixels-per-char-width&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
                    &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;floor &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;/ height pixels-per-char-height&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, a function that uses the above to set the frame size to exactly fit the left half of the screen. Note that the &lt;code&gt;excess-...&lt;/code&gt; variables account for things like the menu bar, the dock or the task bar so you might have to adapt these values to your particular windowing environment. The values given here work for dockless OSX.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; use-left-half-screen &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;interactive&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;let*&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;excess-width 32&lt;/span&gt;)&lt;/span&gt;
         &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;excess-height 48&lt;/span&gt;)&lt;/span&gt;
         &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;half-screen-width &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;- &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;/ &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;x-display-pixel-width&lt;/span&gt;)&lt;/span&gt; 2&lt;/span&gt;)&lt;/span&gt; excess-width&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
         &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;screen-height &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;- &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;x-display-pixel-height&lt;/span&gt;)&lt;/span&gt; excess-height&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;set-frame-pixel-size &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;selected-frame&lt;/span&gt;)&lt;/span&gt; half-screen-width screen-height&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, when Emacs starts up, make it use half the screen. Just how I like it!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt;&lt;/i&gt; window-system
    &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;use-left-half-screen&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Make shell split windows auto-resize&lt;/h2&gt;

&lt;p&gt;Usually when you open a new split window in Emacs, it takes up half the frame. For some kinds of windows, I like them to be smaller. So here is a little snippet that shrinks some kinds of windows to 15 lines of height.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;add-hook &#039;window-configuration-change-hook
          &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;lambda&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
            &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;when &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;or &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;string-equal &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-name&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;*Python*&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
                      &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;string-equal &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-name&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;*eshell*&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
                      &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;string-equal &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-name&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;*tex-shell*&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
              &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;not &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;eq &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;window-height&lt;/span&gt;)&lt;/span&gt; 15&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
                  &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;enlarge-window &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;- 15 &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;window-height&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Create a new line above/below the current one&lt;/h2&gt;

&lt;p&gt;There is one feature of Vim that I really missed: &lt;code&gt;o&lt;/code&gt;/&lt;code&gt;O&lt;/code&gt;, which &#039;opens&#039; a new line above or below the current one without changing the current line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; vi-open-line-above &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;string&quot;&gt;&quot;Insert a newline above the current line and put point at beginning.&quot;&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;interactive&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;unless &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;bolp&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;beginning-of-line&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;newline&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;forward-line -1&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;indent-according-to-mode&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; vi-open-line-below &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;string&quot;&gt;&quot;Insert a newline below the current line and put point at beginning.&quot;&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;interactive&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;unless &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;eolp&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;end-of-line&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;newline-and-indent&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;global-set-key &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;kbd &lt;span class=&quot;string&quot;&gt;&quot;C-o&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &#039;vi-open-line-below&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;global-set-key &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;kbd &lt;span class=&quot;string&quot;&gt;&quot;M-o&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &#039;vi-open-line-above&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;When editing LaTeX, show PDF output in Emacs&lt;/h2&gt;

&lt;p&gt;Emacs provides an awesome mode for editing LaTeX files. But isn&#039;t it sad that you always have to leave Emacs for viewing the PDF? Well, not any more.&lt;/p&gt;

&lt;p&gt;This function will open or refresh a split window with the generated PDF file in it. Thus, when I edit LaTeX, I will hit C-c C-c to compile, then C-c C-v to see the PDF. All that without having to leave the LaTeX file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; open/show pdf file within Emacs using doc-view-mode
&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; open-show-pdf &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;interactive&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;let&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;tex-buffer-name &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-name&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
        &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;pdf-buffer-name &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;concat &lt;span class=&quot;paren6&quot;&gt;(&lt;span class=&quot;code&quot;&gt;TeX-master-file&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;.pdf&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;get-buffer pdf-buffer-name&lt;/span&gt;)&lt;/span&gt;
        &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;switch-to-buffer-other-window pdf-buffer-name&lt;/span&gt;)&lt;/span&gt;
      &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;find-file-other-window pdf-buffer-name&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;if&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;not &lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;eq major-mode &#039;doc-view-mode&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
        &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;doc-view-mode&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;doc-view-revert-buffer t t&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;switch-to-buffer-other-window tex-buffer-name&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;add-hook &#039;LaTeX-mode-hook
          &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;lambda&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
            &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;define-key&lt;/span&gt;&lt;/i&gt; LaTeX-mode-map &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;kbd &lt;span class=&quot;string&quot;&gt;&quot;C-c C-v&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &#039;open-show-pdf&lt;/span&gt;)&lt;/span&gt;
            &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;visual-line-mode t&lt;/span&gt;)&lt;/span&gt;
            &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;turn-on-reftex&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
          t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/Text-editing-with-confidence-and-Emacs.html"/> <title>Text editing with confidence and Emacs</title> <published>2012-10-13 11:30</published> <updated>2012-10-13 11:30</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;In college, I realized for the first time how a good text editor could save me serious time, when I dragged an image file into Textmate and it auto-inserted all the LaTeX boilerplate for a figure. A few years later, on my first job, I learned &lt;a href=&quot;http://www.viemu.com/&quot; &gt;Vim key bindings for Visual Studio&lt;/a&gt; because I hated text editing in Visual Studio so much. This showed me another way how a good text editor could save me serious time. A year after that, I was bored and tried Emacs. With Emacs, I discovered the marvelous world of &lt;a href=&quot;https://en.wikipedia.org/wiki/REPL&quot; &gt;REPLs&lt;/a&gt; and &lt;a href=&quot;http://orgmode.org/&quot; &gt;outlining&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that this is not supposed to be a comparison between text editors. I have done that &lt;a href=&quot;http://bastibe.de/text-editors.html&quot; &gt;already&lt;/a&gt;. This will be a collection of some of the coolest things my text editor of choice is capable of. Stuff I love!&lt;/p&gt;

&lt;h2&gt;Text editing&lt;/h2&gt;

&lt;p&gt;In my admittedly short history of working with computers and text professionally I have realized a universal truth about the tools I like to use: A great tool is a tool I can trust. A tool I can use with confidence because I know that it will do what I want. Furthermore, a great tool is a tool that does what I want with a minimum amount of friction.&lt;/p&gt;

&lt;p&gt;Here is one of my pet peeve with many text editors: Whenever I initiate a text search, a modal dialog box pops up where I have to enter the search phrase, then click a button to search for that word. In contrast &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Incremental-Search.html#Incremental-Search&quot; &gt;great&lt;/a&gt; &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/usr_03.html#03.8&quot; &gt;text&lt;/a&gt; &lt;a href=&quot;http://docs.sublimetext.info/en/latest/search_and_replace/search_and_replace.html&quot; &gt;editors&lt;/a&gt; allow searching for text without changing to a different window and show the results immediately while entering the search string. This is very fast and precise. In fact, it is so useful that searching is one of the most popular means of text navigation in text editors that have it.&lt;/p&gt;

&lt;p&gt;This is a theme that goes through all these features: I look for stuff that is fast and precise, because this will enable more powerful applications of seemingly simple techniques.&lt;/p&gt;

&lt;h2&gt;Outlining and task management&lt;/h2&gt;

&lt;p&gt;Outlining is writing an hierarchical list of stuff that can be reordered and sub-trees can be hidden. I tried some graphical outliners before. I did not quite see the point of it. Instead, I always kept my todo lists in simple &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; &gt;Markdown&lt;/a&gt; files. It worked well enough.&lt;/p&gt;

&lt;p&gt;But with Emacs, I found out about &lt;a href=&quot;http://orgmode.org&quot; &gt;org-mode&lt;/a&gt;, which is at its heart an outliner with a syntax somewhat like Markdown. It proved to be surprisingly powerful to be able to easily refile entries or whole sub-trees in my todo lists. Also, having trees be collapsible effectively enabled me to consolidate all my todo management into one file without that file becoming unmanageably big.&lt;/p&gt;

&lt;p&gt;Add to that the more advanced task tracking features of org-mode, such as &lt;a href=&quot;http://orgmode.org/features.html#clocking&quot; &gt;time tracking&lt;/a&gt; or &lt;a href=&quot;http://orgmode.org/features.html#planning&quot; &gt;advanced todo planning&lt;/a&gt; and this has become one of the most pivotal tools I use daily.&lt;/p&gt;

&lt;h2&gt;Shell interaction and operating system compatibility&lt;/h2&gt;

&lt;p&gt;Whenever my job required me to work on Windows, I often found it jarring to not have a command line available. Granted, there is &lt;a href=&quot;http://cygwin.com/&quot; &gt;Cygwin&lt;/a&gt;, but that does not play with the Windows directory structure too well. Also, many programs behave slightly differently on Linux, Cygwin and OSX. Basically, it drove me nuts.&lt;/p&gt;

&lt;p&gt;Again, Emacs came to the rescue though: &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/eshell/What-is-Eshell_003f.html&quot; &gt;Eshell&lt;/a&gt; is a shell implemented in Emacs with no external dependencies. Thus, it comes installed on all my machines and works the same way on every operating system. Sadly though, Eshell is not quite full-featured and compatibility with some shell programs is kind of rough. In particular, it does not work well with &lt;code&gt;less&lt;/code&gt; like scrolling buffers. However, some of those, like &lt;code&gt;man&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt; are automatically opened in a special mode in Emacs itself, so this is not as bad as it sounds.&lt;/p&gt;

&lt;p&gt;At more than one point, Eshell probably saved my sanity.&lt;/p&gt;

&lt;h2&gt;Git interaction&lt;/h2&gt;

&lt;p&gt;Source control is a crucial tool when working with source code. In college we used &lt;a href=&quot;http://subversion.tigris.org/&quot; &gt;SVN&lt;/a&gt;. Even cooler is &lt;a href=&quot;http://git-scm.com/&quot; &gt;Git&lt;/a&gt;, though the initial learning curve is pretty bad. Personally, I learned it by mucking around on the command line and breaking stuff there, then using &lt;a href=&quot;http://www.git-tower.com/&quot; &gt;Tower&lt;/a&gt; to restore the repository to some sane state. Sadly though, Tower is OSX only, so I was kind of screwed on Windows and Linux.&lt;/p&gt;

&lt;p&gt;Again, enter Emacs: Emacs has this magical mode called &lt;a href=&quot;http://magit.github.com/magit/magit.html#Introduction&quot; &gt;magit&lt;/a&gt;, which builds an interactive git interaction program within Emacs. With magit, all the major git commands are just a keystroke away and diffs or logs are easily accessible, too. It really is a major feat!&lt;/p&gt;

&lt;h2&gt;Grab bag&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacs&#039; integrated &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/ediff/Introduction.html&quot; &gt;ediff&lt;/a&gt; is a joy to use.&lt;/li&gt;
&lt;li&gt;REPLs are one honking great idea and come with most language modes for dynamic languages in Emacs.&lt;/li&gt;
&lt;li&gt;Emacs&#039; &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot; &gt;LaTeX mode&lt;/a&gt; is amazingly powerful. Combine that with Emacs&#039; ability to display PDF files &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html&quot; &gt;graphically&lt;/a&gt; in a buffer and you have an awesome LaTeX environment.&lt;/li&gt;
&lt;li&gt;Emacs&#039; documentation is wonderful. I learned many a trick just idly leafing through the built in Emacs documentation.&lt;/li&gt;
&lt;li&gt;Built in package management for extensions is a great time saver. This is available in &lt;a href=&quot;https://github.com/gmarik/vundle#about&quot; &gt;Vim&lt;/a&gt; and &lt;a href=&quot;http://wbond.net/sublime_packages/package_control&quot; &gt;Sublime Text&lt;/a&gt; as an addon, too.&lt;/li&gt;
&lt;li&gt;Lisp is indeed beautiful and elisp is quite joyful to program. I never really went beyond simple configuration in Vim. My &lt;code&gt;.emacs&lt;/code&gt; file contains some quite sophisticated small programs though.&lt;/li&gt;
&lt;/ul&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/A-Story-about-Schemes.html"/> <title>A Story about Schemes</title> <published>2012-09-20 20:21</published> <updated>2012-09-20 20:21</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; If you are a programmer, or wanting to be a programmer, or interested in programming, or, well, reading this, you should absolutely, positively watch the 1986 MIT lecture about &lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/&quot; &gt;The Structure and Interpretation of Computer Programs&lt;/a&gt;. (Most conveniently available &lt;a href=&quot;http://ia600401.us.archive.org/8/items/MIT_Structure_of_Computer_Programs_1986/&quot; &gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I tried reading &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot; &gt;the book&lt;/a&gt; numerous times, but it was too dry for my taste. The lecture however is juicy, brain-bending bliss. Especially if you don&#039;t know much functional programming yet. It certainly blew my mind. Frequently. Like, every ten minutes. Basically, I feel reborn as a programmer, with a new sense of what I am doing and how it should be done. &lt;/p&gt;

&lt;p&gt;However, this is not about SICP, it is about Scheme, which happens to be the programming language that SICP uses to preach its sermons. Above all, Scheme beautiful. It is an astounding marriage of simplicity and power. It is also a mess in terms of implementations. There are dozens of implementations and they all implement a different, partly overlapping set of features that may or may not be part of the canonical Scheme--if there is such a thing.&lt;/p&gt;

&lt;p&gt;So, how to select the correct Scheme? Naively, I first chose the one SICP uses, &lt;a href=&quot;http://www.gnu.org/software/mit-scheme/&quot; &gt;MIT-Scheme&lt;/a&gt;. However, I soon found out that it does not work well with Emacs (that is, it did not work at all with &lt;code&gt;scheme-mode&lt;/code&gt; and &lt;code&gt;run-scheme&lt;/code&gt;). Also, its prompt is weird: &lt;code&gt;]=&amp;gt;&lt;/code&gt;. Whatever.&lt;/p&gt;

&lt;p&gt;So next, I tried &lt;a href=&quot;http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page&quot; &gt;Gambit Scheme&lt;/a&gt;, which works a lot better with Emacs. But then, I soon found out that it does not support functions like &lt;code&gt;filter&lt;/code&gt;, which are kind of essential. I was quick to write my own version of that, but really, this stuff should be provided. Turns out, &lt;code&gt;filter&lt;/code&gt; is part of a Scheme Request For Implementation, or SRFI. &lt;code&gt;filter&lt;/code&gt; is part of SRFI1. There is a &lt;a href=&quot;http://srfi.schemers.org/srfi-implementers.html&quot; &gt;huge list&lt;/a&gt; of different Schemes and the SRFIs they support. Also, there is a list of &lt;a href=&quot;http://www.cs.utah.edu/~mflatt/benchmarks-20100126/log3/Benchmarks.html&quot; &gt;Schemes sorted by performance&lt;/a&gt;. With &lt;a href=&quot;http://www.cs.utah.edu/%7Emflatt/benchmarks-20100126/log3/Benchmarks-plot.html&quot; &gt;plots&lt;/a&gt;, even. It&#039;s a mess.&lt;/p&gt;

&lt;p&gt;So this left me profoundly confused. What Scheme would I use? Ideally, it should be fast, work with Emacs and implement a reasonable set of SRFIs. Homebrew lists these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bigloo         chibi-scheme  chicken
gambit-scheme  gauche        guile
kawa           mit-scheme    plt-racket
scheme48       scsh          sisc-scheme
stklos         tinyscheme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Difficult decision. Frankly, I don&#039;t have an answer. That said, I found &lt;code&gt;plt-racket&lt;/code&gt; to be a joy to work with. &lt;code&gt;(help filter)&lt;/code&gt; will open your browser with the appropriate help page for &lt;code&gt;filter&lt;/code&gt;. Amazing. Also, it implements &lt;a href=&quot;http://srfi.schemers.org/srfi-implementers.html&quot; &gt;a long list&lt;/a&gt; of SRFIs that will probably satisfy my simplistic needs. And the &lt;a href=&quot;http://docs.racket-lang.org/&quot; &gt;documentation&lt;/a&gt; is excellent. And then there is DrRacket, which is a nice REPL that comes right with &lt;a href=&quot;http://racket-lang.org/&quot; &gt;Racket&lt;/a&gt;. I like it.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/Kindleapp-not-starting-on-a-case-sensitive-file-system.html"/> <title>Kindle.app not starting on a case-sensitive file system</title> <published>2012-09-13 20:19</published> <updated>2012-09-13 20:19</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;So Kindle.app was updated through the App Store and did not start any more. It just crashed and the crash reporter came up.&lt;/p&gt;

&lt;p&gt;A quick look at Console.app turns up a link to the actual crash report. And the crash report starts with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Dyld Error Message:
  Library not loaded: @executable_path/../Frameworks/libWEbCoreKRF.dylib
  Referenced from: /Applications/Kindle.app/Contents/Frameworks/libWebCoreViewer.dylib
  Reason: image not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libWEbCoreKRF.dylib&lt;/code&gt;? With a capitalized &lt;code&gt;E&lt;/code&gt;? That looks very much like a spelling error. So, point your terminal to &lt;code&gt;/Applications/Kindle.app/Contents/Frameworks/&lt;/code&gt;, type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -s libWebCoreKRF.dylib libWEbCoreKRF.dylib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to create a symlink with the misspelled name. Done.&lt;/p&gt;

&lt;p&gt;Kindle works again.&lt;/p&gt;

&lt;p&gt;Spelling is hard, it seems.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="http://bastibe.de/posts/On-the-Virtue-of-Contributing-to-and-Using-Open-Source-Software.html"/> <title>On the Virtue of Contributing to and Using Open Source Software</title> <published>2012-09-08 08:44</published> <updated>2012-09-08 08:44</updated> <author> <name>Bastian Bechtold</name> <uri>http://bastibe.de</uri> </author> <content type="html">

&lt;p&gt;I am a mostly self-taught programmer. Apart from a few programming side jobs at the university, I have been programming professionally for the last two and a half years.&lt;/p&gt;

&lt;p&gt;About two years ago, we wanted to buy a Matlab license for our company. However, our investors declined for dubious reasons. So I started looking for alternatives. Inspired by a good friend (thank you, Marc), I looked into Python. Python has this brilliant environment for &lt;a href=&quot;http://numpy.scipy.org/&quot; title=&quot;NumPy&quot;&gt;numerical&lt;/a&gt; &lt;a href=&quot;http://scipy.org/&quot; title=&quot;SciPy&quot;&gt;computation&lt;/a&gt; and &lt;a href=&quot;http://matplotlib.sourceforge.net/&quot; title=&quot;matplotlib&quot;&gt;plotting&lt;/a&gt; that, for my particular purposes, rivals Matlab.&lt;/p&gt;

&lt;p&gt;However, just like Matlab, Python lacked a way of playing real time audio out of the box. At the university, we used &lt;a href=&quot;http://playrec.co.uk/&quot; title=&quot;Playrec&quot;&gt;Playrec&lt;/a&gt; for that purpose, which implements &lt;a href=&quot;http://www.portaudio.com/&quot; title=&quot;PortAudio&quot;&gt;PortAudio&lt;/a&gt; bindings for Matlab. Luckily, there was a similar package available for Python, called &lt;a href=&quot;http://people.csail.mit.edu/hubert/pyaudio/&quot; title=&quot;PyAudio&quot;&gt;PyAudio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, it had one crucial flaw: it only implemented blocking-mode audio I/O, so not much luck for my real time requirements. (Blocking mode means that whenever you want to play some audio, you have to wait until the piece of audio finishes playing before you can begin to play the next piece or do some computation. Clearly, you can not process audio while it is playing with such a scheme). After a lot of research, I figured that my best bet would be to dive in and add non blocking I/O to PyAudio.&lt;/p&gt;

&lt;p&gt;At the time, I knew nothing of the Python C API (or Python, really), so those first attempts were riddled with subtle bugs and memory leaks. Nevertheless, it got the job done. I could play back audio in real time using Python!&lt;/p&gt;

&lt;p&gt;This was a revelation to me: I could not only &lt;em&gt;use&lt;/em&gt; a piece of software, I could also &lt;em&gt;change&lt;/em&gt; it and mold it to my special needs!&lt;/p&gt;

&lt;p&gt;Thus, I put up my changes on &lt;a href=&quot;https://github.com/bastibe/PyAudio&quot; title=&quot;PyAudio on github&quot;&gt;github&lt;/a&gt; and emailed the PyAudio maintainer. While the maintainer at the time did not have the time to incorporate my changes into the official PyAudio distribution, a few people discovered my version of it on github and contributed to it!&lt;/p&gt;

&lt;p&gt;This, again, was a revelation to me: Not only could &lt;em&gt;I&lt;/em&gt; change stuff other people did, wonderful people from around the world could collaborate and help each other. It always gave me a warm feeling of appreciation when some stranger on the internet chose to work with me!&lt;/p&gt;

&lt;p&gt;Then, finally, I decided to take the plunge to Python 3. The main obstacle for this was that PyAudio did not support Python 3. So, again, I dove in and figured out how to make it compatible with Python 3. Again, I put the changes up on github and emailed the official PyAudio maintainer. This time, he took immediate notice and we started working on an official release of PyAudio including Python 3 support and non-blocking I/O.&lt;/p&gt;

&lt;p&gt;And during those weeks, I had my third, and biggest, revelation about Open Source Software: The PyAudio maintainer is a brilliant mind, and I was humbled to find that I could learn a lot from this man.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By working on Open Source Software, you can work with really smart people, and learn from them. And the fruits of that labor can serve as instructions to yet more people to learn from.&lt;/em&gt;&lt;/p&gt;
</content> </entry> </feed>
ent> </entry> </feed>
