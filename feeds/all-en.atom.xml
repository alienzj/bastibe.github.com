<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bastis Scratchpad On The Internet</title><link href="http://bastibe.de/" rel="alternate"></link><link href="http://bastibe.de/feeds/all-en.atom.xml" rel="self"></link><id>http://bastibe.de/</id><updated>2013-01-20T10:55:00+01:00</updated><entry><title>A Python Primer for Matlab Users</title><link href="http://bastibe.de/a-python-primer-for-matlab-users.html" rel="alternate"></link><updated>2013-01-20T10:55:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2013-01-20:a-python-primer-for-matlab-users.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Why would you want to use Python over Matlab?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Because Python is free and Matlab is not.&lt;/li&gt;
&lt;li&gt;Because Python is a general purpose programming language and Matlab is not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me qualify that a bit. Matlab is a very useful programming environment for numerical problems. For a very particular set of problems, Matlab is an awesome tool. For many other problems however, it is just about unusable. For example, you would not write a complex GUI program in Matlab, you would not write your blogging engine in Matlab and you would not write a web service in Matlab. You can do all that and more in Python.&lt;/p&gt;
&lt;h2&gt;Python as a Matlab replacement&lt;/h2&gt;
&lt;p&gt;The biggest strength of Matlab is its matrix engine. Most of the data you work with in Matlab are matrices and there is a host of functions available to manipulate and visualize those matrices. Python, by itself, does not have a convenient matrix engine. However, there are three packages (think Matlab Toolboxes) out there that will add this capability to Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numpy (the matrix engine)&lt;/li&gt;
&lt;li&gt;Scipy (matrix manipulation)&lt;/li&gt;
&lt;li&gt;Matplotlib (plotting)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can either grab the individual installers for &lt;a href="http://python.org"&gt;Python&lt;/a&gt;, &lt;a href="http://numpy.org"&gt;Numpy&lt;/a&gt;, &lt;a href="http://scipy.org"&gt;Scipy&lt;/a&gt; and &lt;a href="http://matplotlib.org"&gt;Matplotlib&lt;/a&gt; from their respective websites, or get them pre-packaged from &lt;a href="https://code.google.com/p/pythonxy/"&gt;pythonxy()&lt;/a&gt; or &lt;a href="http://www.enthought.com/products/epd.php"&gt;EPD&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;A 30,000 foot overview&lt;/h2&gt;
&lt;p&gt;Like Matlab, Python is &lt;em&gt;interpreted&lt;/em&gt;, that is, there is no need for a compiler and code can be executed at any time as long as Python is installed on the machine. Also, code can be copied from one machine to another and will run without change.&lt;/p&gt;
&lt;p&gt;Like Matlab, Python is &lt;em&gt;dynamically typed&lt;/em&gt;, that is, every variable can hold data of any type, as in:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c"&gt;# a number&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# a list&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;    &lt;span class="c"&gt;# a string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Contrast this with C, where you can not assign different data types to the same variable:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unlike Matlab, Python is &lt;em&gt;strongly typed&lt;/em&gt;, that is, you can not add a number to a string.
In Matlab, adding a single number to a string will convert that string into an array of numbers, then add the single number to each of the numbers in the array. Python will simply throw an error.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;% Matlab&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;% [121 106 125 121]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;# TypeError: Can&amp;#39;t convert &amp;#39;int&amp;#39; object to str implicitly&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unlike Matlab, every Python file can contain as many functions as you like. Basically, you can organize your code in as many files as you want. To access functions from other files, use &lt;code&gt;import filename&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unlike Matlab, Python is very quick to start. In fact, most operating systems automatically start a new Python process whenever you run a Python program and quit that process once the program has finished. Thus, every Python program behaves as if it indeed were an independent program. There is no need to wait for that big Matlab mother ship to start before writing or executing code.&lt;/p&gt;
&lt;p&gt;Unlike Matlab, the source code of Python is readily available. Every detail of Python's inner workings is available to everyone. It is thus feasible and encouraged to actively participate in the development of Python itself or some add-on package. Furthermore, there is no dependence on some company deciding where to go next with Python.&lt;/p&gt;
&lt;h2&gt;Reading Python&lt;/h2&gt;
&lt;p&gt;When you start up Python, it is a rather empty environment. In order to do anything useful, you first have to &lt;code&gt;import&lt;/code&gt; some functionality into your workspace. Thus, you will see a few lines of &lt;code&gt;import&lt;/code&gt; statements at the top of every Python file. Moreover, Python has &lt;em&gt;namespaces&lt;/em&gt;, so if you &lt;code&gt;import numpy&lt;/code&gt;, you will have to prefix every feature of Numpy with its name, like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is clearly cumbersome if you are planning to use Numpy all the time. So instead, you can import all of Numpy into the global environment like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Better yet, there is a pre-packaged namespace that contains the whole Numpy-Scipy-Matplotlib stack in one piece:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that Python does not plot immediately when you type &lt;code&gt;plot()&lt;/code&gt;. Instead, it will collect all plotting information and only show it on the screen once you type &lt;code&gt;show()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So far, the code you have seen should look pretty familiar. A few differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No semicolons at the end of lines;&lt;br /&gt;
  In order to print stuff to the console, use the &lt;code&gt;print()&lt;/code&gt; function instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No &lt;code&gt;end&lt;/code&gt; anywhere.&lt;br /&gt;
  In Python, blocks of code are identified by indentation and they always start with a colon like so:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Function definitions are different.&lt;br /&gt;
  They use the &lt;code&gt;def&lt;/code&gt; keyword instead of &lt;code&gt;function&lt;/code&gt;.&lt;br /&gt;
  You don't have to name the output variable names in the definition and instead use &lt;code&gt;return()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;% Matlab&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[out] &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;number&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;There is no easy way to write out a list or matrix.&lt;br /&gt;
  Since Python only gains a matrix engine by importing Numpy, it does not have a convenient way of writing arrays or matrices.   This sounds more inconvenient than it actually is, since you are probably using mostly functions like &lt;code&gt;zeros()&lt;/code&gt; or &lt;code&gt;randn()&lt;/code&gt; anyway and those work just fine. Also, many places accept Python lists (like this &lt;code&gt;[1, 2, 3]&lt;/code&gt;) instead of Numpy arrays, so this rarely is a problem. Note that you &lt;em&gt;must&lt;/em&gt; use commas to separate items and can not use semicolons to separate lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create a numpy matrix:&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="c"&gt;# create a Python list:&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Arrays access uses brackets and is numbered from 0.&lt;br /&gt;
  Thus, ranges &lt;em&gt;exclude&lt;/em&gt; the last number (see below).&lt;br /&gt;
  Mostly, this just means that array access does not need any &lt;code&gt;+1&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt; when indexing arrays anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# &amp;quot;6:8&amp;quot; is a range of two elements:&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;-- a Python list!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Common traps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Array slicing does not copy.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# [2 3 4]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# this will change a and b!&lt;/span&gt;
&lt;span class="c"&gt;# make a copy like this:&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# copy=True can be omitted&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# changes only c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Arrays retain their data type.
  You can slice them, you can dice them, you can do math on them, but a 16 bit integer array will never lose its data type. Use &lt;code&gt;new = array(old, dtype=double)&lt;/code&gt; to convert an array of any data type to the default &lt;code&gt;double&lt;/code&gt; type (like in Matlab).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pretend this came from a wave file:&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c"&gt;# int16 only goes to 32768!&lt;/span&gt;
&lt;span class="c"&gt;# a is now [10000, 20000, 30000, -25536, -15536]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Going further&lt;/h2&gt;
&lt;p&gt;Now you should be able to read Python code reasonably well. Numpy, Scipy and Matplotlib are actually modeled after Matlab in many ways, so many functions will have a very similar name and functionality. A lot of the numerical code you write in Python will look very similar to the equivalent code in Matlab.&lt;/p&gt;
&lt;p&gt;However, since Python is a general purpose programming language, it offers some more tools. To begin with, there are a few more data types like associative arrays, tuples (unchangeable lists), proper strings and a full-featured object system. Then, there is a plethora of add-on packages, most of which actually come with your standard installation of Python. For example, there are &lt;a href="http://docs.python.org/3/library/internet.html"&gt;internet protocols&lt;/a&gt;, &lt;a href="http://www.riverbankcomputing.com/software/pyqt/intro"&gt;GUI programming frameworks&lt;/a&gt;, &lt;a href="https://people.csail.mit.edu/hubert/pyaudio/"&gt;real-time audio interfaces&lt;/a&gt;, &lt;a href="https://www.djangoproject.com/"&gt;web frameworks&lt;/a&gt; and &lt;a href="http://www.pygame.org/"&gt;game development libraries&lt;/a&gt;. Even &lt;a href="https://github.com/bastibe/bastibe.github.com/tree/source"&gt;this very blog&lt;/a&gt; is created using a Python &lt;a href="http://pelican.readthedocs.org"&gt;static site generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, Python has a great &lt;a href="http://docs.python.org/3/"&gt;online documentation site&lt;/a&gt; including a &lt;a href="http://docs.python.org/3.3/tutorial/"&gt;tutorial&lt;/a&gt;, there are &lt;a href="http://wiki.python.org/moin/PythonBooks"&gt;many books&lt;/a&gt; &lt;a href="http://www.learnpythonthehardway.org/"&gt;on Python&lt;/a&gt; and there is a helpful &lt;a href="http://wiki.python.org/moin/BeginnersGuide"&gt;Wiki on Python&lt;/a&gt;. There is also a &lt;a href="http://scipy.org/Getting_Started"&gt;tutorial&lt;/a&gt; and &lt;a href="http://docs.scipy.org/doc/"&gt;documentation&lt;/a&gt; for Numpy, Scipy and &lt;a href="http://matplotlib.org/contents.html"&gt;Matplotlib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A great way to get to know any programming language is to solve the first few problems on &lt;a href="https://projecteuler.net/"&gt;project euler&lt;/a&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="matlab"></category></entry><entry><title>Real Time Signal Processing in Python</title><link href="http://bastibe.de/real-time-signal-processing-in-python.html" rel="alternate"></link><updated>2012-11-02T10:53:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-11-02:real-time-signal-processing-in-python.html</id><summary type="html">&lt;p&gt;Wouldn't it be nice if you could do real time audio processing in a convenient programming language? Matlab comes to mind as a convenient language for signal processing. But while Matlab is pretty fast, it is really only fast for algorithms that can be vectorized. In audio however, we have many algorithms that need knowledge about the previous sample to calculate the next one, so they can't be vectorized.&lt;/p&gt;
&lt;p&gt;But this is not going to be about Matlab. This is going to be about Python. Combine Python with Numpy (and Scipy and Matplotlib) and you have a signal processing system very comparable to Matlab. Additionally, you can do real-time audio input/output using PyAudio. PyAudio is a wrapper around PortAudio and provides cross platform audio recording/playback in a nice, pythonic way. (Real time capabilities were added in 0.2.6 with the help of yours truly).&lt;/p&gt;
&lt;p&gt;However, this does not solve the problem with vectorization. Just like Matlab, Python/Numpy is only fast for vectorizable algorithms. So as an example, let's define an iterative algorithm that is not vectorizable:&lt;/p&gt;
&lt;h2&gt;A Simple Limiter&lt;/h2&gt;
&lt;p&gt;A limiter is an audio effect that controls the system gain so that it does not exceed a certain threshold level. One could do this by simply cutting off any signal peaks above that level, but that sounds awful. So instead, the whole system gain is reduced smoothly if the signal gets too loud and is amplified back to its original gain again when it does not exceed the threshold any more. The important part is that the gain change is done &lt;em&gt;smoothly&lt;/em&gt;, since otherwise it would introduce a lot of distortion.&lt;/p&gt;
&lt;p&gt;If a signal peak is detected, the limiter will thus need a certain amount of time to reduce the gain accordingly. If you still want to prevent all peaks, the limiter will have to know of the peaks in advance, which is of course impossible in a real time system. Instead, the signal is delayed by a short time to give the limiter time to adjust the system gain before the peak is actually played. To keep this delay as short as possible, this "attack" phase where the gain is decreased should be very short, too. "Releasing" the gain back up to its original value can be done more slowly, thus introducing less distortion.&lt;/p&gt;
&lt;p&gt;With that out of the way, let me present you a simple implementation of such a limiter. First, lets define a signal envelope $e[n]$ that catches all the peaks and smoothly decays after them:&lt;/p&gt;
&lt;p&gt;$ e[n] = \max( |s[n]|, e[n-1] \cdot f_r ) $&lt;/p&gt;
&lt;p&gt;where $s[n]$ is the current signal and $0 &amp;lt; f_r &amp;lt; 1$ is a release factor.&lt;/p&gt;
&lt;p&gt;If this is applied to a signal, it will create an envelope like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Envelope" src="images/2012-11/envelope.png" /&gt;&lt;/p&gt;
&lt;p&gt;Based on that envelope, and assuming that the signal ranges from -1 to 1, the target gain $g_t[n]$ can be calculated using&lt;/p&gt;
&lt;p&gt;\begin{equation}
g_t[n] = \begin{cases}
    1 &amp;amp; e[n] &amp;lt; t \\
    1 + t - e[n] &amp;amp; e[n] &amp;gt; t
\end{cases}
\end{equation}&lt;/p&gt;
&lt;p&gt;Now, the output gain $g[n]$ can smoothly move towards that target gain using&lt;/p&gt;
&lt;p&gt;$ g[n] = g[n-1] \cdot f_a + g_t[n] \cdot (1-f_a) $&lt;/p&gt;
&lt;p&gt;where $0 &amp;lt; f_a \ll f_r$ is the attack factor.&lt;/p&gt;
&lt;p&gt;Here you can see how that would look in practice:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gain" src="images/2012-11/gain.png" /&gt;&lt;/p&gt;
&lt;p&gt;Zooming in on one of the limited section reveals that the gain is actually moving smoothly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Detail Gain" src="images/2012-11/detail.png" /&gt;&lt;/p&gt;
&lt;p&gt;This gain can now be multiplied on the delayed input signal and will safely keep that below the threshold.&lt;/p&gt;
&lt;p&gt;In Python, this might look like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Limiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release_coeff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;

            &lt;span class="c"&gt;# calculate an envelope of the signal&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release_coeff&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;# have self.gain go towards a desired limiter gain&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;target_gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;target_gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gain&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                          &lt;span class="n"&gt;target_gain&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;# limit the delayed signal&lt;/span&gt;
            &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gain&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this limiter does not &lt;em&gt;actually&lt;/em&gt; clip all peaks completely, since the envelope for a single peak will have decayed a bit before the target gain will have reached it. Thus, the output gain will actually be slightly higher than what would be necessary to limit the output to the threshold. Since the attack factor is supposed to be significantly smaller than the release factor, this does not matter much though.&lt;/p&gt;
&lt;p&gt;Also, it would probably be more useful to define the factors $f_a$ and $f_r$ in terms of the time they take to reach their target and the threshold $t$ in dB FS.&lt;/p&gt;
&lt;h2&gt;Implementing audio processing in Python&lt;/h2&gt;
&lt;p&gt;A real-time audio processing framework using PyAudio would look like this:&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;callback&lt;/code&gt; is a function that will be defined shortly)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyaudio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PyAudio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paFloat32&lt;/span&gt;

&lt;span class="n"&gt;pa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyAudio&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paFloat32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;frames_per_buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;stream_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will open a &lt;code&gt;stream&lt;/code&gt;, which is a PyAudio construct that manages input and output to/from one sound device. In this case, it is configured to use &lt;code&gt;float&lt;/code&gt; values, only open one channel, play audio at a sample rate of 44100 Hz, have that one channel be output only and call the function &lt;code&gt;callback&lt;/code&gt; every 1024 samples.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;callback&lt;/code&gt; will be executed on a different thread, control flow will continue immediately after &lt;code&gt;pa.open()&lt;/code&gt;. In order to analyze the resulting signal, the &lt;code&gt;while stream.is_active()&lt;/code&gt; loop waits until the signal has been processed completely.&lt;/p&gt;
&lt;p&gt;Every time the &lt;code&gt;callback&lt;/code&gt; is called, it will have to return 1024 samples of audio data. Using the class &lt;code&gt;Limiter&lt;/code&gt; above, a sample counter &lt;code&gt;counter&lt;/code&gt; and an audio signal &lt;code&gt;signal&lt;/code&gt;, this can be implemented like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Limiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Playback Error: &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;played_frames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;frame_count&lt;/span&gt;
    &lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;played_frames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;played_frames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;paContinue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;paContinue&lt;/code&gt; at the end is a flag signifying that the audio processing is not done yet and the &lt;code&gt;callback&lt;/code&gt; wants to be called again. Returning &lt;code&gt;paComplete&lt;/code&gt; or an insufficient number of samples instead would stop audio processing after the current block and thus invalidate &lt;code&gt;stream.is_active()&lt;/code&gt; and resume control flow in the snippet above.&lt;/p&gt;
&lt;p&gt;Now this will run the limiter and play back the result. Sadly however, Python is just a bit too slow to make this work reliably. Even with a long block size of 1024 samples, this will result in occasional hickups and discontinuities. (Which the &lt;code&gt;callback&lt;/code&gt; will display in the &lt;code&gt;print(...)&lt;/code&gt; statement).&lt;/p&gt;
&lt;h2&gt;Speeding up execution using Cython&lt;/h2&gt;
&lt;p&gt;The limiter defined above could be rewritten in C like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// this corresponds to the Python Limiter class.&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;limiter_state_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;envelope&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;current_gain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;limiter_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#define MAX(x,y) ((x)&amp;gt;(y)?(x):(y))&lt;/span&gt;

&lt;span class="c1"&gt;// this corresponds to the Python __init__ function.&lt;/span&gt;
&lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="nf"&gt;init_limiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release_coeff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delay_len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;block_length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;block_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;delay_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// calculate an envelope of the signal&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// have current_gain go towards a desired limiter target_gain&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;target_gain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;target_gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;envelope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;target_gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;current_gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;current_gain&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="n"&gt;target_gain&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// limit the delayed signal&lt;/span&gt;
        &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;delay_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;current_gain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In contrast to the Python version, the delay line will be passed to the &lt;code&gt;limit&lt;/code&gt; function. This is advantageous because now all audio buffers can be managed by Python instead of manually allocating and deallocating them in C.&lt;/p&gt;
&lt;p&gt;Now in order to plug this code into Python I will use Cython. First of all, a "Cython header" file has to be created that declares all exported types and functions to Cython:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="n"&gt;extern&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;limiter.h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ctypedef&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;limiter_state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_index&lt;/span&gt;
        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_length&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;envelope&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;current_gain&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;

    &lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="n"&gt;init_limiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;attack_factor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;release_factor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;block_length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is very similar to the C header file of the limiter:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;limiter_state_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;envelope&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;current_gain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;limiter_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="nf"&gt;init_limiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;attack_factor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;release_factor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;block_length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that squared away, the C functions are accessible for Cython. Now, we only need a small Python wrapper around this code so it becomes usable from Python:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;cimport&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;cimport&lt;/span&gt; &lt;span class="n"&gt;limiter&lt;/span&gt;

&lt;span class="n"&gt;DTYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;
&lt;span class="n"&gt;ctypedef&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32_t&lt;/span&gt; &lt;span class="n"&gt;DTYPE_t&lt;/span&gt;

&lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Limiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limiter_state&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
    &lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt; &lt;span class="n"&gt;delay_line&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delay_length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_limiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attack_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release_coeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay_length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DTYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DTYPE_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ndim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PyArray_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PyArray_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limiter_state&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two lines set this file up to access Numpy arrays both from the Python domain and the C domain, thus bridging the gap. The &lt;code&gt;cimport limiter&lt;/code&gt; imports the C functions and types from above. The &lt;code&gt;DTYPE&lt;/code&gt; stuff is advertising the Numpy &lt;code&gt;float32&lt;/code&gt; type to C.&lt;/p&gt;
&lt;p&gt;The class is defined using &lt;code&gt;cdef&lt;/code&gt; as a C data structure for speed. Also, Cython would naturally translate every C struct into a Python dict and vice versa, but we need to pass the struct to &lt;code&gt;limit&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; have &lt;code&gt;limit&lt;/code&gt; modify it. Thus, &lt;code&gt;cdef limiter.limiter_state state&lt;/code&gt; makes Cython treat it as a C struct only. Finally, the &lt;code&gt;np.PyArray_DATA()&lt;/code&gt; expressions expose the C arrays underlying the Numpy vectors. This is really handy since we don't have to copy any data around in order to modify the vectors from C.&lt;/p&gt;
&lt;p&gt;As can be seen, the Cython implementation behaves nearly identically to the initial Python implementation (except for passing the &lt;code&gt;dtype&lt;/code&gt; to the constructor) and can be used as a plug-in replacement (with the aforementioned caveat).&lt;/p&gt;
&lt;p&gt;Finally, we need to build the whole contraption. The easiest way to do this is to use a setup file like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.extension&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cython.Distutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;build_ext&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_include&lt;/span&gt;

&lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cython_limiter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cython_limiter.pyx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="s"&gt;&amp;quot;limiter.c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                         &lt;span class="n"&gt;include_dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_include&lt;/span&gt;&lt;span class="p"&gt;()])]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cython_limiter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;cmdclass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;build_ext&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build_ext&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ext_modules&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that saved as &lt;em&gt;setup.py&lt;/em&gt;, &lt;code&gt;python setup.py build_ext --inplace&lt;/code&gt; will convert the Cython code to C, and then compile both the converted Cython code and C code into a binary Python module.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, I developed a simple limiter and how to implement it in both C and Python. Then, I showed how to use the C implementation from Python. Where the Python implementation is struggling to keep a steady frame rate going even at large block sizes, the Cython version runs smoothly down to 2-4 samples per block on a 2 Ghz Core i7. Thus, real-time audio processing is clearly feasable using Python, Cython, Numpy and PyAudio.&lt;/p&gt;
&lt;p&gt;You can find all the source code in this article at https://github.com/bastibe/simple-cython-limiter&lt;/p&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I invented this limiter myself. I could invent a better sounding limiter, but this article is more about how to combine Python, Numpy, PyAudio and Cython for real-time signal processing than about limiter design.&lt;/li&gt;
&lt;li&gt;I recently worked on something similar at my day job. They agreed that I could write about it so long as I don't divulge any company secrets. This limiter is not a descendant of any code I worked on.&lt;/li&gt;
&lt;li&gt;Whoever wants to use any piece of code here, feel free to do so. I am hereby placing it in the public domain. Feel free to contact me if you have questions.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Python"></category><category term="Cython"></category><category term="Numpy"></category><category term="PyAudio"></category></entry><entry><title>An error occurred loading this content. Try again later.</title><link href="http://bastibe.de/an-error-occurred-loading-this-content-try-again-later.html" rel="alternate"></link><updated>2012-11-01T18:26:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-11-01:an-error-occurred-loading-this-content-try-again-later.html</id><summary type="html">&lt;p&gt;Since we moved, our Apple TV has been giving us trouble: we would rent a movie on the Apple TV, and instead of playing it, the Apple TV would just display&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An error occurred loading this content.
Try again later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rebooting, then trying again, would sometimes solve the issue. Trying to play a trailer before trying to play the movie seemed to increase chances of the Apple TV actually downloading the movie, too.&lt;/p&gt;
&lt;p&gt;Finally, some forum or other pointed me to the correct solution: For some reason, the Apple TV did not play nice with our ISP DNS server. Simply changing the DNS server in the Apple TV settings to one of the Google DNS servers (8.8.8.8 and 8.8.4.4) solved the issue. Any other DNS will probably work, too.&lt;/p&gt;</summary><category term="apple-tv"></category><category term="error"></category></entry><entry><title>Names</title><link href="http://bastibe.de/names.html" rel="alternate"></link><updated>2012-10-28T22:08:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-10-28:names.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Names are everywhere in software. We name our variables, our functions, our arguments, classes, and packages. We name our source files and the directories that contain them. We name our jar files and war files and ear files. We name and name and name. Because we do so much of it, we'd better do it well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-- from the Introduction to chapter 2 "Meaningful Names" of "Clean Code" by Robert C. Martin.&lt;/p&gt;
&lt;p&gt;Indeed we name a lot of things in software. As The Structure and Interpretation of Computer Programs points out, the primary purpose of a function (lambda) is to provide names for its arguments that are independent of names elsewhere. A function provides a closure in which stuff has defined names. The closure itself can then be embedded into other closures to form composite structures. Take any complex program structure and decompose its names through all its lambdas and you will only find more names right until you reach turtles.&lt;/p&gt;
&lt;p&gt;At its heart, programming is about naming things. If I squint my eyes a little, I can nearly convince myself that naming is really all there is. All the rest is just playing games with syntax.&lt;/p&gt;
&lt;p&gt;It's situations like this that I realize that The Structure and Interpretation of Computer Programs really changed how I view programming.&lt;/p&gt;
&lt;p&gt;If you like programming at all, I implore you to &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;read it&lt;/a&gt;, or &lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/"&gt;watch it&lt;/a&gt;, or &lt;a href="http://mitpress.mit.edu/books/structure-and-interpretation-computer-programs"&gt;buy it&lt;/a&gt;. It really blew my mind.&lt;/p&gt;</summary><category term="programming"></category><category term="philosophy"></category></entry><entry><title>Matlab, Mex, Homebrew and OS X 10.8 Mountain Lion</title><link href="http://bastibe.de/matlab-mex-homebrew-and-os-x-108-mountain-lion.html" rel="alternate"></link><updated>2012-10-20T10:12:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-10-20:matlab-mex-homebrew-and-os-x-108-mountain-lion.html</id><summary type="html">&lt;p&gt;Now that I am a student again, I have to use Matlab again. Among the many joys of Matlab is the compilation of mex files.&lt;/p&gt;
&lt;p&gt;Because it does not work. So angry.&lt;/p&gt;
&lt;p&gt;Basically, &lt;code&gt;mex&lt;/code&gt; does not work because it assumes that you have OS X 10.6 installed. In OS X 10.6 you had &lt;code&gt;gcc-4.2&lt;/code&gt; and your system SDK was stored in &lt;em&gt;/Developer/SDKs/MacOSX10.6.sdk&lt;/em&gt;. However, as of 10.7 (I think), the &lt;em&gt;/Developer&lt;/em&gt; directory has been deprecated in favor of distributing the whole development environment within the App package of XCode. Also, &lt;code&gt;gcc&lt;/code&gt; has been deprecated in favor of &lt;code&gt;clang&lt;/code&gt;. While a &lt;code&gt;gcc&lt;/code&gt; binary is still provided, &lt;code&gt;gcc-4.2&lt;/code&gt; is not. Of course, that is what &lt;code&gt;mex&lt;/code&gt; relies on. Lastly, &lt;code&gt;mex&lt;/code&gt; of course completely disregards common system paths such as, say, &lt;em&gt;/usr/local/bin&lt;/em&gt;, so compiling against some homebrew library won't work.&lt;/p&gt;
&lt;p&gt;At least these things are rather easy to fix, since all these settings are saved in a file called &lt;em&gt;mexopts.sh&lt;/em&gt;, which is saved to &lt;em&gt;~/.matlab/R2012a/&lt;/em&gt; by default. The relevant section on 64-bit OS X begins after &lt;code&gt;maci64)&lt;/code&gt; and should look like this: (changes are marked by comments)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#----------------------------------------------------------------------------&lt;/span&gt;
            &lt;span class="c"&gt;# StorageVersion: 1.0&lt;/span&gt;
            &lt;span class="c"&gt;# CkeyName: GNU C&lt;/span&gt;
            &lt;span class="c"&gt;# CkeyManufacturer: GNU&lt;/span&gt;
            &lt;span class="c"&gt;# CkeyLanguage: C&lt;/span&gt;
            &lt;span class="c"&gt;# CkeyVersion:&lt;/span&gt;
            &lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gcc&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# used to be &amp;#39;gcc-4.2&amp;#39;&lt;/span&gt;

            &lt;span class="c"&gt;# used to be &amp;#39;/Developer/SDKs/MacOSX10.6.sdk&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;SDKROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk&amp;#39;&lt;/span&gt; 
            &lt;span class="nv"&gt;MACOSX_DEPLOYMENT_TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.8&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# used to be &amp;#39;10.5&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;ARCHS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-fno-common -no-cpp-precomp -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$CFLAGS  -fexceptions&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$CFLAGS -I/usr/local/include&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# Homebrew include path&lt;/span&gt;
            &lt;span class="nv"&gt;CLIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$MLIBS&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;COPTIMFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-O2 -DNDEBUG&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;CDEBUGFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-g&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
            &lt;span class="nv"&gt;CLIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$CLIBS -lstdc++&amp;quot;&lt;/span&gt;
            &lt;span class="c"&gt;# C++keyName: GNU C++&lt;/span&gt;
            &lt;span class="c"&gt;# C++keyManufacturer: GNU&lt;/span&gt;
            &lt;span class="c"&gt;# C++keyLanguage: C++&lt;/span&gt;
            &lt;span class="c"&gt;# C++keyVersion:&lt;/span&gt;
            &lt;span class="nv"&gt;CXX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;g++ &lt;span class="c"&gt;# used to be &amp;#39;g++-4.2&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-fno-common -no-cpp-precomp -fexceptions -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;CXXLIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$MLIBS -lstdc++&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;CXXOPTIMFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-O2 -DNDEBUG&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;CXXDEBUGFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-g&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
            &lt;span class="c"&gt;# FortrankeyName: GNU Fortran&lt;/span&gt;
            &lt;span class="c"&gt;# FortrankeyManufacturer: GNU&lt;/span&gt;
            &lt;span class="c"&gt;# FortrankeyLanguage: Fortran&lt;/span&gt;
            &lt;span class="c"&gt;# FortrankeyVersion:&lt;/span&gt;
            &lt;span class="nv"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gfortran&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;FFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-fexceptions -m64 -fbackslash&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;FC_LIBDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;$FC&lt;/span&gt; -print-file-name&lt;span class="o"&gt;=&lt;/span&gt;libgfortran.dylib 2&amp;gt;&amp;amp;1 | sed -n &lt;span class="s1"&gt;&amp;#39;1s/\/*libgfortran\.dylib//p&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
            &lt;span class="nv"&gt;FC_LIBDIR2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;$FC&lt;/span&gt; -print-file-name&lt;span class="o"&gt;=&lt;/span&gt;libgfortranbegin.a 2&amp;gt;&amp;amp;1 | sed -n &lt;span class="s1"&gt;&amp;#39;1s/\/*libgfortranbegin\.a//p&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
            &lt;span class="nv"&gt;FLIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$MLIBS -L$FC_LIBDIR -lgfortran -L$FC_LIBDIR2 -lgfortranbegin&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;FOPTIMFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-O&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;FDEBUGFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-g&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
            &lt;span class="nv"&gt;LD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$CC&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;LDEXTENSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.mexmaci64&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-Wl,-twolevel_namespace -undefined error -arch $ARCHS -Wl,-syslibroot,$SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$LDFLAGS -bundle -Wl,-exported_symbols_list,$TMW_ROOT/extern/lib/$Arch/$MAPFILE&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$LDFLAGS -L/usr/local/lib&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# Homebrew library path&lt;/span&gt;
            &lt;span class="nv"&gt;LDOPTIMFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-O&amp;#39;&lt;/span&gt;
            &lt;span class="nv"&gt;LDDEBUGFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-g&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
            &lt;span class="nv"&gt;POSTLINK_CMDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#----------------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changed &lt;code&gt;gcc-4.2&lt;/code&gt; to &lt;code&gt;gcc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changed &lt;code&gt;/Developer/SDKs/MacOSX10.6.sdk&lt;/code&gt; to &lt;code&gt;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changed &lt;code&gt;10.5&lt;/code&gt; to &lt;code&gt;10.8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;added &lt;code&gt;CFLAGS="$CFLAGS -I/usr/local/include"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changed &lt;code&gt;g++-4.2&lt;/code&gt; to &lt;code&gt;g++&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;added &lt;code&gt;LDFLAGS="$LDFLAGS -L/usr/local/lib"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With those settings, the mex compiler should work and it should pick up any libraries installed by homebrew.&lt;/p&gt;</summary><category term="computers"></category><category term="matlab"></category></entry><entry><title>My Emacs customizations</title><link href="http://bastibe.de/my-emacs-customizations.html" rel="alternate"></link><updated>2012-10-14T09:14:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-10-14:my-emacs-customizations.html</id><summary type="html">&lt;p&gt;I don't host my &lt;code&gt;.emacs&lt;/code&gt; in a repository. I tried it for a while, but it did not work for me. I think repos are great for managing multiple divergent versions of the same source tree. However, my dotfiles should never diverge, they should just be kept in sync. This is what Dropbox is great at. So I use Dropbox instead of git.&lt;/p&gt;
&lt;p&gt;One downside of that is that it is not as easy to provide a public link to my dotfiles. Or maybe it is. Here goes&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dl.dropbox.com/s/0ne31wkur81wgzb/.emacs"&gt;My &lt;em&gt;.emacs&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now on to the meat of this post: Some customizations I made that I think are cool.&lt;/p&gt;
&lt;h2&gt;When Emacs starts up, make it fit the left half of the screen&lt;/h2&gt;
&lt;p&gt;First, I need a function to set the size of a frame in terms of pixels. Emacs only provides &lt;code&gt;set-frame-size&lt;/code&gt;, but that works on characters, not pixels.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;set-frame-pixel-size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Sets size of FRAME to WIDTH by HEIGHT, measured in pixels.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;pixels-per-char-width&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame-pixel-width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame-width&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pixels-per-char-height&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame-pixel-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame-height&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-frame-size&lt;/span&gt; &lt;span class="nv"&gt;frame&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;floor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nv"&gt;pixels-per-char-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;floor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="nv"&gt;pixels-per-char-height&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, a function that uses the above to set the frame size to exactly fit the left half of the screen. Note that the &lt;code&gt;excess-...&lt;/code&gt; variables account for things like the menu bar, the dock or the task bar so you might have to adapt these values to your particular windowing environment. The values given here work for dockless OSX.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;use-left-half-screen&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;excess-width&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;excess-height&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;half-screen-width&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x-display-pixel-width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;excess-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;screen-height&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x-display-pixel-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;excess-height&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-frame-pixel-size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;selected-frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;half-screen-width&lt;/span&gt; &lt;span class="nv"&gt;screen-height&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, when Emacs starts up, make it use half the screen. Just how I like it!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;window-system&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;use-left-half-screen&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Make shell split windows auto-resize&lt;/h2&gt;
&lt;p&gt;Usually when you open a new split window in Emacs, it takes up half the frame. For some kinds of windows, I like them to be smaller. So here is a little snippet that shrinks some kinds of windows to 15 lines of height.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;window-configuration-change-hook&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-equal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*Python*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-equal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*eshell*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-equal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*tex-shell*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;window-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;enlarge-window&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;window-height&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create a new line above/below the current one&lt;/h2&gt;
&lt;p&gt;There is one feature of Vim that I really missed: &lt;code&gt;o&lt;/code&gt;/&lt;code&gt;O&lt;/code&gt;, which 'opens' a new line above or below the current one without changing the current line.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;vi-open-line-above&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Insert a newline above the current line and put point at beginning.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bolp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;beginning-of-line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;newline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;forward-line&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;indent-according-to-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;vi-open-line-below&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Insert a newline below the current line and put point at beginning.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eolp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;end-of-line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;newline-and-indent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;vi-open-line-below&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;M-o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;vi-open-line-above&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;When editing LaTeX, show PDF output in Emacs&lt;/h2&gt;
&lt;p&gt;Emacs provides an awesome mode for editing LaTeX files. But isn't it sad that you always have to leave Emacs for viewing the PDF? Well, not any more.&lt;/p&gt;
&lt;p&gt;This function will open or refresh a split window with the generated PDF file in it. Thus, when I edit LaTeX, I will hit C-c C-c to compile, then C-c C-v to see the PDF. All that without having to leave the LaTeX file.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;;; open/show pdf file within Emacs using doc-view-mode&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;open-show-pdf&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;tex-buffer-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pdf-buffer-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;TeX-master-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.pdf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-buffer&lt;/span&gt; &lt;span class="nv"&gt;pdf-buffer-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;pdf-buffer-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file-other-window&lt;/span&gt; &lt;span class="nv"&gt;pdf-buffer-name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;major-mode&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;doc-view-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;doc-view-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;doc-view-revert-buffer&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class="nv"&gt;tex-buffer-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;LaTeX-mode-hook&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;LaTeX-mode-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;open-show-pdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;visual-line-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;turn-on-reftex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="computers"></category></entry><entry><title>Text editing with confidence and Emacs</title><link href="http://bastibe.de/text-editing-with-confidence-and-emacs.html" rel="alternate"></link><updated>2012-10-13T11:30:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-10-13:text-editing-with-confidence-and-emacs.html</id><summary type="html">&lt;p&gt;In college, I realized for the first time how a good text editor could save me serious time, when I dragged an image file into Textmate and it auto-inserted all the LaTeX boilerplate for a figure. A few years later, on my first job, I learned &lt;a href="http://www.viemu.com/"&gt;Vim key bindings for Visual Studio&lt;/a&gt; because I hated text editing in Visual Studio so much. This showed me another way how a good text editor could save me serious time. A year after that, I was bored and tried Emacs. With Emacs, I discovered the marvelous world of &lt;a href="https://en.wikipedia.org/wiki/REPL"&gt;REPLs&lt;/a&gt; and &lt;a href="http://orgmode.org/"&gt;outlining&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that this is not supposed to be a comparison between text editors. I have done that &lt;a href="http://bastibe.de/text-editors.html"&gt;already&lt;/a&gt;. This will be a collection of some of the coolest things my text editor of choice is capable of. Stuff I love!&lt;/p&gt;
&lt;h2&gt;Text editing&lt;/h2&gt;
&lt;p&gt;In my admittedly short history of working with computers and text professionally I have realized a universal truth about the tools I like to use: A great tool is a tool I can trust. A tool I can use with confidence because I know that it will do what I want. Furthermore, a great tool is a tool that does what I want with a minimum amount of friction.&lt;/p&gt;
&lt;p&gt;Here is one of my pet peeve with many text editors: Whenever I initiate a text search, a modal dialog box pops up where I have to enter the search phrase, then click a button to search for that word. In contrast &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Incremental-Search.html#Incremental-Search"&gt;great&lt;/a&gt; &lt;a href="http://vimdoc.sourceforge.net/htmldoc/usr_03.html#03.8"&gt;text&lt;/a&gt; &lt;a href="http://docs.sublimetext.info/en/latest/search_and_replace/search_and_replace.html"&gt;editors&lt;/a&gt; allow searching for text without changing to a different window and show the results immediately while entering the search string. This is very fast and precise. In fact, it is so useful that searching is one of the most popular means of text navigation in text editors that have it.&lt;/p&gt;
&lt;p&gt;This is a theme that goes through all these features: I look for stuff that is fast and precise, because this will enable more powerful applications of seemingly simple techniques.&lt;/p&gt;
&lt;h2&gt;Outlining and task management&lt;/h2&gt;
&lt;p&gt;Outlining is writing an hierarchical list of stuff that can be reordered and sub-trees can be hidden. I tried some graphical outliners before. I did not quite see the point of it. Instead, I always kept my todo lists in simple &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; files. It worked well enough.&lt;/p&gt;
&lt;p&gt;But with Emacs, I found out about &lt;a href="http://orgmode.org"&gt;org-mode&lt;/a&gt;, which is at its heart an outliner with a syntax somewhat like Markdown. It proved to be surprisingly powerful to be able to easily refile entries or whole sub-trees in my todo lists. Also, having trees be collapsible effectively enabled me to consolidate all my todo management into one file without that file becoming unmanageably big.&lt;/p&gt;
&lt;p&gt;Add to that the more advanced task tracking features of org-mode, such as &lt;a href="http://orgmode.org/features.html#clocking"&gt;time tracking&lt;/a&gt; or &lt;a href="http://orgmode.org/features.html#planning"&gt;advanced todo planning&lt;/a&gt; and this has become one of the most pivotal tools I use daily. &lt;/p&gt;
&lt;h2&gt;Shell interaction and operating system compatibility&lt;/h2&gt;
&lt;p&gt;Whenever my job required me to work on Windows, I often found it jarring to not have a command line available. Granted, there is &lt;a href="http://cygwin.com/"&gt;Cygwin&lt;/a&gt;, but that does not play with the Windows directory structure too well. Also, many programs behave slightly differently on Linux, Cygwin and OSX. Basically, it drove me nuts.&lt;/p&gt;
&lt;p&gt;Again, Emacs came to the rescue though: &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/eshell/What-is-Eshell_003f.html"&gt;Eshell&lt;/a&gt; is a shell implemented in Emacs with no external dependencies. Thus, it comes installed on all my machines and works the same way on every operating system. Sadly though, Eshell is not quite full-featured and compatibility with some shell programs is kind of rough. In particular, it does not work well with &lt;code&gt;less&lt;/code&gt; like scrolling buffers. However, some of those, like &lt;code&gt;man&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt; are automatically opened in a special mode in Emacs itself, so this is not as bad as it sounds.&lt;/p&gt;
&lt;p&gt;At more than one point, Eshell probably saved my sanity.&lt;/p&gt;
&lt;h2&gt;Git interaction&lt;/h2&gt;
&lt;p&gt;Source control is a crucial tool when working with source code. In college we used &lt;a href="http://subversion.tigris.org/"&gt;SVN&lt;/a&gt;. Even cooler is &lt;a href="http://git-scm.com/"&gt;Git&lt;/a&gt;, though the initial learning curve is pretty bad. Personally, I learned it by mucking around on the command line and breaking stuff there, then using &lt;a href="http://www.git-tower.com/"&gt;Tower&lt;/a&gt; to restore the repository to some sane state. Sadly though, Tower is OSX only, so I was kind of screwed on Windows and Linux.&lt;/p&gt;
&lt;p&gt;Again, enter Emacs: Emacs has this magical mode called &lt;a href="http://magit.github.com/magit/magit.html#Introduction"&gt;magit&lt;/a&gt;, which builds an interactive git interaction program within Emacs. With magit, all the major git commands are just a keystroke away and diffs or logs are easily accessible, too. It really is a major feat!&lt;/p&gt;
&lt;h2&gt;Grab bag&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emacs' integrated &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/ediff/Introduction.html"&gt;ediff&lt;/a&gt; is a joy to use.&lt;/li&gt;
&lt;li&gt;REPLs are one honking great idea and come with most language modes for dynamic languages in Emacs.&lt;/li&gt;
&lt;li&gt;Emacs' &lt;a href="http://www.gnu.org/software/auctex/"&gt;LaTeX mode&lt;/a&gt; is amazingly powerful. Combine that with Emacs' ability to display PDF files &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html"&gt;graphically&lt;/a&gt; in a buffer and you have an awesome LaTeX environment.&lt;/li&gt;
&lt;li&gt;Emacs' documentation is wonderful. I learned many a trick just idly leafing through the built in Emacs documentation.&lt;/li&gt;
&lt;li&gt;Built in package management for extensions is a great time saver. This is available in &lt;a href="https://github.com/gmarik/vundle#about"&gt;Vim&lt;/a&gt; and &lt;a href="http://wbond.net/sublime_packages/package_control"&gt;Sublime Text&lt;/a&gt; as an addon, too.&lt;/li&gt;
&lt;li&gt;Lisp is indeed beautiful and elisp is quite joyful to program. I never really went beyond simple configuration in Vim. My &lt;code&gt;.emacs&lt;/code&gt; file contains some quite sophisticated small programs though.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="computers"></category></entry><entry><title>A Story about Schemes</title><link href="http://bastibe.de/a-story-about-schemes.html" rel="alternate"></link><updated>2012-09-20T20:21:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-09-20:a-story-about-schemes.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; If you are a programmer, or wanting to be a programmer, or interested in programming, or, well, reading this, you should absolutely, positively watch the 1986 MIT lecture about &lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/"&gt;The Structure and Interpretation of Computer Programs&lt;/a&gt;. (Most conveniently available &lt;a href="http://ia600401.us.archive.org/8/items/MIT_Structure_of_Computer_Programs_1986/"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I tried reading &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;the book&lt;/a&gt; numerous times, but it was too dry for my taste. The lecture however is juicy, brain-bending bliss. Especially if you don't know much functional programming yet. It certainly blew my mind. Frequently. Like, every ten minutes. Basically, I feel reborn as a programmer, with a new sense of what I am doing and how it should be done. &lt;/p&gt;
&lt;p&gt;However, this is not about SICP, it is about Scheme, which happens to be the programming language that SICP uses to preach its sermons. Above all, Scheme beautiful. It is an astounding marriage of simplicity and power. It is also a mess in terms of implementations. There are dozens of implementations and they all implement a different, partly overlapping set of features that may or may not be part of the canonical Scheme--if there is such a thing.&lt;/p&gt;
&lt;p&gt;So, how to select the correct Scheme? Naively, I first chose the one SICP uses, &lt;a href="http://www.gnu.org/software/mit-scheme/"&gt;MIT-Scheme&lt;/a&gt;. However, I soon found out that it does not work well with Emacs (that is, it did not work at all with &lt;code&gt;scheme-mode&lt;/code&gt; and &lt;code&gt;run-scheme&lt;/code&gt;). Also, its prompt is weird: &lt;code&gt;]=&amp;gt;&lt;/code&gt;. Whatever.&lt;/p&gt;
&lt;p&gt;So next, I tried &lt;a href="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page"&gt;Gambit Scheme&lt;/a&gt;, which works a lot better with Emacs. But then, I soon found out that it does not support functions like &lt;code&gt;filter&lt;/code&gt;, which are kind of essential. I was quick to write my own version of that, but really, this stuff should be provided. Turns out, &lt;code&gt;filter&lt;/code&gt; is part of a Scheme Request For Implementation, or SRFI. &lt;code&gt;filter&lt;/code&gt; is part of SRFI1. There is a &lt;a href="http://srfi.schemers.org/srfi-implementers.html"&gt;huge list&lt;/a&gt; of different Schemes and the SRFIs they support. Also, there is a list of &lt;a href="http://www.cs.utah.edu/~mflatt/benchmarks-20100126/log3/Benchmarks.html"&gt;Schemes sorted by performance&lt;/a&gt;. With &lt;a href="http://www.cs.utah.edu/%7Emflatt/benchmarks-20100126/log3/Benchmarks-plot.html"&gt;plots&lt;/a&gt;, even. It's a mess.&lt;/p&gt;
&lt;p&gt;So this left me profoundly confused. What Scheme would I use? Ideally, it should be fast, work with Emacs and implement a reasonable set of SRFIs. Homebrew lists these:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;bigloo&lt;/span&gt;         &lt;span class="n"&gt;chibi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;  &lt;span class="n"&gt;chicken&lt;/span&gt;
&lt;span class="n"&gt;gambit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;  &lt;span class="n"&gt;gauche&lt;/span&gt;        &lt;span class="n"&gt;guile&lt;/span&gt;
&lt;span class="n"&gt;kawa&lt;/span&gt;           &lt;span class="n"&gt;mit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;racket&lt;/span&gt;
&lt;span class="n"&gt;scheme48&lt;/span&gt;       &lt;span class="n"&gt;scsh&lt;/span&gt;          &lt;span class="n"&gt;sisc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;
&lt;span class="n"&gt;stklos&lt;/span&gt;         &lt;span class="n"&gt;tinyscheme&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Difficult decision. Frankly, I don't have an answer. That said, I found &lt;code&gt;plt-racket&lt;/code&gt; to be a joy to work with. &lt;code&gt;(help filter)&lt;/code&gt; will open your browser with the appropriate help page for &lt;code&gt;filter&lt;/code&gt;. Amazing. Also, it implements &lt;a href="http://srfi.schemers.org/srfi-implementers.html"&gt;a long list&lt;/a&gt; of SRFIs that will probably satisfy my simplistic needs. And the &lt;a href="http://docs.racket-lang.org/"&gt;documentation&lt;/a&gt; is excellent. And then there is DrRacket, which is a nice REPL that comes right with &lt;a href="http://racket-lang.org/"&gt;Racket&lt;/a&gt;. I like it.&lt;/p&gt;</summary><category term="computers"></category><category term="scheme"></category></entry><entry><title>Kindle.app not starting on a case-sensitive file system</title><link href="http://bastibe.de/kindleapp-not-starting-on-a-case-sensitive-file-system.html" rel="alternate"></link><updated>2012-09-13T20:19:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-09-13:kindleapp-not-starting-on-a-case-sensitive-file-system.html</id><summary type="html">&lt;p&gt;So Kindle.app was updated through the App Store and did not start any more. It just crashed and the crash reporter came up.&lt;/p&gt;
&lt;p&gt;A quick look at Console.app turns up a link to the actual crash report. And the crash report starts with&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Dyld&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Library&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;executable_path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libWEbCoreKRF&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt;
  &lt;span class="n"&gt;Referenced&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Kindle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libWebCoreViewer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt;
  &lt;span class="nl"&gt;Reason:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;libWEbCoreKRF.dylib&lt;/code&gt;? With a capitalized &lt;code&gt;E&lt;/code&gt;? That looks very much like a spelling error. So, point your terminal to &lt;code&gt;/Applications/Kindle.app/Contents/Frameworks/&lt;/code&gt;, type&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;libWebCoreKRF&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt; &lt;span class="n"&gt;libWEbCoreKRF&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to create a symlink with the misspelled name. Done.&lt;/p&gt;
&lt;p&gt;Kindle works again.&lt;/p&gt;
&lt;p&gt;Spelling is hard, it seems.&lt;/p&gt;</summary><category term="computers"></category></entry><entry><title>On the Virtue of Contributing to and Using Open Source Software</title><link href="http://bastibe.de/on-the-virtue-of-contributing-to-and-using-open-source-software.html" rel="alternate"></link><updated>2012-09-08T08:44:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-09-08:on-the-virtue-of-contributing-to-and-using-open-source-software.html</id><summary type="html">&lt;p&gt;I am a mostly self-taught programmer. Apart from a few programming side jobs at the university, I have been programming professionally for the last two and a half years.&lt;/p&gt;
&lt;p&gt;About two years ago, we wanted to buy a Matlab license for our company. However, our investors declined for dubious reasons. So I started looking for alternatives. Inspired by a good friend (thank you, Marc), I looked into Python. Python has this brilliant environment for &lt;a href="http://numpy.scipy.org/" title="NumPy"&gt;numerical&lt;/a&gt; &lt;a href="http://scipy.org/" title="SciPy"&gt;computation&lt;/a&gt; and &lt;a href="http://matplotlib.sourceforge.net/" title="matplotlib"&gt;plotting&lt;/a&gt; that, for my particular purposes, rivals Matlab.&lt;/p&gt;
&lt;p&gt;However, just like Matlab, Python lacked a way of playing real time audio out of the box. At the university, we used &lt;a href="http://playrec.co.uk/" title="Playrec"&gt;Playrec&lt;/a&gt; for that purpose, which implements &lt;a href="http://www.portaudio.com/" title="PortAudio"&gt;PortAudio&lt;/a&gt; bindings for Matlab. Luckily, there was a similar package available for Python, called &lt;a href="http://people.csail.mit.edu/hubert/pyaudio/" title="PyAudio"&gt;PyAudio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, it had one crucial flaw: it only implemented blocking-mode audio I/O, so not much luck for my real time requirements. (Blocking mode means that whenever you want to play some audio, you have to wait until the piece of audio finishes playing before you can begin to play the next piece or do some computation. Clearly, you can not process audio while it is playing with such a scheme). After a lot of research, I figured that my best bet would be to dive in and add non blocking I/O to PyAudio.&lt;/p&gt;
&lt;p&gt;At the time, I knew nothing of the Python C API (or Python, really), so those first attempts were riddled with subtle bugs and memory leaks. Nevertheless, it got the job done. I could play back audio in real time using Python!&lt;/p&gt;
&lt;p&gt;This was a revelation to me: I could not only &lt;em&gt;use&lt;/em&gt; a piece of software, I could also &lt;em&gt;change&lt;/em&gt; it and mold it to my special needs!&lt;/p&gt;
&lt;p&gt;Thus, I put up my changes on &lt;a href="https://github.com/bastibe/PyAudio" title="PyAudio on github"&gt;github&lt;/a&gt; and emailed the PyAudio maintainer. While the maintainer at the time did not have the time to incorporate my changes into the official PyAudio distribution, a few people discovered my version of it on github and contributed to it!&lt;/p&gt;
&lt;p&gt;This, again, was a revelation to me: Not only could &lt;em&gt;I&lt;/em&gt; change stuff other people did, wonderful people from around the world could collaborate and help each other. It always gave me a warm feeling of appreciation when some stranger on the internet chose to work with me!&lt;/p&gt;
&lt;p&gt;Then, finally, I decided to take the plunge to Python 3. The main obstacle for this was that PyAudio did not support Python 3. So, again, I dove in and figured out how to make it compatible with Python 3. Again, I put the changes up on github and emailed the official PyAudio maintainer. This time, he took immediate notice and we started working on an official release of PyAudio including Python 3 support and non-blocking I/O.&lt;/p&gt;
&lt;p&gt;And during those weeks, I had my third, and biggest, revelation about Open Source Software: The PyAudio maintainer is a brilliant mind, and I was humbled to find that I could learn a lot from this man.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;By working on Open Source Software, you can work with really smart people, and learn from them. And the fruits of that labor can serve as instructions to yet more people to learn from.&lt;/em&gt;&lt;/p&gt;</summary><category term="open-source"></category><category term="pyaudio"></category></entry><entry><title>Fixing Errors in Epydoc</title><link href="http://bastibe.de/fixing-errors-in-epydoc.html" rel="alternate"></link><updated>2012-08-28T12:14:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-08-28:fixing-errors-in-epydoc.html</id><summary type="html">&lt;p&gt;I ran into this error twice now and wasted an hour both times, so it is time to put this on my universal scratchpad, i.e. this blog.&lt;/p&gt;
&lt;p&gt;If you ever get this error when using &lt;a href="http://epydoc.sourceforge.net/"&gt;epydoc&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;UNEXPECTED&lt;/span&gt; &lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You are probably running a version of Python that is greater than the latest one that is supported by epydoc. This is because epydoc has not been updated since 2008 and Python 2.5.&lt;/p&gt;
&lt;p&gt;Luckily, some &lt;a href="http://www.agapow.net/programming/python/epydoc-go-boom"&gt;fine&lt;/a&gt; &lt;a href="http://stackoverflow.com/questions/6704770/epydoc-attributeerror-text-object-has-no-attribute-data"&gt;folks&lt;/a&gt; on the internet have figured out how to fix these things.&lt;/p&gt;
&lt;p&gt;Short answer: Find your &lt;em&gt;site-packages&lt;/em&gt; directory:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.sysconfig&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_python_lib&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_python_lib&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go there, navigate to the &lt;em&gt;epydoc/markup&lt;/em&gt; directory and change line 307 of the file &lt;em&gt;restructuredtext.py&lt;/em&gt; from&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_SUMMARY_RE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_SUMMARY_RE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should fix that problem.&lt;/p&gt;</summary><category term="computers"></category></entry><entry><title>Using a Raspberry Pi as a Time Capsule for Mountain Lion</title><link href="http://bastibe.de/using-a-raspberry-pi-as-a-time-capsule-for-mountain-lion.html" rel="alternate"></link><updated>2012-07-29T21:18:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-07-29:using-a-raspberry-pi-as-a-time-capsule-for-mountain-lion.html</id><summary type="html">&lt;p&gt;A while ago, I bought a Time Capsule to take care of my backups. I can't say it has been smooth sailing. Every now and then, the Time Capsule would claim that the backup did fail. Sometimes a reboot would help, sometimes not. Sometimes &lt;code&gt;hdiutil&lt;/code&gt; would be able to salvage the backups, sometimes not. Sometimes, the backup disk image would simply be corrupted and the only option would be to delete it and start over.&lt;/p&gt;
&lt;p&gt;This might be bad luck or it might be due to a defective Time Capsule or it might be due to my computer. I have no idea. But the thing is, if I have to hack on my backup system anyway, lets do it in style, at least. So here goes:&lt;/p&gt;
&lt;h3&gt;Ingredients: &lt;a href="http://www.raspberrypi.org/"&gt;A Raspberry Pi&lt;/a&gt;, an external hard drive, some patience&lt;/h3&gt;
&lt;p&gt;Format an SD card as described &lt;a href="http://elinux.org/RPi_Easy_SD_Card_Setup"&gt;in the wiki&lt;/a&gt;. I just installed the version of Debian that is provided on &lt;a href="http://www.raspberrypi.org/downloads"&gt;the official website&lt;/a&gt;. Now just boot up.&lt;/p&gt;
&lt;p&gt;Next, I was stumped because I only have an Apple LED display and no convenient way of connecting the Raspberry Pi's HDMI output to the LED display's Mini Display Port. After some searching and a combination of three adapter cables, I finally got it connected and could see it boot. Really, I have no use whatsoever for the HDMI port on the Raspberry pi. So the first thing I did was to enable SSH, which luckily is available right there in the configuration utility that starts when you boot the thing for the first time.&lt;/p&gt;
&lt;p&gt;After that, I disconnected the display and immediately was stumped because I now had no way of finding the Pi's IP address. Actually, I did not even have a network to connect it to. So I strung an ethernet cable from my laptop to the Pi and enabled &lt;em&gt;Internet Sharing&lt;/em&gt; in order to (1) start the DHCP server and (2) give the Pi internet access. The IP address was then easily found using &lt;code&gt;arp -a&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Setting up the hard drive&lt;/h3&gt;
&lt;p&gt;First off, I needed to format and mount my external hard drive to be usable as a Time Machine volume. &lt;code&gt;ls /dev&lt;/code&gt; showed the hard drive as &lt;code&gt;/dev/sda&lt;/code&gt;. Thus, I installed &lt;code&gt;parted&lt;/code&gt; using &lt;code&gt;sudo apt-get install parted&lt;/code&gt; and used it &lt;code&gt;sudo parted&lt;/code&gt;. In parted, &lt;code&gt;select /dev/sda&lt;/code&gt; sets it up to modify the external hard drive, &lt;code&gt;rm 1&lt;/code&gt; deleted its main partition, &lt;code&gt;q&lt;/code&gt; to quit parted. Next, creating a new partition: &lt;code&gt;sudo fdisk&lt;/code&gt;, then in there &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; to create a new primary partition, then &lt;code&gt;w&lt;/code&gt; to apply the changes and exit. Lastly, I created the file system with &lt;code&gt;sudo mkfs -t ext4 /dev/sda1&lt;/code&gt; with the whole partition as its size. Now lastly, I created a mount point for it using &lt;code&gt;mkdir ~/TimeMachine&lt;/code&gt; (don't use &lt;code&gt;sudo&lt;/code&gt;!) and auto-mounted it by appending this to &lt;em&gt;/etc/fstab&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sda1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TimeMachine&lt;/span&gt; &lt;span class="n"&gt;ext4&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: &lt;code&gt;sync&lt;/code&gt; specifies that all file system changes have to be written to disk immediately, without caching. This might be bad for performance, but on the other hand, this behavior is probably a good idea for a backup system. I once read something somewhere that Apple is enforcing a similar behavior on their Time Capsules and that this is the reason why they won't allow any other network drive as Time Capsules.&lt;/p&gt;
&lt;h3&gt;Setting up the shared folder&lt;/h3&gt;
&lt;p&gt;First up, this requires &lt;code&gt;netatalk&lt;/code&gt;, so I did &lt;code&gt;sudo apt-get update&lt;/code&gt; and &lt;code&gt;sudo apt-get install netatalk&lt;/code&gt; to install it. Next, netatalk has to be configured to actually share the drive on the network. This is accomplished by appending this line to &lt;em&gt;/etc/netatalk/AppleVolumes.default&lt;/em&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TimeMachine&lt;/span&gt; &lt;span class="n"&gt;TimeMachine&lt;/span&gt; &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="n"&gt;cnidscheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dbd&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;upriv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;usedot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, the afp daemon should be configured to use the proper authentification schemes. Thus, add this to &lt;em&gt;/etc/netatalk/afpd.conf&lt;/em&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transall&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;uamlist&lt;/span&gt; &lt;span class="n"&gt;uams_randnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;uams_dhx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;uams_dhx2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nosavepassword&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;advertise_ssh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(maybe append &lt;code&gt;mdns&lt;/code&gt; to the hosts in &lt;em&gt;/etc/nsswitch.conf&lt;/em&gt;? Probably not necessary.)&lt;/p&gt;
&lt;p&gt;I am also not quite sure whether I actually had to create a new file &lt;em&gt;/etc/avahi/services/afpd.service&lt;/em&gt; and write into it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;#39;no&amp;#39;?&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--*-nxml-*--&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;!DOCTYPE service-group SYSTEM &amp;quot;avahi-service.dtd&amp;quot;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;service-group&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;name&lt;/span&gt; &lt;span class="na"&gt;replace-wildcards=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;%h&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;service&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;_afpovertcp._tcp&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;port&amp;gt;&lt;/span&gt;548&lt;span class="nt"&gt;&amp;lt;/port&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;service&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;_device-info._tcp&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;port&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/port&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;txt-record&amp;gt;&lt;/span&gt;model=Xserve&lt;span class="nt"&gt;&amp;lt;/txt-record&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/service-group&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And maybe, you have to create an empty file that signifies the drive as Time Machine compatible using &lt;code&gt;touch ~/TimeMachine/.com.apple.timemachine.supported&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I certainly did all that, but I am not quite sure which of these steps were strictly necessary. If you know, please let me, too.&lt;/p&gt;
&lt;p&gt;Anyway, with all that done, restart both the netatalk and the Bonjour daemon using &lt;code&gt;sudo /etc/init.d/netatalk restart&lt;/code&gt; and &lt;code&gt;sudo /etc/init.d/avahi-daemon restart&lt;/code&gt;n.&lt;/p&gt;
&lt;h3&gt;Setting up the Time Machine&lt;/h3&gt;
&lt;p&gt;&lt;strike&gt;Now, back to the Mac. In order to make Time Machine accept the new network share, run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systempreferences&lt;/span&gt; &lt;span class="n"&gt;TMShowUnsupportedNetworkVolumes&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/strike&gt;
&lt;strong&gt;Edit:&lt;/strong&gt; Turns out, this setting is not necessary. OSX just picks the Raspberry Pi as a usable Time Machine drive by default.&lt;/p&gt;
&lt;p&gt;Finally, the TimeMachine folder on the Raspberry Pi was available as one of the backup drives. Halleluja!&lt;/p&gt;
&lt;p&gt;Now transfer speeds for the initial backup are not exactly what I would call fast, but this might not be the Pi's fault. For one thing, the Pi is reporting to only run at half load. For another thing, the external hard drive and its USB connection is probably not very speedy. And lastly, I seem to remember that initial backups always were slow. But really, only time will tell how well this thing can do the job of a Time Capsule.&lt;/p&gt;
&lt;p&gt;Further testing shows that transfer speeds are very comparable to the Time Capsule. Thus, I declare this a raging success!&lt;/p&gt;
&lt;p&gt;This article heavily steals from these fine folks on the internet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kremalicious.com/ubuntu-as-mac-file-server-and-time-machine-volume/"&gt;Matthias Kretschmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.trollop.org/2011/07/23/os-x-10-7-lion-time-machine-netatalk-2-2/"&gt;Steffen L. Norgren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mikepalmer.net/build-a-netatalk-time-machine-for-osx-lion-using-debian-6-0-squeeze/"&gt;Mike Palmer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="raspberrypi"></category><category term="computers"></category><category term="mountainlion"></category></entry><entry><title>How Apple is Failing Me</title><link href="http://bastibe.de/how-apple-is-failing-me.html" rel="alternate"></link><updated>2012-07-19T19:49:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-07-19:how-apple-is-failing-me.html</id><summary type="html">&lt;p&gt;I bought my first Apple computer in 2007 after a long time of gaming on Windows and a few years of Linux. In the beginning, I was just amazed at the consistency, practicality and sanity of the whole experience. I think I had a bad case of tinkeritis and neophilia in my Linux days, so this was probably to be expected.&lt;/p&gt;
&lt;p&gt;Later, I marveled at the level of polish in the third party software ecosystem around Macs. Then I was just glad to have a slick GUI with actual Unix underpinnings. For reference, this happened in the time span from OS X 10.5 Leopard until 10.7 Lion. However, in that same time frame, I also noticed a gradual increase in problems. The computer seems to crash slightly more often, programs seemed to become more buggy, behavior less logical. At first, I marked this up as mostly a matter of my own increasing knowledge of the system, but as time went on, I became more and more convinced that it was actually the system getting worse, not myself becoming more sensitive.&lt;/p&gt;
&lt;p&gt;So here are some of those problems:&lt;/p&gt;
&lt;h3&gt;Lack of Uninstallers&lt;/h3&gt;
&lt;p&gt;Computer people like to try new software. Some new software is crap. You should delete crap from your computer. Amazingly however, the Mac does not have any way of uninstalling some software.&lt;/p&gt;
&lt;p&gt;At the moment, there are three ways of getting software on your Mac.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install from the App Store. Installation and un-installation work through the App Store.&lt;/li&gt;
&lt;li&gt;Install by dragging n &lt;code&gt;*.app&lt;/code&gt; bundle onto your computer. Uninstall by deleting the bundle. Works fine unless the app installed some stuff outside the bundle.&lt;/li&gt;
&lt;li&gt;Install by executing a &lt;code&gt;*.pkg&lt;/code&gt; file. No way to uninstall whatsoever unless the developer provides a separate uninstall mechanism.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Really, this is beyond ridiculous. There is no way of uninstalling software that has been installed from a &lt;code&gt;*.pkg&lt;/code&gt;. How the heck am I supposed to use my computer without uninstalling software? Seriously, Apple? Is this a joke?&lt;/p&gt;
&lt;p&gt;(So as a rule, I will only install &lt;code&gt;*.pkg&lt;/code&gt;s if there is absolutely no other way. Most of the time, I use or abuse &lt;a href="http://mxcl.github.com/homebrew/"&gt;homebrew&lt;/a&gt; to mitigate this problem.)&lt;/p&gt;
&lt;h3&gt;Failing Time Machine&lt;/h3&gt;
&lt;p&gt;So the Mac comes with this awesome backup solution called Time Machine. Just plug in your external hard drive, and it will magically keep all your data save, at all times. Better yet, buy a Time Capsule and this will happen over the wireless network so you don't even need to plug in that hard drive any more. Magic!&lt;/p&gt;
&lt;p&gt;Except, every few weeks the Time Machine icon in the menu bar will have a small exclamation point, which indicates that something went wrong. Usually, it means that Time Machine somehow lost track of what it was doing and silently corrupted all backups beyond repair. This happens across several computers and Time Machines. The only solution is to delete all backups and start anew.&lt;/p&gt;
&lt;p&gt;So, backups that are not backing up. How amazing is that?&lt;/p&gt;
&lt;h3&gt;Living in the Cloud&lt;/h3&gt;
&lt;p&gt;OS X is this astonishingly modern operating system, where all your email, contacts, calendars and settings are synced in the cloud, accessible from anywhere and any device or service you use. In theory.&lt;/p&gt;
&lt;p&gt;Synchronization is cool. I used to live within the Googleverse, and all my contacts, calendars and email accounts would sync through Google to all my Apple devices. Life was good! Until things started to go bad. At some point, Mail.app lost an email or two. Not a big deal. Then iCal would not connect any more, and would need to be restarted every other day. And finally, Address Book deleted all my contacts from Google. Actually, it did not delete the whole contacts, just all the information inside them, and leave empty husks with only a name and maybe a partial email address.&lt;/p&gt;
&lt;p&gt;I wish I was making this up. I tested this quite thoroughly. Whenever Contacts was set up to sync with Google, after a few days or weeks it would delete all my contacts. Of course, this being cloud backed, it would delete them everywhere on all my devices, without any backup or anything. Thankfully, Address Book on iOS seems to not have this problem.&lt;/p&gt;
&lt;p&gt;Things can go wrong, I understand that. But deleting all my contacts? Not cool. Not. Cool.&lt;/p&gt;
&lt;h3&gt;iPhoto&lt;/h3&gt;
&lt;p&gt;My grandfather has this G4 PowerBook. He stores all his photos on it. So at one point, we just could not stand it any more to support his software problems and set him up with a newer MacBook (2007) just so we could at least roughly recreate his problems on our machines.&lt;/p&gt;
&lt;p&gt;But to do that, we had to convert his old library from iPhoto 1876 to iPhoto 2008. iPhoto itself claims to be able to do that, and lo and behold, it magically imported the old library, started an update program, then another, then another, then another, then another, and updated the old library through the ages up to the most recent version. And everything seemed to work fine, all the albums were there, all the thumbnails looked right, just perfect. Except if you opened any image, it would only show black. I mean, I can understand that an import of a library that old does not work. But at least tell me so. Don't silently corrupt everything!&lt;/p&gt;
&lt;p&gt;And then there was my own library, started in late 2007 and handed through different revisions of iPhoto to today. It countains about 25 Gb worth of photos. Funny enough, its size on disk is actually 65 Gb. What. The. Heck?&lt;/p&gt;
&lt;p&gt;At this point, a giant &lt;em&gt;thank you&lt;/em&gt; to the &lt;a href="http://www.fatcatsoftware.com/iplm/"&gt;iPhoto Library Manager&lt;/a&gt; by Fat Cat Software, which saved both my library and my sanity! Those guys rock!&lt;/p&gt;
&lt;h3&gt;OS X Lion with Auto Save and Versions&lt;/h3&gt;
&lt;p&gt;The newest and brightest  in the land of Apple is OS X 10.7 Lion (at the time of writing). This amazing piece of software has a life-changing new feature: It friggin breaks one of the oldest tradition in computer history: Saving files.&lt;/p&gt;
&lt;p&gt;Now normally, I would applaud this. Just save everything automatically and give me a sensible undo mechanism instead. Great!&lt;/p&gt;
&lt;p&gt;However, in a stroke of genius, they also got rid of the possibility of &lt;em&gt;save as...&lt;/em&gt;, which is just an easy way of duplicating a document. Say, because you received it in an email and want to file it somewhere else on your hard drive. Or because the document is saved on a thumb drive and you want to copy it over to your hard drive. No sir, you have to navigate to the document in the finder and copy it by hand from there. Thank you for your patience.&lt;/p&gt;
&lt;p&gt;But the worst offender is Preview. Every program on the Mac has this very handy &lt;em&gt;proxy icon&lt;/em&gt; in the window title. Whenever a window is representing a file on your computer, it will show that very file in the title, so you can drag and drop it somewhere else. Except preview won't give you the actual document. Instead, it will give you an alias to that document. Which is worth &lt;em&gt;nothing at all&lt;/em&gt; if you drag it into an email, your Dropbox or a thumb drive.&lt;/p&gt;
&lt;p&gt;Or try to enable File sharing on your local network, which works &lt;em&gt;sometimes&lt;/em&gt;, but not all the time. Or Internet Sharing, which might share your internet connection, or break your DNS settings. Or take Bluetooth, which for the life of me, I can not make work for tethering with my iPhone, even though the same works just fine with the iPad and other Macs. Or take networking in general, which every once in a while just completely breaks down on my company's network and just refuses to send or receive any data over the Ethernet cable until I reboot my computer.&lt;/p&gt;
&lt;p&gt;I could go on. Let's just say that Lion increased my WTF-per-minute rate significantly.&lt;/p&gt;
&lt;h3&gt;Performance, Memory and File System&lt;/h3&gt;
&lt;p&gt;Lets talk performance. I can't really complain here. In my MacBook Pro I have four cores, eight Gb of memory and a fast, Apple-sanctioned SSD. Life is good. Except that I happen to use virtual machines a whole lot and regardless of whether I use Linux (Ubuntu, Fedora, OpenSuse) or Windows (7, 8) on there, they feel faster.&lt;/p&gt;
&lt;p&gt;I mean, you don't feel the pain of starting applications much on OS X, because in general, you simply keep your programs running all the time. But even so, Firefox starts up on Windows in, like, no time at all, but takes noticeable time on OS X (same configuration and plugins). I have an SSD, so I mostly don't care, but still.&lt;/p&gt;
&lt;p&gt;Or take boot times. Even in a virtual machine, both Windows 7 and 8 and Ubuntu 12.04 and Fedora 17 boot up in less than half a minute. In comparison, OS X Lion takes significantly longer, sometimes minutes. Again, you usually don't feel that pain too much because you don't reboot your Mac all that often (unless you run Bootcamp for gaming regularly). Still, OS X boot and shutdown times are downright shameful these days.&lt;/p&gt;
&lt;p&gt;Lets run a few virtual machines. I have eight Gb of memory. Lets boot up a Windows VM and give it two Gb. Do anything you want, run Eclipse &lt;em&gt;and&lt;/em&gt; Visual Studio &lt;em&gt;and&lt;/em&gt; Firefox with loads of tabs &lt;em&gt;and&lt;/em&gt; Steam. Windows will do just fine. Those two Gb are plenty for anything except gaming and photo/video editing. Do the same thing with Linux, same result. In fact, Linux will work just fine with even less memory. But OS X? Don't even &lt;em&gt;think&lt;/em&gt; of running it with less than two Gb. Four Gb will give you a workable system if you don't run too many memory intensive applications. But start up XCode and Eclipse and you are done for. This is a huge waste.&lt;/p&gt;
&lt;p&gt;And lastly, let's talk HFS+. Did you know that HFS+ has a global lock that prevents any program from accessing the hard drive while another program is doing so? That explains why OS X is so friggin slow on non-SSD drives. And did you ever notice that HFS+ is slowly corrupting your data, even if there are no power failures or anything? I fire up Disk Utility every so often and it will always find some file system corruptions. It rarely breaks stuff, but really, the file system is the very last part of my system I want to see failing randomly.&lt;/p&gt;
&lt;h3&gt;So, what now?&lt;/h3&gt;
&lt;p&gt;With all this love, why am I still using a Mac? Well, for one thing, the hardware is seriously great. I would love to see some laptop manufacturer build something equally sturdy, light and good looking as a MacBook Pro. I would love to see someone build a great touch pad into a non-Apple device. I would love to see Retina displays everywhere&lt;sup id="fnref:sight"&gt;&lt;a href="#fn:sight" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. But I don't.&lt;/p&gt;
&lt;p&gt;And then there is software. Where is &lt;a href="http://www.git-tower.com/"&gt;Tower&lt;/a&gt; for Windows or Linux? Or &lt;a href="http://www.sparrowmailapp.com/"&gt;Sparrow&lt;/a&gt; or &lt;a href="http://tapbots.com/blog/tweetbot/tweetbot-for-mac"&gt;Tweetbot&lt;/a&gt; or &lt;a href="http://reederapp.com/mac/"&gt;Reeder&lt;/a&gt; or &lt;a href="http://www.pixelmator.com/"&gt;Pixelmator&lt;/a&gt; or iPhoto? I'm not saying there are no alternatives, but I certainly have not been able to find any that were really up to the same level of polish.&lt;/p&gt;
&lt;p&gt;That said, I have recently been playing around with Windows 8, Ubuntu 12.04 and Fedora 17 and I must say, I am quite taken with them. All of them. As for the next computer I am going to buy, I am doubtful if it will be an Apple computer again.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:sight"&gt;
&lt;p&gt;As a matter of fact, I would love to see well enough to see Retina at all, but that is beside the point&amp;#160;&lt;a href="#fnref:sight" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="apple"></category><category term="computers"></category></entry><entry><title>Blogging with Pelican (and not Octopress)</title><link href="http://bastibe.de/blogging-with-pelican-and-not-octopress.html" rel="alternate"></link><updated>2012-07-18T21:11:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-07-18:blogging-with-pelican-and-not-octopress.html</id><summary type="html">&lt;p&gt;For a while now, I have been moving more and more services I use off Google. The reasons for that are manyfold, and few of them have anything to do with Google being evil or not--just to get that out of the way.&lt;/p&gt;
&lt;p&gt;One of the last holdouts has been &lt;a href="http://daskrachen.com"&gt;my neglected Blogspot blog&lt;/a&gt;. And one of the reasons for it being neglected is that it was hosted on Blogspot. Now don't get me wrong here, Blogspot is a terriffic blogging platform. You have this very nice nearly-WYSIWYG text editor right in your browser, you can upload images, you can publish instantly to your blog... Basically everything is taken care of for you conveniently right there in your browser. Google Style.&lt;/p&gt;
&lt;p&gt;Its just that I don't like to work that way. I like plain text. I like typing stuff into a plain text editor. I like to be in control. And Blogspot might be convenient, but it did not make me feel like I was in control. In fact, I lost at least one article to Blogspot for unknown reasons.&lt;/p&gt;
&lt;p&gt;Enter static site generators. The idea is that instead of writing rich text into some website, you create you content however you want on your own computer, then use a static generator which converts it into a set of static HTML pages and upload those to your website. Now all of the creation process is happening on your computer. You are in control. Probably the most popular program to do that is &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second part of the equation is some kind of publishing platform. With these static site generators, really any web server does that trick. Just push your generated HTML files to the server and be done with it. Even cooler is Github. Using &lt;a href="http://pages.github.com/"&gt;Github pages&lt;/a&gt;, you can use your existing Github account and infrastructure to publish your blog just by pushing the HTML to Github. This is seriously cool!&lt;/p&gt;
&lt;p&gt;So, I set out and tried &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt;, which combines these two things into a nice blogging platform. Honestly though, I don't know much Ruby and all that &lt;code&gt;rake&lt;/code&gt; workflow did not make me much more comfortable than pushing stuff into Blogspot.&lt;/p&gt;
&lt;p&gt;Hence, I looked for alternatives. What I ended up with is &lt;a href="http://pelican.notmyidea.org/"&gt;Pelican&lt;/a&gt;, a very simple static site generator written in Python. Finally, this is a codebase that is easy enough for me to understand and modify. If there is any trouble with my blog, I will be (and have been) able to just look at the source code and figure out what is going wrong. I like this!&lt;/p&gt;
&lt;p&gt;To publish a new blog post, I will start by writing the post in &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; (a format I understand), process it using the very simple command line &lt;code&gt;pelican -s my_config_file.py posts/&lt;/code&gt;, and push the result to GitHub. Easy as pie. And I feel like I am in control again!&lt;/p&gt;
&lt;p&gt;Actually, if this is just a bit too technical for you, check out &lt;a href="http://calepin.co/"&gt;Calepin&lt;/a&gt; instead. It uses the very same Pelican engine, but instead of fiddling with Git, you just put your markdown files into your Dropbox, and--poof--you magically have a Blog!&lt;/p&gt;
&lt;p&gt;If you want to see my blog as a repo on Github, just &lt;a href="https://github.com/bastibe/bastibe.github.com/"&gt;go have a look&lt;/a&gt; (the &lt;code&gt;master&lt;/code&gt; branch contains the HTML, the &lt;code&gt;source&lt;/code&gt; branch contains the configuration and Markdown).&lt;/p&gt;</summary><category term="computers"></category><category term="blog"></category></entry><entry><title>How to get solarized syntax highlighting on your blog</title><link href="http://bastibe.de/how-to-get-solarized-syntax-highlighting-on-your-blog.html" rel="alternate"></link><updated>2012-07-15T14:33:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-07-15:how-to-get-solarized-syntax-highlighting-on-your-blog.html</id><summary type="html">&lt;p&gt;Yesterday, I spent a few hours creating a solarized like CSS file for use with my new blogging tool. You could just scrape the settings from this very website, but for convenience, here they are:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;/* Text */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.t&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Whitespace */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.w&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#073642&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Error */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.err&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cb4b16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Keyword */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.k&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#859900&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.kc&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Keyword.Constant */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.kd&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Keyword.Declaration */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.kn&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#b58900&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Keyword.Namespace */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.kp&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#859900&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Keyword.Pseudo */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.kr&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#073642&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Keyword.Reserved */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.kt&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#b58900&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Keyword.Type */&lt;/span&gt;

&lt;span class="c"&gt;/* Name */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.n&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.na&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Attribute */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.nb&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Builtin */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.nc&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Class */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.ne&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cb4b16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Error */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.no&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Constant */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.nd&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Decorator */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.ni&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;bold&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Entity */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.nf&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Function */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.nn&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Namespace */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.nt&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;bold&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Tag */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.nv&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cb4b16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Variable */&lt;/span&gt;

&lt;span class="c"&gt;/* Builtin */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.b&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#859900&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.bp&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Builtin.Pseudo */&lt;/span&gt;

&lt;span class="c"&gt;/* Variable */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.v&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.vc&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Variable.Class */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.vg&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Variable.Global */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.vi&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Name.Variable.Instance */&lt;/span&gt;

&lt;span class="c"&gt;/* Literal */&lt;/span&gt;

&lt;span class="c"&gt;/* Literal.Number */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.m&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.Number */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.mf&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.Number.Float */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.mh&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.Number.Hex */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.mi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.Number.Integer */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.mo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.Number.Oct */&lt;/span&gt;

&lt;span class="c"&gt;/* Literal.String */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.s&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.sb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Backtick */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.sc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Char */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.sd&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Doc */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.s2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Double */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.se&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cb4b16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Escape */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.sh&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Heredoc */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.si&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cb4b16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Interpol */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.sx&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Other */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.sr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cb4b16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Regex */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.s1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2aa198&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Single */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.ss&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cb4b16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.String.Symbol */&lt;/span&gt;

&lt;span class="c"&gt;/* Literal.Integer */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.il&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#268bd2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Literal.Number.Integer.Long */&lt;/span&gt;

&lt;span class="c"&gt;/* Operator */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.o&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.ow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#859900&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Operator.Word */&lt;/span&gt;

&lt;span class="c"&gt;/* Punctuation */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.p&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Comment */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#93a1a1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;italic&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.cm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#93a1a1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Comment.Multiline */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.cp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#93a1a1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Comment.Preproc */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.c1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#93a1a1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Comment.Single */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.cs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#93a1a1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Comment.Special */&lt;/span&gt;

&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.hll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dc322f&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Generic */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.g&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gd&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Deleted */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.ge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;italic&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Emph */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Error */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gh&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;bold&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Heading */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Inserted */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.go&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Output */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Prompt */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;586&lt;/span&gt;&lt;span class="n"&gt;e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Strong */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;bold&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Subheading */&lt;/span&gt;
&lt;span class="nc"&gt;.codehilite&lt;/span&gt; &lt;span class="nc"&gt;.gt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Generic.Traceback */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;pre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fdf6e3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#586e75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Droid Sans Mono&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;clip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;clip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;clip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Keep in mind though that I have no formal knowledge of CSS whatsoever beyond what I could gather from these very files.&lt;/p&gt;</summary><category term="solarized"></category><category term="pygments"></category><category term="pelican"></category><category term="codehilite"></category></entry><entry><title>How to gem install rlua on OSX/homebrew</title><link href="http://bastibe.de/how-to-gem-install-rlua-on-osxhomebrew.html" rel="alternate"></link><updated>2012-02-22T11:43:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-02-22:how-to-gem-install-rlua-on-osxhomebrew.html</id><summary type="html">&lt;p&gt;If you want to use rlua, you need to have Lua installed. However, OSX does not come with Lua preinstalled, so you install it using&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lua&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, would it be nice if everyone agreed on how to install stuff like this. Case in point, homebrew installs liblua (quite reasonable) in &lt;code&gt;/usr/local/lib/liblua.[5.1[.4]].dylib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;rlua however expects it to be called &lt;code&gt;liblua5.1.dylib&lt;/code&gt; (notice the missing &lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Similarly, the headers are installed plainly into &lt;code&gt;/usr/local/include&lt;/code&gt;, whereas rlua expects them to be in a folder called &lt;code&gt;lua5.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hence, here is how you get rlua to install:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.1.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;liblua&lt;/span&gt;&lt;span class="mf"&gt;.5.1.4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;liblua5&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dylib&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.1.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lua5&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not exactly a beautiful solution, but it works.&lt;/p&gt;</summary><category term="compiling"></category><category term="homebrew"></category><category term="gem"></category></entry><entry><title>Text Editors</title><link href="http://bastibe.de/text-editors.html" rel="alternate"></link><updated>2012-02-03T18:22:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2012-02-03:text-editors.html</id><summary type="html">&lt;p&gt;As far as I can tell, there has been a resurgence of development in the landscape of text editors of late. Only a few years ago, the text editing scene one the Mac seemed to be dominated by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crazy unix farts using Vim or Emacs&lt;/li&gt;
&lt;li&gt;BBEdit users&lt;/li&gt;
&lt;li&gt;Textmate users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During a very short period of time though, a raft of new text editors became available. Sublime Text in particular has been getting a lot of attention and rave reviews by many people. To me, this warrants another look at what these new (and old) text editors are offering.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="images/2012-02/vim.png"&gt;&lt;img alt="Vim" src="images/2012-02/vim_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim is very old software. It is a more or less direct descendant of ed from the early 1970s. It grew up in text based terminals without any graphical windows or mouses. Hence, all of its functionality is really meant to be used from the keyboard only, even though mousing is supported these days.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2012-02/vim_window.png"&gt;&lt;img alt="Vim Window" src="images/2012-02/vim_window_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The terminal inheritance limits its graphical capabilities somewhat. There are no graphical drawers or animations or pixel-precise scrolling. Everything is displayed in terms of rectangular characters, hence scrolling can only ever scroll one line at a time and there are no graphical images anywhere. Since Vim predates graphical displays altogether, it does not adhere to its standards much. In fact, in its normal mode it won't even type out the characters you hit on your keyboard.&lt;/p&gt;
&lt;p&gt;This is at really Vim's greatest strength and weakness: In its 'normal mode', all key presses are interpreted like keyboard shortcuts in other programs. And what shortcuts there are! Pretty much every key on the keyboard has some special function, most keys even serve multiple functions depending on what mode you are in at the moment. Thus it should come as no surprise that you can do anything with these shortcuts at astounding speed. Watching a seasoned Vimmer do his keyboard dance is something to behold. Moving the cursor is especially powerful. Usually, any place in the current file is reachable using just a few key strokes. But of course, you are not limited to just viewing one file at a time either: Vim supports arbitrary split views and can even be used for efficient diffing or merging. And when it comes to changing that text, Vim is no slouch, either. There are various registers for saving text or locations, there is an increadibly powerful macro system, amazing searching capabilities, command line integration, there are specialized functions for programming… Really, when it comes to pure text editing chops, nothing beats Vim.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2012-02/vim_full_window.png"&gt;&lt;img alt="Typical Vim Window" src="images/2012-02/vim_full_window_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim is also incredibly customizable. Of course, there is no graphical preferences windows to do the customization in. You customize Vim by editing simple text files. Vim even includes its very own scripting language, VimScript, to enable users to extend it. There is a huge wealth of plugins available. These range from file browsers to support for new languages, or even some limited integration with compilers or source control tools. However, VimScript is not exactly a very pleasant language to code in and Vim does not actually like to interface with external tools much. These two issues limit the scope of what is possible with Vim somewhat–deep compiler integration and graphical debugging are fiddly at best, so you will probably just keep a terminal open and do them there. That said, the plugin ecosystem for Vim is probably still leaps and bounds beyond what is possible with most other text editor out there, but it does not quite reach the same breadth or integration as some IDEs or Emacs do.
All that power comes at a price. Learning Vim is hard. If you start out with Vim, it will probably take at least a week or so until you can approach your old productivity again. Mastering Vim will take years. Even after months and months of diligent learning, you will find some new tricks and features to increase your speed.&lt;/p&gt;
&lt;p&gt;At the end of the day though, Vim is an amazingly powerful tool, and it is certainly worth it to at least learn the basics of it. Actually, most people I know who tried it have actually stuck with it. Myself, I have some two years of Vimming under my belt, too, and it has proven to be a very important tool for me.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs 24&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="images/2012-02/emacs.png"&gt;&lt;img alt="Emacs" src="images/2012-02/emacs_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The thing you have to realize about Emacs is that… Emacs is powerful. People have called it &lt;a href="http://www.emacswiki.org/emacs/NealStephenson"&gt;the thermonuclear text editor&lt;/a&gt;, and for a reason. Emacs can edit text, of course, but that is really only the most mundane of its features. Really, Emacs is a little world of its own. You can read and write your mail from within Emacs, you can do spreadsheets, calendaring, it can host terminals, debuggers, compilers, there is Tetris, hell, it even includes its very own psychiatrist! Speaking off the record here, I have a suspicion that Emacs might achieve sentience pretty soon.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2012-02/emacs_window.png"&gt;&lt;img alt="Emacs Window" src="images/2012-02/emacs_window_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Similar to Vim, Emacs is old software. It was invented in the late 1970s at MIT and has been growing ever since. Also like Vim, its terminal inheritance shows its teeth sometimes: mouseweel scrolling can be awkward, especially if you like your inertial scrolling, the menu bar seems to not get much love and keyboard shortcuts are not conformant with what you might be used to from other text editors. On the other hand, Emacs has some very modern features like mixing of proportional fonts and fixed-width fonts or inline image display.&lt;/p&gt;
&lt;p&gt;The upside of being old is that Emacs is very mature software. There is a ginormous selection of extensions available for Emacs, most of it actually distributed right with Emacs itself and a lot of it is superbly documented. Besides that, there are &lt;a href="http://tromey.com/elpa/"&gt;several&lt;/a&gt; &lt;a href="http://marmalade-repo.org/"&gt;integrated&lt;/a&gt; &lt;a href="http://elpa.gnu.org/"&gt;repositories&lt;/a&gt; for additional tools that can be downloaded and installed from the internet.&lt;/p&gt;
&lt;p&gt;The real power of Emacs is in that it is really not so much a text editor but a virtual machine for a programming language called eLisp. Really anything that can possibly be written in Lisp and remotely involves text editing is possible and probably already available in Emacs. As such, Emacs probably has the most diverse feature set of any text editor out there. Most relevant to programmers will be debugger integration, automatic syntax and spell checking, powerful and context-aware autocompletion, refactoring capabilities and much much more. Emacs is the only program in this list which can actually be used as a full fledged IDE on its own.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2012-02/emacs_full_window.png"&gt;&lt;img alt="Typical Emacs Window" src="images/2012-02/emacs_full_window_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But Emacs is not limited to programming at all. As mentioned before, it includes an Email client, a great calendar with an agenda, several IM clients, RSS readers, an &lt;a href="http://orgmode.org/"&gt;astoundingly powerful outliner&lt;/a&gt; and spreadsheet editor, it is frequently used for blogging, writing screen plays, books or really anything you can think of.&lt;/p&gt;
&lt;p&gt;The only real downside to this is that Emacs is, well, old. There is great power there, but is is only accessible to those willing to learn the myriad key combinations to invoke it. Rellay, mastering Emacs is a task for years, not weeks. But of course, you are not forced to wield all the power Emacs has to offer at once. Getting up to speed with basic text editing in Emacs will only take a few minutes, and the built-in help system and tutorial will guide you further whenever you feel the need to explore.&lt;/p&gt;
&lt;p&gt;I have been using Emacs for several months now and I am really enjoying it. It has a few shortcomings, but it is constantly being improved and getting more modern every day. I can see myself giving in to it and just live in Emacs all day long, but for now, I'm happy with it just being my primary text editor. However, I can't quite get beyond the fact that its pure text editing chops are nowhere near Vim. Then again, Emacs does &lt;a href="http://gitorious.org/evil/pages/Home"&gt;support Vim key bindings&lt;/a&gt;, so this might turn out not to bother me in the long run.&lt;/p&gt;
&lt;p&gt;At any rate, I would recommend anyone to give Emacs a shot at least for a short while. The power of Emacs can be an exhilarating experience, really.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://macromates.com/"&gt;Textmate (2)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="images/2012-02/textmate.png"&gt;&lt;img alt="Textmate" src="images/2012-02/textmate_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the longest time, all GUI text editors could generally be classified as either Vim-based, Emacs-based or shortcut-based. The prevalent crop of shortcut-based GUI text editors mapped all its advanced functions to certain modifier-letter combinations and/or menu bar items.&lt;/p&gt;
&lt;p&gt;When Textmate was introduced, it introduced a new concept: snippets. Snippets are short pieces of text which, upon activating a certain trigger, would expand to arbitraryly complex constructs.&lt;/p&gt;
&lt;p&gt;Thus, to define a class in some programming language, you would type &lt;code&gt;class&lt;/code&gt;, then hit TAB, and it would expand to a complete class declaration with constructor, destructor and documentation. Further yet, the class name would be highlighted immediately, so you could start editing it to your liking. These edits would even automatically percolate to all the relevant places in the class declaration and thus automatically change all scope declarations and the like.
Or, you could drag some image file into some LaTeX code and it would expand (dragging being the trigger here) to a whole &lt;code&gt;\begin{figure}&lt;/code&gt; complete with &lt;code&gt;\caption&lt;/code&gt;, &lt;code&gt;\label&lt;/code&gt;, the correct path to the image and everything else you need.&lt;/p&gt;
&lt;p&gt;This has proven to be such a popular feature that since Textmate's inception, implementations of snippets have been developed for pretty much every IDE or text editor out there.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2012-02/textmate_window.png"&gt;&lt;img alt="Textmate Window" src="images/2012-02/textmate_window_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Textmate also featured a very flexible and easily extensible regex based syntax parser, beautiful color schemes, a very elegant project management system and a vibrant community extending it in many directions. This was even more fascinating in that most of this functionality was implemented using a convenient shell scripting engine that could utilize any programming language your shell supported.&lt;/p&gt;
&lt;p&gt;Sadly though, its main developer got stuck somewhere along the way and development all but dried up for five years. This primarily meant that some issues just would not be fixed and thus, got all the more jarring. Most prominently, Textmate lacked split views, regex incremental search and would only do single character undo/redos. Many people left Textmate because of this lack of progress.&lt;/p&gt;
&lt;p&gt;While I was in college, I used Textmate extensively and it proved to be a veritable tool for many editing tasks. It is somewhat limited in its integration with programming tools, though, so don't expect any complex compiler or debugger integration. Ultimately, I left it behind for lack of cross platform compatibility and lack of development. There used to be a Windows program called &lt;a href="http://e-texteditor.com/"&gt;E Text Editor&lt;/a&gt;, which wanted to become a fully compatible Textmate alternative for Windows and Linux, but development never even reached production quality.&lt;/p&gt;
&lt;p&gt;Recently however, an early alpha version of Textmate 2 has been released that could reinvigorate the community and fix long standing issues. Whether that will actually happen will remain to be seen.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.vicoapp.com/"&gt;Vico&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="images/2012-02/vico.png"&gt;&lt;img alt="Vico" src="images/2012-02/vico_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vico is a very new application that has spung to live only in 2011 and is not finished yet. It aims to be a modern Vim, combining the virtue of the powerful mode-based editing system of Vim with a modern Cocoa interface. It even merges Vim's editing capabilities with Textmate-derived snippets and syntax highlighting.&lt;/p&gt;
&lt;p&gt;Really, it tries to be an organic symbiosis of Vim and Textmate. And for most purposes, it very much succeeds in this. Syntax highlighting is very solid, there is a code browser, a nice file browser and full support for Textmate snippets. Vico even includes a powerful scripting environment that enables you to extend it in a language called Nu, which has the interesting aspect of being able to call into every object or method in the Cocoa libraries, thus opening the doors to a boundless world of wonders. Its Vim integration is well on its way, too. The most notable omission at this point are macros. The developer is working on it though and has promised to implement them in the near future. Some other areas are lacking, too, but if development continues I see no reason why it should not become a very nice text editor.&lt;/p&gt;
&lt;p&gt;As it stands though, development of Vico is going slow and its community is not very large yet. Vico is a very nice tool, but at the end of the day, I miss the raw power of an actual Vim just as I miss the vibrant community around Textmate. If you are not spoiled by Vim yet or find Vim just a bit too ugly for your taste, you could give Vico a try though.&lt;/p&gt;
&lt;p&gt;Personally, I like it quite a bit and I am hoping very much that it will not be forgotten as a failed attempt to modernize Vim. That said, what with Sublime Text 2 including a limited support for Vim key bindings, I can't really see Vico taking off.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text 2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="images/2012-02/sublimetext.png"&gt;&lt;img alt="Sublime Text" src="images/2012-02/sublimetext_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sublime Text is a fairly recent development. It is a one-man project that has gained a lot of enthusiastic following in the last few months. In many ways, it feels like the next step in text editor development. Much like several other text editors out there, it has adopted Textmate snippets, color themes and syntax definitions as its core feature set. On top of that though, it has built a very powerful and flexible extension system that really sets it apart.&lt;/p&gt;
&lt;p&gt;Do you remember CMD-T from Textmate? To open some file, you would hit CMD-T and start typing a file name. The name would be fuzzy matched to select from all available files. Thus, typing &lt;code&gt;bcc&lt;/code&gt; would select &lt;code&gt;BeaconController.cpp&lt;/code&gt;. This form of selection is increadibly intuitive and fast. It is also the basis for the extension system of Sublime Text. If there is no keyboard shortcut for a command, hit CMD-Shift-P and start typing to invoke the command.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2012-02/sublimetext_window.png"&gt;&lt;img alt="Sublime Text Window" src="images/2012-02/sublimetext_window_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In very much the same way as M-x in Emacs (though with fuzzy matching), this can invoke arbitrarily complex commands such as &lt;code&gt;install bundle&lt;/code&gt; or using some refactoring library. Additionally, the same mechanism can be used to jump to method names or opening files. Really, these features are very efficient implementations of a code browser and file browser.&lt;/p&gt;
&lt;p&gt;The second big thing about Sublime Text is just the ridiculous amount of polish it received. For example, if you have two files with the same name, it will prefix the tab titles with the folder they reside in. Simple, but so useful! If you jump around in a file, there is always a subtle scrolling animation. Even simple text selections have slightly rounded borders and just look amazingly beautiful.&lt;/p&gt;
&lt;p&gt;Also of note is that Sublime Text supports multiple cursors. Want to change then name of all occurrences of a variable? Just select them all (!) and change them all at once. This is another amazingly useful feature.
Its plugin system is based in Python, which is a refreshingly non-awkward choice for a text editor and spawned an astonishing amount of very interesting plugins already. Indeed the plugin system is flexible enough to support things like linters, source control integration and even something akin to Emacs's org-mode.
And it also supports &lt;a href="http://www.sublimetext.com/docs/2/vintage.html"&gt;Vim key bindings&lt;/a&gt;. Not very complete, but easily enough to be useful. Oh, and it is available cross-platform on Mac, Windows and Linux, too.&lt;/p&gt;
&lt;p&gt;I think there are three big families of text editors: Emacs, Vim, and shortcut-based text editors. Since I discovered Textmate however, I started believing that it represents a new branch in the big tree of text editors. Sublime Text seems to be the next step in the evolution of the Textmate branch.&lt;/p&gt;
&lt;p&gt;Really, Sublime Text is an amazing achievement. Maybe not quite as hackable as Emacs and not quite as flexible as Vim, but easily beating both in terms of elegance and modernity. If you don't want to learn Emacs or Vim, Sublime Text is what you should use. In fact, it is the first text editor ever that has tempted me to leave Emacs and Vim behind. Nuff said.&lt;/p&gt;
&lt;h3&gt;What else is out there&lt;/h3&gt;
&lt;p&gt;Of course, that little list up there is by no means complete. Neither does it list all the amazing features these text editors have to offer, nor does it represent an exhaustive list of them. To the best of my knowledge, this is a short list of other text editors for the Mac platform. Note however, that I have never used any of them extensively and can only tell you stuff from heresay.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.barebones.com/products/bbedit/index.html"&gt;BBEdit&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/bbedit.png"&gt;&lt;img alt="BBEdit" src="images/2012-02/bbedit_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BBEdit is the big daddy of Mac text editors. It is currently available in version 10 and has a huge follwing predominantly amongst web developers. As far as I can tell, it includes amazing features for editing HTML. Maybe amongst the best out there.
The remainder of its feature set seems rather standard crop though. There is some support for compilation, source code control, snippets, plugins… Though nothing on the level of Vim or Emacs really. Its most important disadvantage is probably its lack of cross-platform availability and extensibility.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.barebones.com/products/textwrangler/"&gt;TextWrangler&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/textwrangler.png"&gt;&lt;img alt="TextWrangler" src="images/2012-02/textwrangler_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TextWrangler is the free smaller brother of BBEdit. Its feature set is somewhat pared down in comparison with BBEdit. In particular, it is missing BBEdit's famous HTML magic and some advanced external tool integration.
Even for free, there are probably more capable candidates available, though maybe not at the same level of platform integration. That said, TextWrangler is not a bad choice and probably just fine for some casual text editing.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.jedit.org/"&gt;JEdit&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/jedit.png"&gt;&lt;img alt="JEdit" src="images/2012-02/jedit_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I really don't know much about JEdit other than that it is written in Java, it has a sizeable following and it is available cross-platform. It seems like it could be about as useful as any shortcut based text editor can ever be, which is no small achievement. Also, it features a rich plugin system, of which I only heard good things.
For all I know, this could be a very worthy alternative if you are on a budget (no Sublime Text) and don't want to learn Emacs or Vim.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://chocolatapp.com/"&gt;Chocolat&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/chocolat.png"&gt;&lt;img alt="Chocolat" src="images/2012-02/chocolat_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chocolat is yet another text editor that came into being in the post-Textmate void. It offers a good range of standard features, though notably missing advanced plugins apparently. Apart from that, it seems to be a solid shortcut based Mac text editor that is relatively cheap and actively developed.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.kodapp.com/"&gt;Kod&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/kod.png"&gt;&lt;img alt="Kod" src="images/2012-02/kod_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kod started out as an open source alternative to Textmate. This is quite uncommon for a post-Textmate text editor and worth supporting. After a good start however, the developer found a new job and development has pretty much stalled.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.codingmonkeys.de/subethaedit"&gt;SubEthaEdit&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/subethaedit.png"&gt;&lt;img alt="SubEthaEdit" src="images/2012-02/subethaedit_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The great thing about SubEthaEdit is collaborative editing. if you want to edit text collaboratively with several people, SubEthaEdit performs the task seamlessly and elegantly.
Beyond that, it is a capable shortcut-based text editor. If you don't need the collaboration feature, you should probably look elsewhere though.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.peterborgapps.com/smultron/"&gt;Smultron&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/smultron.png"&gt;&lt;img alt="Smultron" src="images/2012-02/smultron_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another venerable veteran on the Mac, Smultron used to be a free open source text editor that had a sizeable following. However, the developer ceased development at some point and later restarted the effort as a paid app in the Mac App Store.
Smultron lost most of its following in that transition.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.slickedit.com/products/slickedit"&gt;SlickEdit&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/slickedit.png"&gt;&lt;img alt="SlickEdit" src="images/2012-02/slickedit_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SlickEdit is easily the most expensive text editor in this list. A single user license for one platform and one developer costs a scant 300 bucks. That is a lot of money for a text editor and is usually only shelled out only for business critical platform exclusive IDEs. It seems as if SlickEdit tries to be exactly that for general purpose text editing.
It's feature list reads very well and checks all mayor boxes. It is available on pretty much any platform out there and is probably only rivalled by Emacs or Vim in that regard. It also supports emulation for Emacs or Vim key bindings.
That said, 300-600 $ per developer is a pretty hefty price tag. Personally, I doubt that SlickEdit can live up to that price if you compare it to some of the other examples in this list. It is undoubtedly a well-maintained and powerful text editor though.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://www.activestate.com/komodo-edit"&gt;Komodo Edit&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/komodo.png"&gt;&lt;img alt="Komodo Edit" src="images/2012-02/komodo_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Komodo Edit is the free open source offspring of ActiveState's Komodo IDE. It's feature set is very complete and seems to be very worthy for many editing tasks. Being of IDE ancestry provides it with nice plugin support and very helpful deep language integration like sophisticated autocompletion and syntax checking.
There are also quite good Vim key bindings and it is available on the three major platforms. However, its language support is limited to Perl, Python, Tcl, PHP, Ruby and Javascript. Probably not a bad choice if you can live with the language selection and are on a budget.&lt;/p&gt;
&lt;h4&gt;TextEdit&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/2012-02/textedit.png"&gt;&lt;img alt="TextEdit" src="images/2012-02/textedit_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The built-in text editor in OSX. No syntax highlighting, project management or any programming support whatsoever make this a rather poor choice. There are plenty of free alternatives out there.
That said, TextEdit does support rich text editing and might be of value for the odd letter to your grandma.&lt;/p&gt;
&lt;h4&gt;Text editors for web development&lt;/h4&gt;
&lt;p&gt;Strangely, all the major Mac text editors that cater specifically for web development are not cross platform. If web development is all you are ever doing though, these text editors might be well worth their money.&lt;/p&gt;
&lt;h5&gt;&lt;a href="http://www.panic.com/coda/"&gt;Coda&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href="images/2012-02/coda.png"&gt;&lt;img alt="Coda" src="images/2012-02/coda_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Combine the SubEthaEdit text editing engine including its collaborative tools with the great FTP program Transmit and you have CODA, the program for "one-window web development". It even includes a reference book to HTML in the package. For what it is, probably of great value and nice polish. As a general purpose text editor, there are better alternatives.&lt;/p&gt;
&lt;h5&gt;&lt;a href="http://macrabbit.com/espresso/"&gt;Espresso&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href="images/2012-02/espresso.png"&gt;&lt;img alt="Espresso" src="images/2012-02/espresso_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another text editor gearing specifically for web development. Thus, you get powerful HTML and CSS editing features and good support for typical web development languages such as PHP, Ruby or Markdoen, but no support for other languages. There is an extension system though that could improve language support. This might be a slightly less expensive alternative to Coda.&lt;/p&gt;
&lt;h5&gt;&lt;a href="http://tacosw.com/"&gt;Taco HTML Editor&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href="images/2012-02/taco.png"&gt;&lt;img alt="Taco HTML Editor" src="images/2012-02/taco_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another text editor geared exclusively towards web development. This time around though, there is no support for languages other than HTML, CSS and PHP, which makes this program a rather poor choice.&lt;/p&gt;
&lt;h5&gt;&lt;a href="http://www.beforedawnsolutions.com/applications/skedit"&gt;skEdit&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href="images/2012-02/skedit.png"&gt;&lt;img alt="skEdit" src="images/2012-02/skedit_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;skEdit supports a nice array of web development languages and offers a good range of features for a web development text editor. Also, it is pretty inexpensive in comparison to its brethren here. Probably a nice choice for web development if you are on a budget.&lt;/p&gt;</summary><category term="text-editor"></category><category term="vim"></category><category term="emacs"></category><category term="sublime-text"></category></entry><entry><title>How to make Tagbar work with Objective-C</title><link href="http://bastibe.de/how-to-make-tagbar-work-with-objective-c.html" rel="alternate"></link><updated>2011-12-04T20:21:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2011-12-04:how-to-make-tagbar-work-with-objective-c.html</id><summary type="html">&lt;p&gt;For the longest time, ctags did not support Objective-C. Without tags, many of the cool programming-related features of Vim simply didn't work. (There are ways to coax other programs to output tags, but this is usually painful)&lt;/p&gt;
&lt;p&gt;Recently however, ctags finally gained support for Objective-C! Hurrah!
As of today, Objective-C support is not in the stable branch yet, but thanks to the magic of homebrew, an Obj-C ready ctags is only a &lt;code&gt;brew install ctags --HEAD&lt;/code&gt; away!&lt;/p&gt;
&lt;p&gt;With that, tag navigation in Vim works for Objective-C. Awesome!
However, Tagbar does not work yet. There used to be &lt;a href="http://stackoverflow.com/a/5790832/1034"&gt;a workaround&lt;/a&gt; that apparently worked for some people, but it did not work for me.
Things like this drive me nuts. I can see that tags are being generated, but Tagbar won't show them. What is going wrong?&lt;/p&gt;
&lt;p&gt;Some investigation proved: There is simply no template in Tagbar for Objective-C! Luckily, that can be fixed quite easily: Simply put this code in your .vimrc:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;Objective&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;tagbar&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;tagbar_type_objc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ctagstype&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ObjectiveC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kinds&amp;#39;&lt;/span&gt;     &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i:interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;I:implementation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p:Protocol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;m:Object_method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c:Class_method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v:Global_variable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F:Object field&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f:function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p:property&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t:type_alias&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s:type_structure&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e:enumeration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;M:preprocessor_macro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;\&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sro&amp;#39;&lt;/span&gt;        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kind2scope&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;I&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;implementation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Protocol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;type_structure&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enumeration&amp;#39;&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scope2kind&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;interface&amp;#39;&lt;/span&gt;      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;implementation&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Protocol&amp;#39;&lt;/span&gt;       &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;type_structure&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enumeration&amp;#39;&lt;/span&gt;    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that, Tagbar should work. Admittedly, it won't work perfectly yet. Class definitions will show up in addition to their contents and the contents of all categories will go into the same list. Also, you won't get much more than a flat list of functions with no way to distinguish between class methods and object methods. This can be confusing at times, but by and large, it does the job!&lt;/p&gt;
&lt;p&gt;Happy Vimming!&lt;/p&gt;</summary><category term="vim"></category><category term="text-editor"></category></entry><entry><title>Compiling Scipy and Matplotlib again</title><link href="http://bastibe.de/compiling-scipy-and-matplotlib-again.html" rel="alternate"></link><updated>2011-10-13T15:27:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2011-10-13:compiling-scipy-and-matplotlib-again.html</id><summary type="html">&lt;p&gt;Well, it's compile time again. Once again, I need to install scipy and matplotlib using homebrew and pip on Lion.&lt;br /&gt;
It seems things have improved since I tried to compile last time! Well, it still does not work out of the box, but at least now it can be done without compiling by hand:
(remember to brew install pkg-config and gfortran first)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install -e git+https://github.com/scipy/scipy#egg=scipy-dev&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;pip install -e git+https://github.com/matplotlib/matplotlib#egg=matplotlib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I must say, this is still a mess. But at least, it is getting less bad.&lt;/p&gt;</summary><category term="compiling"></category><category term="scipy"></category><category term="matplitlib"></category><category term="pip"></category></entry><entry><title>Adobe AIR Application Crashes</title><link href="http://bastibe.de/adobe-air-application-crashes.html" rel="alternate"></link><updated>2011-09-03T13:08:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2011-09-03:adobe-air-application-crashes.html</id><summary type="html">&lt;p&gt;Adobe, oh Adobe. Why?&lt;/p&gt;
&lt;p&gt;Your updater pops open. Adobe AIR 2.5, if I remember correctly. It runs, and after that, all AIR applications stop working. They boot, then crash and barf up a crash report.&lt;/p&gt;
&lt;p&gt;Turns out, this is a problem with case sensitive file systems. If your file system is not case sensitive, you are experiencing some other problem and this fix is not for you.&lt;/p&gt;
&lt;p&gt;See, Adobe has this library called &lt;code&gt;WebKit.dylib&lt;/code&gt;. However, their code actually looks for &lt;code&gt;Webkit.dylib&lt;/code&gt; (note the capitalisation of the K). Well, spelling is hard, I presume.&lt;/p&gt;
&lt;p&gt;At least this is an error that can easily be fixed. Fire up your terminal, type
&lt;code&gt;cd /Library/Frameworks/Adobe\ AIR.framework/Version/Current/Resources/&lt;/code&gt;
&lt;code&gt;sudo ln -s WebKit.dylib Webkit.dylib&lt;/code&gt;
Then enter your password and your AIR applications should work again.&lt;/p&gt;
&lt;p&gt;Dear Adobe, is it too much to ask to pretty please make your software work on a case sensitive file system? Spelling is primary school stuff. It is really not that hard!&lt;/p&gt;</summary><category term="computers"></category></entry><entry><title>Compiling Scipy and Matplotlib using pip on Lion</title><link href="http://bastibe.de/compiling-scipy-and-matplotlib-using-pip-on-lion.html" rel="alternate"></link><updated>2011-08-01T12:40:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2011-08-01:compiling-scipy-and-matplotlib-using-pip-on-lion.html</id><summary type="html">&lt;p&gt;So I upgraded to Lion. Predictably, some things went wrong. This time, the main thing that bit me was that for some reason, &lt;code&gt;pip&lt;/code&gt; stopped working. After a bit of messing around with &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;easy_install&lt;/code&gt;, I found out it was almost entirely my own fault. I messed up my &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the meantime, I had uninstalled all of &lt;code&gt;brew&lt;/code&gt;'s Python, so I had to reinstall. For me, that entails Python, Numpy, Scipy and Matplotlib. Only this time, Scipy would not build. Some obscure error in some &lt;code&gt;veclib_cabi_c.c&lt;/code&gt; would report errors. A quick &lt;a href="http://mail.scipy.org/pipermail/scipy-user/2009-June/021383.html"&gt;round of googling&lt;/a&gt; reveals:&lt;/p&gt;
&lt;p&gt;In order to get Scipy to compile, you need to insert &lt;code&gt;#include &amp;lt;complex.h&amp;gt;&lt;/code&gt; in&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scipy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blas&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fblaswrap_veclib_c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scipy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fblaswrap_veclib_c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scipy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sparse&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;eigen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arpack&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ARPACK&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;FWRAPPERS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;veclib_cabi_c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That done, Scipy compiles perfectly fine.&lt;/p&gt;
&lt;p&gt;But, that is not enough yet. As &lt;a href="http://jholewinski.wordpress.com/2011/07/21/installing-matplotlib-on-os-x-10-7-with-homebrew/"&gt;this blogpost&lt;/a&gt; outlines, Matplotlib is not currently compatible with &lt;code&gt;libpng&lt;/code&gt; 1.5, which ships with Lion. Fortunately, this is already fixed in the most recent source on the Matplotlib repo, so you just have to checkout that:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/matplotlib/matplotlib.git#egg=matplotlib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By doing that, Matplotlib should install just fine.&lt;/p&gt;
&lt;p&gt;Seriously though, these PyPi repos are in a very sorry state. Every time I install one of these packages, I have to jump through hoops and spend hours debugging packages that really should work right out of the box. After all, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;rvm&lt;/code&gt; and &lt;code&gt;gem&lt;/code&gt; can do it just fine. Why is &lt;code&gt;pip&lt;/code&gt; such a horrible mess?&lt;/p&gt;</summary><category term="compiling"></category><category term="scipy"></category><category term="matplotlib"></category><category term="pip"></category></entry><entry><title>Installing Pygame using Homebrew</title><link href="http://bastibe.de/installing-pygame-using-homebrew.html" rel="alternate"></link><updated>2011-03-04T14:16:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2011-03-04:installing-pygame-using-homebrew.html</id><summary type="html">&lt;p&gt;So I want to do audio development on the Mac without using Matlab. An alternative to Matlab is Python, or rather, &lt;a href="http://www.daskrachen.com/2011/02/installing-pythonnumpyscipymatplotlib.html"&gt;Numpy, Scipy and Matplotlib&lt;/a&gt;. They are awesome for working with audio data. What they don't do however is playing back audio. There are several packages out there that would afford audio playback. If you are serious about this though, you not only want audio playback, you want asynchronous audio playback. That is, you want to send some audio data to the sound card and continue with your program without waiting for the audio to finish playing. This allows continuous audio playback of computer-generated sound.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pygame.org/news.html"&gt;Pygame&lt;/a&gt; is one package that allows this. (I will submit a patch to &lt;a href="http://people.csail.mit.edu/hubert/pyaudio/"&gt;Pyaudio&lt;/a&gt; soon that will enable it there, too). There are pre-built binaries on the Pygame website that you can install easily. But then there would be no easy way to uninstall them, so what I would rather want is to install Pygame using package managers that allow easy updating and uninstallation. My tool of choice on the Mac is of course &lt;a href="https://github.com/mxcl/homebrew/"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that although I am mostly interested in audio playback, this post will detail the installation of all modules of Pygame, not just &lt;code&gt;pygame.mixer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Homebrew won't install Pygame, but it will install all the prerequisites for Pygame. So, let's do that.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sdl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sdl_mixer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sdl_ttf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;libpng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jpeg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sdl_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;portmidi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install most packages for you. Note that &lt;code&gt;libpng&lt;/code&gt; is also available as a system library, so it is installed &lt;code&gt;keg_only&lt;/code&gt;, that is, without linking it in your path. We will need to compile against it though, so the next step is&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;libpng&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now there is still one package missing, &lt;code&gt;smpeg&lt;/code&gt;. Sadly, &lt;code&gt;smpeg&lt;/code&gt; does not install its headers, so you can't compile against it. To fix that, type&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt; &lt;span class="n"&gt;smpeg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and add the following line just above the two end at the end of the file&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*.h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then save the file. (I submitted a bug to have this fixed, so you might not need to do this when you read this). Now you can install &lt;code&gt;smpeg&lt;/code&gt; with the usual&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;smpeg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you will get the headers, too. Isn't Homebrew great?&lt;/p&gt;
&lt;p&gt;Now that all the prerequisites are met, lets look at Pygame itself. This is rather more difficult, as it will not build properly against Homebrew libraries on its own. First, download the source package of Pygame from the &lt;a href="http://www.pygame.org/download.shtml"&gt;official website&lt;/a&gt;. Unpack it to some directory.&lt;/p&gt;
&lt;p&gt;Now open a terminal and navigate to that directory. Me, I like &lt;a href="http://iterm.sourceforge.net/"&gt;iTerm&lt;/a&gt;, but Terminal.app will do just fine, too. In there, run &lt;code&gt;python config.py&lt;/code&gt; to create an initial setup file.&lt;/p&gt;
&lt;p&gt;At this point, the setup file is mostly useless since &lt;code&gt;config.py&lt;/code&gt; failed to find any homebrew-installed library. It is also strangely garbled, so there is some manual labor to do. Open the file &lt;code&gt;Setup&lt;/code&gt; (no extension) in your favourite text editor. After the first comment block, you will see a line that looks like this&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;SDL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NEED_INC_PATH_FIX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NEED_LIB_PATH_FIX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lSDL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, this is lacking the paths to the SDL library. If you installed Homebrew to its default directory, this will be in &lt;code&gt;/usr/local…&lt;/code&gt;. Hence, change this line to&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;SDL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SDL&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lSDL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next lines are strangely garbled. They say, for example&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;FONT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lD&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lL&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where they actually should say&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;FONT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lSDL_ttf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of having one &lt;code&gt;-l&lt;/code&gt; and then the library name &lt;code&gt;SDL_ttf&lt;/code&gt;, they put &lt;code&gt;-l&lt;/code&gt; in front of every single letter of the name. This is strange, and certainly wrong. So, correct it for &lt;code&gt;FONT&lt;/code&gt;, &lt;code&gt;IMAGE&lt;/code&gt;, &lt;code&gt;MIXER&lt;/code&gt; and &lt;code&gt;SMPEG&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that I did not tell you to do this for &lt;code&gt;PORTTIME&lt;/code&gt;, too. Actually, &lt;code&gt;PORTTIME&lt;/code&gt; is already correctly linked in &lt;code&gt;PORTMIDI&lt;/code&gt;, so you don't need that at all any more. Just delete or comment the &lt;code&gt;PORTTIME&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;Now that all the dependencies are corrected, lets enable the features. A few lines further down, there will be a block of lines, where most lines begin with a &lt;code&gt;#&lt;/code&gt; except for the ones beginning with &lt;code&gt;_numericsurfarray…&lt;/code&gt; and &lt;code&gt;_camera…&lt;/code&gt;, These are the different features of Pygame: The ones with the &lt;code&gt;#&lt;/code&gt; are disabled, the other two are enabled.&lt;/p&gt;
&lt;p&gt;With all the stuff we installed earlier, you can now enable all features (remove the &lt;code&gt;#&lt;/code&gt; in front of &lt;code&gt;imageext…&lt;/code&gt;, &lt;code&gt;font…&lt;/code&gt;, &lt;code&gt;mixer…&lt;/code&gt;, &lt;code&gt;mixer_music…&lt;/code&gt;, &lt;code&gt;_minericsndarray…&lt;/code&gt;, &lt;code&gt;movie…&lt;/code&gt;, &lt;code&gt;scrap…&lt;/code&gt; and &lt;code&gt;pypm…&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Remember we disabled &lt;code&gt;PORTTIME&lt;/code&gt; a while ago? Right, so we have to remove that dependency: In the line starting with &lt;code&gt;pypm…&lt;/code&gt;, delete the part that says &lt;code&gt;$(PORTTIME)&lt;/code&gt;. Great. That was easy, right? Now save that file and go back to the Terminal.&lt;/p&gt;
&lt;p&gt;We are now going to compile and install Pygame. The nice thing is, even though we are installing it manually, it will go in the right directories and it will be registered with &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;easy_install&lt;/code&gt;, so you can just invoke them if you want to uninstall it later by typing &lt;code&gt;pip uninstall pygame&lt;/code&gt;. This is something I love about Python!&lt;/p&gt;
&lt;p&gt;Alright, now without further ado, install Pygame by typing&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great! That's it! Everything should work now!&lt;/p&gt;</summary><category term="compiling"></category><category term="numpy"></category><category term="scipy"></category><category term="matplotlib"></category><category term="homebrew"></category><category term="pygame"></category></entry><entry><title>Installing Python/Numpy/Scipy/Matplotlib on OSX</title><link href="http://bastibe.de/installing-pythonnumpyscipymatplotlib-on-osx.html" rel="alternate"></link><updated>2011-02-03T16:23:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2011-02-03:installing-pythonnumpyscipymatplotlib-on-osx.html</id><summary type="html">&lt;p&gt;For numerical analysis and signal processing prototyping, you would use &lt;a href="http://www.mathworks.com/products/matlab/"&gt;Matlab&lt;/a&gt;. However, Matlab has some downsides that might make it unsuitable for your project. It might be too expensive. You might be a snobbish programmer that can't stand less-than-elegant programming languages. I certainly am.&lt;/p&gt;
&lt;p&gt;So, you look for alternatives. You could take &lt;a href="http://www.gnu.org/software/octave/"&gt;Octave&lt;/a&gt;, which is free, but that would not solve that ugly-code issue. You could take any scripting language you fancy, but Ruby, Perl and Python are too slow to do serious number crunching.&lt;/p&gt;
&lt;p&gt;Then, you stumble upon that Python package called &lt;a href="http://numpy.scipy.org/"&gt;Numpy&lt;/a&gt;, which seems to be nearly as fast as Matlab when it comes to matrix processing and linear algebra. You then discover &lt;a href="http://www.scipy.org/"&gt;SciPy&lt;/a&gt;, which would add all that signal processing prowess of Matlab (do quick transformations, random numbers, statistics) to your toolbox. Last but not least, you need plotting. That would be &lt;a href="http://matplotlib.sourceforge.net/"&gt;Matplotlib&lt;/a&gt; then, which provides quick plotting facilities in Python.&lt;/p&gt;
&lt;p&gt;And the best thing is, these three systems work really well together. They seem to be the perfect replacement for Matlab that could even be superiour to it in many regards.&lt;/p&gt;
&lt;p&gt;Next up, you need to install all that stuff. If you are like me, you naturally want to do all that on a Mac. Also, you kind of dislike all these installer-thingies, which install stuff to unknown places and are nigh impossible to uninstall or update cleanly. Even though, you could of course just go to the individual websites, download Python, Numpy, SciPy and Matplotlib, run them installers, and be done. You would save yourself a lot of trouble that way.&lt;/p&gt;
&lt;p&gt;But since you allegedly are like me, you instead fire up &lt;a href="http://mxcl.github.com/homebrew"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt; and try to install all that stuff using that. Again, you could use &lt;a href="http://www.macports.org/"&gt;MacPorts&lt;/a&gt; or &lt;a href="http://www.finkproject.org/"&gt;Fink&lt;/a&gt; instead, but you probably had some bad experiences with them and you generally love the hackishness of Homebrew, so this is your natural first try.&lt;/p&gt;
&lt;p&gt;So you set about this, you believe in packet managers and trust them to take care of every obstacle that might be lying in your way. First of all, install the latest developer tools from &lt;a href="http://developer.apple.com/"&gt;developer.apple.com&lt;/a&gt;. You might need to register (for free) to get them. Also, you need to install &lt;a href="http://mxcl.github.com/homebrew"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To cut this short, here is what you need to get that Python running:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This one should be obvious. At the time of writing, it will install Python 2.7.1. You could take Python 3, but matplotlib is not compatible to it, so you kind of have to stick with 2.7.1 instead.&lt;/p&gt;
&lt;p&gt;You also need to put &lt;code&gt;/usr/local/bin&lt;/code&gt; and &lt;code&gt;/usr/local/sbin&lt;/code&gt; in the beginning of your path to make sure the new Python gets loaded instead of the pre-installed one. You do that by writing&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in your &lt;code&gt;~/.bash_profile&lt;/code&gt;. (Create it if its not there--it is just a simple text file).&lt;/p&gt;
&lt;p&gt;Now, if you type &lt;code&gt;python --version&lt;/code&gt;, you should get &lt;code&gt;Python 2.7.1&lt;/code&gt; as a response.&lt;/p&gt;
&lt;p&gt;Alright, next up, install the python package manager:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;distribute&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will come preconfigured for your newly installed Python. In an ideal world, this should be all. The world being as it is, the pip package of Matplotlib is severely broken and has one other unstated dependency:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, SciPy is using some FORTRAN sources, so you need a fortran compiler:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gfortran&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright. That was enough. Now on to pip. With all these dependencies cleared, pip should be able to download Numpy and Scipy without trouble:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;scipy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Matplotlib, on the other hand, is more difficult to install. You see, pip is looking at the Python package repository &lt;a href="http://pypi.python.org/"&gt;PyPi&lt;/a&gt; for each package. PyPi then provides a URL. Pip then scans that website for links to suitable package files. But, &lt;a href="http://sourceforge.net/"&gt;Sourceforge&lt;/a&gt; changed its links a while ago, so pip gets confused and will download an outdated version. Sourceforge says, its new links are way better and no way we will change them back; Pip says, well, if Sourceforge can't provide proper links, that's not our problem. Oh My. Silly children.&lt;/p&gt;
&lt;p&gt;So we have to do this manually:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-1.0.1/matplotlib-1.0.1.tar.gz matplotlib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That URL comes straight from Sourceforge. Look for the latest version of Matplotlib, search for the download link to the source distribution (&lt;code&gt;*.tar.gz&lt;/code&gt;), copy that link and strip any trailing '/download'.&lt;/p&gt;
&lt;p&gt;UPDATE:&lt;/p&gt;
&lt;p&gt;It seems the matplotlib package was updated in the meantime, so you can just run &lt;code&gt;pip install matplotlib&lt;/code&gt; now.&lt;/p&gt;
&lt;p&gt;This should now download and install matplotlib.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;</summary><category term="compiling"></category><category term="numpy"></category><category term="scipy"></category><category term="matplotlib"></category><category term="python"></category></entry><entry><title>The strangeness of widescreen displays in modern operating systems</title><link href="http://bastibe.de/the-strangeness-of-widescreen-displays-in-modern-operating-systems.html" rel="alternate"></link><updated>2010-07-03T12:08:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2010-07-03:the-strangeness-of-widescreen-displays-in-modern-operating-systems.html</id><summary type="html">&lt;p&gt;So today, pretty much everyone has widescreen displays. That is, displays that are far more wide than high. This was not always so. In ye olden days, computers were mainly used for displaying text, hence displays tended to have a similar layout as books or magazines. Today, they are more like movies (which might be worrying in itself).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Aspect Ratios" src="images/2010-03/aspect_ratios.png" /&gt;&lt;/p&gt;
&lt;p&gt;So todays displays are widescreen. To do all that modern stuff, like watch (widesreened) videos or multitask (display two windows side by side). However, this also means that vertical pixels are something of a scarcity. Especially on those small Laptop screens. In fact, the first Netbook screens were so tiny that many of Windows' own windows could not be used at all since the lower parts did not fit on the screen. Raise your hand if Word 2007 leaves barely ten lines of visible text between all its blue-tinted UI-splendour on your laptop screen.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2010-03/word.png"&gt;&lt;img alt="Microsoft Word" src="images/2010-03/word_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This gets most straining when reading text. On the internet for example. There is practically no website at all that can be displayed in its entirity even on one of those full HD displays. Print-formatted documents are a similar matter. Actually, I find myself craving for pixels regularly. I even disable the bookmark bar in my browser to free those extra two lines of text. And I memorize keyboard shortcuts so I can hide toolbars. And I use Google Chrome instead of Firefox/Safari/Internet Explorer, not least of all since it has the smallest title bar and no bottom bar.&lt;/p&gt;
&lt;p&gt;Why, then, do modern operating systems still waste so much vertical space with that Dock/Taskbar? This is something I really don't get. Vertical space is such a scarcity, yet virtually every operating system choses to waste at least three lines of text with something that could easily go on the side of the display. Well, at least on Windows 7 and OSX that is something you can easily change.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2010-03/dock.png"&gt;&lt;img alt="The OSX Dock" src="images/2010-03/dock_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So if you are like me and appreciate every added line of text, do yourself a favour and put your Dock/Taskbar on the side. Really, this should be the default.&lt;/p&gt;</summary><category term="ui"></category><category term="computers"></category></entry><entry><title>Gedanken zu User Interfaces</title><link href="http://bastibe.de/gedanken-zu-user-interfaces.html" rel="alternate"></link><updated>2009-04-25T14:15:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-04-25:gedanken-zu-user-interfaces.html</id><summary type="html">&lt;p&gt;Jeder kennt dieses Fenster:&lt;/p&gt;
&lt;p&gt;&lt;img alt="delete file" src="images/2009-04/delete_file.png" /&gt;&lt;/p&gt;
&lt;p&gt;Dieses Fenster ist eine ziemlich schlechte Idee, denn jeder geübte Benutzer hat irgendwann gelernt, dass die Aktion "Dateien Löschen" aus drei Gesten besteht: (1) Dateien auswählen, (2) Die Löschaktion einleiten, (3) Den Löschdialog bestätigen. Leider hat man schon vor mehr als zwanzig Jahren nachgewiesen, dass solche zusammengehörigen Gesten von den Benutzern als einzelne "Datei-Löschen" Geste abstrahiert werden. Man kennt das vom Tippen: Man tippt Worte nicht, indem man einzelne Buchstaben aneinander hängt, sondern man tippt Worte fast immer am Stück; Hat man erst einmal angefangen, ein falsches Wort zu tippen, kann man damit nicht aufhören, bis das gesamte Wort getippt ist. Auf ähnliche Weise ist es dem Benutzer auch nicht möglich, auf den Löschdialog sinnvoll zu reagieren, da das Bestätigen der Sicherheitsfrage vollkommen automatisiert ist und daher nicht einmal verhindert werden könnte, wenn man wollte.
Die Alternative ist ein alter Bekannter: Undo. Statt den Benutzer im Vorfeld zu fragen, ob er die Datei wirklich löschen möchte (was er durch Einleiten der Löschaktion bereits bejaht hat) gibt man ihm die Möglichkeit, die Aktion im Nachhinein wieder rückgängig zu machen. Das ist wesentlich effektiver und kommt ohne nerviger Dialogbox aus. Übrigens funktioniert Dateiaktion-Undo bereits heute in allen Betriebssystem außer Linux, jedoch ohne Menüicon und zumeist nur für die letzte Aktion. Wäre es nicht schön, wenn dies noch weiter ausgebaut würde?&lt;/p&gt;
&lt;p&gt;Noch ein gefährlicher Dialog:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ja, nein, abbrechen" src="images/2009-04/ja_nein_abbrechen.png" /&gt;&lt;/p&gt;
&lt;p&gt;Das ist ebenfalls ein alter Bekannter, der immer dann erscheint, wenn man ein Programm schließen will, welches noch ungesichte Änderungen enthält: Abgesehen von dem offensichtlichen Problem, dass "Abbrechen" keinen wirklichen Sinn ergibt (Was abbrechen? Das Programm?) erfordert diese Frage jedes Mal das komplette Lesen der Meldung, bis man entschlüsseln kann, was "Ja" und "Nein" in diesem Kontext bedeuten. Um das noch einmal zu verdeutlichen, hier ein besonders schlimmes Beispiel:&lt;/p&gt;
&lt;p&gt;&lt;img alt="bad GUI" src="images/2009-04/bad_gui.png" /&gt;&lt;/p&gt;
&lt;p&gt;Es leuchtet ein, dass hier ein eindeutigerer Dialog wesentlich sinnvoller wäre, bei dem sofort ersichtlich ist, was welcher Button tun wird: (Merke: Auf Buttons gehören immer Verben)&lt;/p&gt;
&lt;p&gt;&lt;img alt="speichern Windows" src="images/2009-04/speichern_windows.png" /&gt;
&lt;img alt="speichern Mac" src="images/2009-04/speichern_mac.png" /&gt;&lt;/p&gt;
&lt;p&gt;Aber warum eigentlich überhaupt speichern? Warum muss ich mich persönlich darum kümmern, meine Arbeit zu speichern? Ich dachte, ich würde mit einer Datei arbeiten -- aber wenn diese Datei nicht geändert wird, wenn ich nicht zuerst "Speichern" anklicke, habe ich wohl eigentlich doch nicht mit dieser Datei, sondern mit einer heimlichen Kopie gearbeitet. Wäre es nicht viel sinnvoller, immer automatisch zu speichern, und statt des "Speichern"-Buttons eine "auf Urzustand zurücksetzen"-Funktion bereitzustellen? Ich bin mir auf jeden Fall sicher, dass man den "Undo all changes"-Button wesentlich seltener bräuchte als den "Speichern"-Button, denn wenn der Benutzer nicht vorgehabt hätte, neuen Text in eine Datei zu schreiben, dann hätte er keinen neuen Text in die Datei geschrieben. Hat er dennoch "versehentlich" Text eingegeben, ist das ein klarer "Benutzerfehler", also der logische Einsatzzweck für Undo.&lt;/p&gt;
&lt;p&gt;Das sind nur zwei Beispiele, wie man intelligente Undo-Mechanismen sinnvoll einsetzen könnte, um das Arbeiten am Computer angenehmer zu gestalten. Ich wünschte, mehr Leute würden sich mit diesen Dingen auseinander setzen...&lt;/p&gt;</summary><category term="ui"></category></entry><entry><title>Tagged File System</title><link href="http://bastibe.de/tagged-file-system.html" rel="alternate"></link><updated>2009-04-19T09:41:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-04-19:tagged-file-system.html</id><summary type="html">&lt;p&gt;Ein großes Problem bei der Benutzung von Computern ist, dass unerfahrene Benutzer oftmals kein Verständnis für Ordnerstrukturen haben. Das ist im Grunde auch klar, denn die Ordner-Metapher legt nahe, dass sich Ordner auf dem Computer wie echte Aktenordner verhalten, also dass jeder Ordner mehrere Dateien, jedoch nicht andere Ordner enthalten kann. Ganz im Gegenteil dazu basiert aber eine normale Verzeichnisstruktur meist aus vielen, tief ineinander geschachtelten Ordnern. Von einem Usablitity-Standpunkt aus ist daher der Begriff "Ordner" wahrscheinlich schlecht gewählt. Vielleicht würde es schon reichen, den älteren Namen "Verzeichnis" wieder einzuführen. (Dann bräuchten wir nur noch ein passendes Piktogramm für "Verzeichnis"...)&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2009-04/standard_finder.png"&gt;&lt;img alt="Standard Finder" src="images/2009-04/standard_finder_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Es wäre daher wünschenswert, eine einfacher zu verstehende Alternative zu Ordnerhierarchien zu haben. Die gibt es auch schon, in Form der bekannten Verzeichnisse "Meine Bilder", "Meine Dokumente", etc.
Diese Ordner wollen den Benutzer mit einfachen Piktogrammen und klaren Namen dazu animieren, einen natürlichen Ort für seine Dateien zu wählen und so ein wenig Ordnung zu schaffen. Tatsächlich ist dieses Konzept einer Tag-Struktur schon relativ ähnlich, da auch hier nicht davon ausgegangen wird, dass sich der Benutzer selbst um eine tief geschachtelte Orderhierarchie kümmert, sondern nur wenige, einfach zu verstehende Markierungsmöglichkeiten ("Bilder", "Dokumente") geboten werden.&lt;/p&gt;
&lt;p&gt;Ein echtes Tag-basiertes System könnte vollkommen ohne Verzeichnisse auskommen, wobei man dann eben beim Speichern einer Datei nicht mehr aus einer hierarchischen Liste von Ordnern den Speicherort auswählen würde, sondern von einer flachen Liste von Tags. Die Usability-Kosten davon wären vernachlässigbar.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2009-04/tagged_finder.png"&gt;&lt;img alt="Tagged Finder" src="images/2009-04/tagged_finder_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ähnlich würde das Finden von Dateien funktionieren: Statt eine hierarchische Liste von Ordnern nacheinander anzuklicken, würde man eine flache Liste von Tags nacheinander anklicken, jedoch mit dem Bonus, dass man die gesuchte Datei nicht erst bei Anklicken aller Tags, sondern mit großer Wahrscheinlichkeit schon nach ein oder zwei Tags gefunden hätte.&lt;/p&gt;
&lt;p&gt;Ein Problem würde jedoch mit Projekten entstehen, die aus mehreren Dateien bestehen. Hier müsste man sicher stellen, dass sie im Dateisystem nur als einzelne große Projektdatei auftauchen und nicht jede einzelne Unterdatei gelistet wird. Das ließe sich zum Beispiel durch "Bundles" lösen, wie sie heute schon in OSX vorkommen (Ordner mit definierter Namesendung und Inhalt werden wie Dateien behandelt) oder einfach durch einen speziellen Tag, der die einzelnen Dateien vor der normalen Suche versteckt.
Dieses Konzept wird übrigens heute schon vielfach verwendet, so ist etwa eine aktuelle Word-Datei nur eine ZIP-Datei, die eine definierte Verzeichnisstruktur mit allen Bildern, dem Text (als XML), einer Vorschau-Grafik etc. enthält.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/2009-04/bundles.png"&gt;&lt;img alt="Bundles" src="images/2009-04/bundles_small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich glaube, dass man mit solch einem Tag-basierten Dateisystem deutlich einfacher arbeiten könnte als mit den heute üblichen Verzeichnisstrukturen. Tja, jetzt fehlt nur noch eine innovative Firma, die sich um die Umsetzung kümmert...&lt;/p&gt;</summary><category term="file-system"></category><category term="ui"></category></entry><entry><title>Es geht um Tabs</title><link href="http://bastibe.de/es-geht-um-tabs.html" rel="alternate"></link><updated>2009-03-31T20:09:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-31:es-geht-um-tabs.html</id><summary type="html">&lt;p&gt;Tabs sind kaputt. Tabs waren noch nie eine gute Idee. Tabs werden dafür benutzt, um in einem Programm mehrere Fensterflächen voll Inhalt in nur einem Fenster darzustellen. Speziell zu diesem Zweck entwarf man in grauer Vorzeit eine neue Klasse von Programmen namens Fenstermanager. Fenstermanager erlauben es, mehrere Fenster gleichzeitig darzustellen, gerne auch nebeneinander, hintereinander oder übereinander. Kennt jeder. Und Tabs sind eine Krücke, die genau dieses Prinzip unterlaufen, denn sie organisieren Fenster ineinander.&lt;/p&gt;
&lt;p&gt;Aber es ist ja nicht nur das. Wir kennen Tabs schon lange in ganz verschiedenen Formen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tabs Firefox Preferences" src="images/2009-03/tabs_firefoc_preferences.png" /&gt;&lt;br /&gt;
&lt;img alt="Tabs OSX" src="images/2009-03/tabs_osx.png" /&gt;&lt;br /&gt;
&lt;img alt="Tabs Windows" src="images/2009-03/tabs_windows.png" /&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;All diesen Formen gemein ist, dass sie wenigstens einen Rahmen bilden, der andeutet, welcher Teil des Fensters sich ändern wird, wenn man einen anderen Tab öffnet. Die Ausnahme: Browser.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tabs IE8" src="images/2009-03/tabs_ie8.png" /&gt;&lt;br /&gt;
&lt;img alt="Tabs Firefox" src="images/2009-03/tabs_firefox.png" /&gt;&lt;/p&gt;
&lt;p&gt;Wo hat ein Browser seine Tabs? zwischen Adressleiste und Webseiteninhalt. Bei Firefox (besondere Perversion) sind die Tabs sogar so dargestellt, als würden sie nur die Adresszeile ändern (oben befestigte Reiter), ganz im Gegensatz dazu ändern sie aber sowohl die Adresszeile als auch -viel wichtiger- den Webseiteninhalt. Wenn überhaupt, dann sollten sich die Tabs also am oberen Bildschirmrand befinden, so dass man mit ihnen wenigstens konsistent den kompletten Fensterinhalt ändert. Immerhin hier sieht man bereits Licht: Google Chrome und Safari 4 funktionieren bereits so:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tabs Chrome" src="images/2009-03/tabs_chrome.png" /&gt;&lt;br /&gt;
&lt;img alt="Tabs Safari Windows" src="images/2009-03/tabs_safari_windows.png" /&gt;&lt;br /&gt;
&lt;img alt="Tabs Safari OSX" src="images/2009-03/tabs_safari_osx.png" /&gt;&lt;/p&gt;
&lt;p&gt;Die Lösung von Safari hat noch ein paar Probleme: Wo verschiebt man Tabs? (Ungeschickt: an dem kleinen Handle am rechten Tabgreifer-Rand), Wieso haben die Tabs keine Favicons? Aber nicht verzagen: Noch ist Safari 4 lediglich eine Beta. Gut hingegen fände ich es, wenn dieses Tabbed-Fenster-Interface nicht nur für Safari, sondern für jedes andere Programm auch verwendbar wäre, also als Feature des Fenstermanagers implementiert würde. Man müsste daran noch ein wenig feilen, aber es würde Einiges sehr viel übersichtlicher gestalten. Snow Leopard anyone?&lt;/p&gt;
&lt;p&gt;Weitere gute Ideen rund um Tabs, sortiert nach Browser:&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.microsoft.com/windows/internet-explorer/default.aspx"&gt;Microsoft Internet Explorer 8&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tabs werden nach Farben sortiert, je nach dem von welchem Tab aus sie geöffnet wurden&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Im neuen Fenstermanager von Windows 7 werden alle Tabs als eigene Fenster aufgeführt&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Jeder Tab läuft in seinem eigenen Prozess. Bringt aber nix, weil wenn einer abstürzt nimmt er trotzdem den ganzen Browser mit. Ist aber auch noch nur Beta!&lt;br /&gt;
&lt;a href="images/2009-03/tabs_ie8_goodness.png"&gt;&lt;img alt="Tabs IE8 Goodness" src="images/2009-03/tabs_ie8_goodness_small.png" /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://www.mozilla-europe.org/de/firefox/"&gt;Firefox 3&lt;/a&gt; Preview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tabs sollen über ein neuartiges Interface beim Wechsel als Miniaturen dargestellt werden, so dass man einfacher zwischen ihnen wechseln kann&lt;/li&gt;
&lt;li&gt;Viele andere nette Vorschläge rund um diese Idee gibts hier: &lt;a href="http://www.azarask.in/blog/post/new-tab-iterations/"&gt;Aza Raskins Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://www.apple.com/safari/"&gt;Safari 4&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Die Tableiste nimmt keinen eigenen Platz auf dem Bildschirm ein&lt;/li&gt;
&lt;li&gt;Tabs sind am richtigen Ort (oben)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://www.google.com/chrome"&gt;Google Chrome&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tabs sind am richtigen Ort (oben) aber es gibt dennoch eine klassische Titelleiste des Fensters (im Gegensatz zu Safari 4)&lt;/li&gt;
&lt;li&gt;Jeder Tab läuft in einem eigenen Prozess, daher können einzelne Tabs abstürzen ohne den Browser mitzunehmen.&lt;/li&gt;
&lt;li&gt;Jeder Tab läuft in seiner eigenen Sandbox, was es Angreifern wesentlich erschwert, den Browser hochzunehmen.
  &lt;img alt="Tabs Chrome Goodness" src="images/2009-03/tabs_chrome_goodness.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fazit: Es gibt noch viel zu tun, aber anscheinend ergibt sich langsam aber sicher ein Konsens, dass etwas mit Tabs getan werden muss. Es bleibt spannend.&lt;/p&gt;</summary><category term="ui"></category></entry><entry><title>Mirror's Edge</title><link href="http://bastibe.de/mirrors-edge.html" rel="alternate"></link><updated>2009-03-29T22:22:00+02:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-29:mirrors-edge.html</id><summary type="html">&lt;p&gt;&lt;img alt="Mirror's Edge" src="images/2009-03/mirrors_edge.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ich habe am Wochenende, wie in Twitter schon verkündet, Mirror’s Edge (durch-) gespielt. Ganz kurz: Mirror’s Edge ist ein Videospiel für PC/XBOX360/PS3, im Endeffekt ein Platformer aus der Ego-Perspektive, zwar mit der Möglichkeit, Waffen aufzunehmen, aber mit dem klaren Fokus auf Rennen, genauer: Parkours, dem modernen Hindernislauf, hier mit dem Extratwist: auf Hochhausdächern.&lt;/p&gt;
&lt;p&gt;Es wurde schon viel gesagt über dieses Spiel. Müde Story, schlechte Charactermodelle, schlechte Shooter-Elemente, unübersichtliche Atmosphäre, kurze Spieldauer, um nur einige der üblichen Kritikpunkte zu nennen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jump!" src="images/2009-03/mirrors_edge_jump.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ich sage: Alles Popauswurf. Was Mirror’s Edge versucht, ist die Direktheit und Intimität der Egoperspektive mit dem Flow und der Geschwindigkeit eines modernen Platformers zu verbinden. Faith, der Hauptcharakter ist eine kleine “Eurasierin” (Zitat der Entwickler), deren Eltern in einem Widerstandskampf… Bla, bla, bla.
Es geht um Flow, es geht darum, mit blitzschnellen Reflexen und akrobatischem Geschick einen Weg über die Dächer einer Großstadt zu finden. Es geht darum, nicht stehen zu bleiben, nicht zu zögern. Es geht um Geschwindigkeit und Freiheit, über Straßenschluchten zu springen, zwischen Klimaanlagen und Baugerüsten zu sprinten und immer schneller, immer weiter, den Großstadtlärm hinter sich zu lassen. Nur begleitet von Faiths immer wieder ins Bild ragenden Armen und Beinen, ihrem schnellen Atem, dem Rhythmus ihrer Schritte. Und ja, man stirbt häufig, wenn man sich bei einem Sprung verschätzt oder es doch nicht schafft, den Jägern zu entkommen. Aber um so größer ist die Befriedigung einen komplizierten Run endlich zu schaffen und mit einem perfekten Sprung über eine Häuserschlucht die Polizei hinter sich zu lassen.&lt;/p&gt;
&lt;p&gt;Mirror’s Edge perfektioniert den Flow, das Gefühl der Freiheit und der Geschwindigkeit. Klar, dass da die Ego-Shooter-Mechanik auf der Strecke bleibt, aber Faith ist auch keine Kämpferin, sondern selbsterklärter Runner. Sicher, die Story ist ein wenig lahm, aber wir reden hier über ein Computerspiel: Die Story hat allein das Ziel, die einzelnen Schauplätze miteinander zu verbinden, und das gelingt ihr. Charakterentwicklung kennt das Spiel nicht, allein der Spieler wird besser. Und auch das ist gut so, denn in den späteren Leveln ist der Schwierigkeitsgrad nicht von schlechten Eltern. Aber Checkpoints sind häufig und fair verteilt, so dass dies selten ein Problem wird.&lt;/p&gt;
&lt;p&gt;Ach ja, und der Sound ist genial, selten habe ich mich so sehr in eine Spielfigur hineinversetzt gefühlt wie in Faith. Und die Grafik… Ich könnte hier viel schreiben; Ich glaube schlicht, dass die aktuelle Konsolengeneration im Grunde ein Niveau erreicht hat, auf dem weitere Verbesserungen keine große Rolle mehr spielen. Mirror’s Edge, mit seiner gleißend-Weiß-plus-Farbe Ästhetik zeigt hier eine Welt, wie man sie noch nie gesehen hat, in der Farbe nicht nur als Stilmittel, sondern auch als Wegweiser und tatsächlich Spielhilfe eingesetzt wird: Rot ist, wo es weiter geht. Diese Ästhetik ist schwer in Worte zu fassen und gibt dem Ganzen eine ganz eigene Freiheit, im starken Kontrast zum “realistisch”-Grau-Braun, dem sich so viele andere Spiele verschrieben haben.&lt;/p&gt;
&lt;p&gt;Und was bleibt unterm Strich? Ich sage: Das Spiel ist es Wert. Es mag seine Mängel haben, aber allein der Mut, einmal etwas Neues zu machen und nicht dem Einheitsbrei ins Land der Realo-Shooter und der digitalen Nebenjobs zu folgen ist der Beachtung Wert. Einmal nicht schießen zu müssen und stumpfen Missionen zu folgen, sondern in einem Spiel Freiheit zu finden, dass ist eine außergewöhnliche Erfahrung. Wer als Spieler etwas Erfrischung sucht, sollte es probieren. Ich finds geil!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Faith" src="images/2009-03/mirrors_edge_faith.png" /&gt;&lt;/p&gt;</summary><category term="gaming"></category></entry><entry><title>Synchronisieren von Google, Äpfeln, Fenstern und Telefonen</title><link href="http://bastibe.de/synchronisieren-von-google-apfeln-fenstern-und-telefonen.html" rel="alternate"></link><updated>2009-03-28T17:18:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-28:synchronisieren-von-google-apfeln-fenstern-und-telefonen.html</id><summary type="html">&lt;p&gt;&lt;img alt="Cloud" src="images/2009-03/cloud.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Ich hatte lange Zeit zwei Computer, einen Desktop und einen Laptop, jeweils mit verschiedenen Betriebssystemen und Datensätzen. Um dennoch immer mit den selben Daten arbeiten zu können, verwendete ich eine externe Festplatte. Obwohl sehr low-tech, funktionierte diese Lösung absolut tadellos: Meine Linux-Kisten mounteten die Festplatte automatisch in ihr jeweiliges home-Verzeichnis und so konnte ich auf verschiedenen Computern arbeiten, ohne mich um die Synchronizität der Daten kümmern zu müssen.&lt;/p&gt;
&lt;p&gt;Fast-forward ein Jahr, tausche Linux gegen Apple und finde es jetzt doch sehr anstrengend, immer eine externe Festplatte mit mir herumzuschleppen -- Apple-Snob, der ich bin. Sieht auch unelegant aus, dieses schwarze Kästchen an den hübschen Laptop zu klemmen. Es muss also eine andere Lösung her, um immer auf beiden Rechnern mit aktuellen Dateien arbeiten zu können. Es bietet sich an: MobileMe (damals noch .Mac), genauer, die iDisk, also ein Stück online-Speicher bei Apple, auf dem man von mehreren (Apple-) Rechnern aus arbeiten kann. Das Angebot ist verlockend, aber leider erfüllt MobileMe meine Erwartungen nicht, es gehen Daten verloren und ich ärgere mich, jemals Geld für diesen Dreck ausgegeben zu haben.&lt;/p&gt;
&lt;p&gt;Eine Alternative finde ich in Dropbox, welches die Vision des immer synchronen Datenspeichers "in the cloud" endlich erfüllt, wenn auch als Ordner und nicht als Laufwerk. Inzwischen erbringt auch Syncplicity diese Leistung, wenn auch mit einem eigenen Set an Einschränkungen (Es ist aber noch Beta, also kein Grund zur Sorge).&lt;/p&gt;
&lt;p&gt;Dennoch: ganz zufrieden bin ich nicht, einfach, weil zwei Rechner immer eine gewisse Menge "mental overhead" bedeuten. Allein, nicht immer am selben Gerät zu sitzen stellt einfach eine Irritation dar, die im Grunde nicht nötig ist. Na gut, und dieses neue "Unibody"-MacBook Pro ist einfach sexy. Also, tausche iMac + MacBook gegen MacBook Pro. Das löst -logisch- auch alle Synchronizitätsprobleme.&lt;/p&gt;
&lt;p&gt;Aber ich wäre nicht der Sohn meines Vaters, wenn ich nicht immer noch mehr technischen Schnickschnack haben müsste, enter: the iPhone. Dank Apple und iTunes ist es natürlich kein Problem, Kalender, Email, Kontakte und Musik immer synchronisiert zu halten; Kabel reinstecken, iTunes machen lassen und fertig.&lt;br /&gt;
Perfektioniert wird das alles aber erst durch Beihilfe von Google, welches durch ActiveSync (sprich: Exchange) nun auch alle meine Kontakte, Kalendereinträge, Emails und Dokumente auf allen Geräten zur Verfügung stellt. Dieses Setup ist nun endlich wirklich extrem zufriedenstellend. Es ist zwar ein Haufen Kleinkram, den man durcharbeiten muss, bis man das alles richtig konfiguriert hat, aber hat man das einmal getan funktioniert es wirklich tadellos! Und Syncplicity und Dropbox laufen auf dem Rechner einfach nur noch als Backup weiter.&lt;/p&gt;</summary><category term="computers"></category></entry><entry><title>E Text Editor goes Open Source</title><link href="http://bastibe.de/e-text-editor-goes-open-source.html" rel="alternate"></link><updated>2009-03-24T15:16:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-24:e-text-editor-goes-open-source.html</id><summary type="html">&lt;p&gt;&lt;img alt="E Text Editor" src="images/2009-03/e_text_editor.png" /&gt;&lt;/p&gt;
&lt;p&gt;Als ich heute von der FH nach Hause kam, lag &lt;a href="http://e-texteditor.com/blog/2009/opencompany"&gt;das hier&lt;/a&gt; in meinem Newsreader und ich war, in Ermangelung eines besseren Wortes, geschockt.&lt;/p&gt;
&lt;p&gt;Nur, um es noch einmal zu wiederholen: E, der meiner Meinung nach beste Texteditor der Welt wird Open Source. Das kann man nicht oft genug sagen.&lt;/p&gt;
&lt;p&gt;Warum ist E so fantastisch?
&lt;a href="http://www.e-texteditor.com/"&gt;E&lt;/a&gt; ist ein recht neuer, kleiner &lt;a href="http://de.wikipedia.org/wiki/Texteditor"&gt;Texteditor&lt;/a&gt; für Windows. Nein, um ihm Genüge zu tun, muss man E in einem Satz mit &lt;a href="http://de.wikipedia.org/wiki/Emacs"&gt;Emacs&lt;/a&gt;, &lt;a href="http://de.wikipedia.org/wiki/Vim"&gt;Vim&lt;/a&gt; und &lt;a href="http://macromates.com/"&gt;Textmate&lt;/a&gt; nennen, denn wie diese Drei Großen Texteditoren sind auch E keine Grenzen gesetzt, da all seine Funktionalität durch kleine, einfache Skripte entsteht, die von jedem Nutzer beliebig verbessert werden können. Genauer gesagt: E tritt in die direkten Fußstapfen von Textmate, einem Editor für den Mac und ist vollkommen kompatibel mit dessen Erweiterungen, so dass E schon bei seiner Markteinführung auf eine riesige Masse von &lt;a href="http://svn.textmate.org/trunk/Bundles/"&gt;Sprachen, Snippets und Programmen&lt;/a&gt; zurückgreifen konnte, mit der sich jede noch so obskure Textmanipulation bewältigen lässt. Anders als Emacs oder Vim folgt E dabei aber modernen Bedienungs- und Designrichtlinien und fühlt sich genauso flüssig und heimisch an, wie das für eine Windows-Anwendung nur möglich ist.
Seine zweite große, und kaum weniger berauschende Stärke ist sein &lt;a href="http://e-texteditor.com/blog/2006/making-undo-usable"&gt;History-System&lt;/a&gt;. Jeder Benutzer eines Texteditors kennt die Undo-Taste (&lt;a href="http://stackoverflow.com/questions/247568/how-can-i-undo-more-than-a-single-character-in-textmate/248255"&gt;mit Ausnahme von Textmate&lt;/a&gt;. &lt;a href="http://nslog.com/2006/11/08/textmates_undo"&gt;What a shame&lt;/a&gt;.). Undo macht die zuletzt gemachte Änderung rückgängig und ist damit der beste Freund von notirisch fehleranfälligen Menschen. E bringt Undo auf das nächste Level: Denn neben dem normalen Undo-Befehl gibt es noch eine komplette Übersicht aller jemals an einem Dokument gemachten Änderungen, komplett mit verschiedenen Pfaden, die zu verschiedenen Zeiten genommen wurden kompakt und übersichtlich verpackt in einem fantastischen Baumdiagramm.
Dazu kommen ein riesiger Haufen Features, die eigentlich jedes Programm haben sollte, welche man aber nur viel zu selten findet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inkrementielle Suche mit sofortiger Ergebnisvorschau und Unterstützung von Regulären Ausdrücken!&lt;/li&gt;
&lt;li&gt;Direkte Unterstützung von Cygwin für alle möglichen Skriptsprachen!&lt;/li&gt;
&lt;li&gt;Syntax-Highlighting für so ziemlich jede denkbare Sprache!&lt;/li&gt;
&lt;li&gt;Unterstützung für Snippets!&lt;/li&gt;
&lt;li&gt;Multiline-Editing!&lt;/li&gt;
&lt;li&gt;Kontinuierliche Weiterentwicklung des Editors!&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wer mehr wissen will, der surfe nach &lt;a href="http://e-texteditor.com/index.html"&gt;e-texteditor.com&lt;/a&gt; und schaue sich dort den Screencast und den Blog an, lade sich die Demo herunter oder suche im Internet nach Reviews zu E.&lt;/p&gt;
&lt;p&gt;Selbst ich, als eingefleischter Textmate-Benutzer halte E als meinen heimlichen Lieblingseditor, denn schließlich kann er alles, was Textmate kann (und das ist schon enorm gut) und dazu noch eine gute Latte mehr. Wer, wie ich, eigentlich seinen Tag nur mit (a) surfen und (b) tippen verbringt, sollte wirklich darüber nachdenken, ein wenig Geld für einen guten Texteditor auszugeben. Es lohnt sich, und E ist ohne Frage einer der Besten. Und jetzt wird er Open Source. Ich bin begeistert!&lt;/p&gt;</summary><category term="text-editor"></category></entry><entry><title>Western Digital Festplatten-Umtausch mit Überraschungen</title><link href="http://bastibe.de/western-digital-festplatten-umtausch-mit-uberraschungen.html" rel="alternate"></link><updated>2009-03-19T21:17:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-19:western-digital-festplatten-umtausch-mit-uberraschungen.html</id><summary type="html">&lt;p&gt;&lt;img alt="Western Digital MyBook" src="images/2009-03/festplatte.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Ich hatte mir vor einer Weile eine externe Festplatte nur für TimeMachine gekauft. Denn TimeMachine ist super, die einzige Backup-Lösung die ganz bewusst nie in Erscheinung tritt es sei denn man braucht sie. TimeMachine läuft leise und unbeachtet im Hintergrund, und gibt mir dieses flauschige Gefühl von Sicherheit, quasi das unsicht- und spürbare Kondom der Computerwelt (bzw. Apple-Welt).&lt;/p&gt;
&lt;p&gt;...Bis ich einmal den fatalen Fehler beging, meine externe Festplatte HOCHZUHEBEN. Nicht ruckartig, nicht gewaltsam, sondern tatsächlich sehr sanft, aber wohl gerade zu einem ungünstigen Zeitpunkt, denn die Festplatte gab ein leises Klick von sich und hörte auf zu funktionieren.&lt;/p&gt;
&lt;p&gt;Es handelt sich hierbei um eine externe Festplatte der Marke Western Digital MyBook mit 500 Gigabytes, gekauft bei Norskit. Ein Anruf beim Verkäufer ergab, dass dies eine alte Bestellung (weltbewegende 9 Monate) sei und ich daher bei einer anderen Nummer anrufen sollte. Eine sehr freundliche Mitarbeiterin teilte mir dort mit, dass die Firma leider Insolvent sei und ich meine Supportanfrage daher an den Hersteller richten sollte. Und was soll ich sagen? EIN GLÜCK, dass sie das sagte!&lt;/p&gt;
&lt;p&gt;Denn auf der Webseite von Western Digital gibt es nicht nur eine Support-Telefonnummer, sondern gleich ein komplettes austausch-Programm für Festplatten, welches vollkommen automatisiert abläuft: Man gibt die Modellnummer seiner Festplatte und -für Notfälle- seine Email-Adresse an und bekommt sofort eine neue Festplatte zugeschickt, mit der einzigen Auflage, die alte, defekte Platte innerhalb von 30 Tagen einzuschicken. Und tatsächlich wurde die neue Platte prompt am nächsten Tag verschickt und kam heute pünktlich per UPS bei mir an.&lt;/p&gt;
&lt;p&gt;Faszinierend, so wünsche ich mir Kundenservice. Der einzige Wermutstropfen ist, dass Western Digital offenbar nicht sehr überzeugt von der Ausfallsicherheit seiner Festplatten ist, wenn sie so viel Infrastruktur für den einfachen Austausch bereitstellen... Na egal, ich will mal nicht meckern ;-)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nachschlag:&lt;/strong&gt; Es stellt sich heraus, die neue Festplatte unterscheidet sich ein wenig von der alten: Sie ist silber statt schwarz und hat zwei Firewire 800 Anschlüsse anstatt Firewire 400 -- ein Glück, dass auch Kabel mitgeliefert wurden, sonst könnte ich sie jetzt nicht anschließen!&lt;/p&gt;</summary><category term="computers"></category></entry><entry><title>Debugging und GCC auf Windows</title><link href="http://bastibe.de/debugging-und-gcc-auf-windows.html" rel="alternate"></link><updated>2009-03-15T15:10:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-15:debugging-und-gcc-auf-windows.html</id><summary type="html">&lt;p&gt;&lt;img alt="Code" src="images/2009-03/code.png" /&gt;&lt;/p&gt;
&lt;p&gt;So, jetzt habe ich mein Mex-File zum Einlesen beliebiger Audiodateien endlich lauffähig auf Windows und Mac. Leider werde ich nicht dafür bezahlt, auch noch eine Linux-Version zu bauen, aber falls Interesse besteht, versuche ich mich vielleicht einmal daran.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/State_of_the_Union"&gt;The State of The Union&lt;/a&gt;: Kleine Dateien einlesen, kein Problem. Exotische Formate einlesen, kein Problem. Metadaten auslesen, kein Problem. Dateigröße, Bitrate und Samplerate auslesen, ein kleines Problem, da diese Parameter bei komprimierten Formaten nicht unbedingt fest stehen. Große Dateien einlösen, auf dem Mac kein Problem, auf Windows… nun ja, es dauert. Eine WAV-Datei von 5:30 min einzulesen, dauert mit Windows momentan ca. eine Stunde. Das kann nicht sein, in der Zeit habe ich die Datei dem Programm vorgelesen, wenn es sein muss.&lt;/p&gt;
&lt;p&gt;Also, was ist da faul? Jetzt heißt es debuggen: &lt;a href="http://de.wikipedia.org/wiki/GNU_Debugger"&gt;GDB&lt;/a&gt; ist mein Freund, aber leider spreche ich seine Sprache nicht, also Oldschool-Debugging mit &lt;a href="http://www.cplusplus.com/reference/clibrary/cstdio/printf.html"&gt;printf()&lt;/a&gt; (bzw. &lt;a href="http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mexprintf.html"&gt;mexPrintf()&lt;/a&gt;; Aber da &lt;code&gt;#define printf mexPrintf&lt;/code&gt; ist das das selbe). Blöd nur, dass Matlab selbst entscheidet, wann es meine Printfs auf den Bildschirm schreibt und es sich dazu entschlossen hat, dies immer erst nach dem Ausführen der Datei, also erst nachdem es bereits eine Stunde gearbeitet hat, zu tun. Einiges Hirnen später konnte ich Matlab endlich über eine Kombination aus &lt;a href="http://de.wikipedia.org/wiki/Typumwandlung"&gt;Typecasts&lt;/a&gt;, &lt;a href="http://www.cplusplus.com/reference/clibrary/cstdio/sprintf.html"&gt;sprintf&lt;/a&gt; und &lt;a href="http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mexwarnmsgtxt.html"&gt;mexWarnMsgTxt&lt;/a&gt; dazu überreden, wenigstens sporadisch ein paar Informationen herauszugeben.&lt;/p&gt;
&lt;p&gt;Das Ergebnis:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Die Datei funktioniert tadellos, ist nur ein wenig langsam (s.o.)&lt;/li&gt;
&lt;li&gt;Wer ist schuld? &lt;a href="http://www.cplusplus.com/reference/clibrary/cstdlib/realloc.html"&gt;Realloc&lt;/a&gt; ist schuld!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Das kam überraschend! Offenbar ist realloc auf dem Mac um mehrere Größenordnungen performanter als auf &lt;a href="http://www.mingw.org/"&gt;MinGW&lt;/a&gt;/Windows, denn die selbe Anwendung, die auf dem Mac ca. eine Sekunde braucht, braucht auf Windows eine Stunde! Und das allein wegen realloc! (Eigentlich: eine halbe Stunde wegen realloc, der Rest ist der Tatsache geschuldet, dass Windows in einer &lt;a href="http://www.vmware.com/de/products/fusion/"&gt;VM&lt;/a&gt; läuft)&lt;/p&gt;
&lt;p&gt;Bei WAV-Dateien werden immer 2048 Samples an einem Stück ausgelesen. Danach verwende ich ein realloc, um meinen haupt-Speicherpuffer um diese Größe zu vergrößern und kopiere die neuen Daten dort hinein. Bei meinen 5:30 min macht das bei einer Samplerate von 44100 kHz und zwei Kanälen ca. 15000 Aufrufe von realloc. Komprimierte Datenformate haben üblicherweise kleinere Frames und damit noch einmal wesentlich mehr realloc-Aufrufe.
Der Plan ist also, jetzt statt häufiger, kleiner realloc-Aufrufe, seltenere, größere Aufrufe zu machen. Zeit für ein paar Experimente:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Gr&lt;/span&gt;&lt;span class="err"&gt;öß&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;   &lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Aufrufe&lt;/span&gt;   &lt;span class="n"&gt;ben&lt;/span&gt;&lt;span class="err"&gt;ö&lt;/span&gt;&lt;span class="n"&gt;tigte&lt;/span&gt; &lt;span class="n"&gt;Zeit&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;       &lt;span class="mi"&gt;15000&lt;/span&gt;               &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;      &lt;span class="mi"&gt;470&lt;/span&gt;                 &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;131072&lt;/span&gt;     &lt;span class="mi"&gt;240&lt;/span&gt;                 &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;262144&lt;/span&gt;     &lt;span class="mi"&gt;120&lt;/span&gt;                 &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;524288&lt;/span&gt;     &lt;span class="mi"&gt;60&lt;/span&gt;                  &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1048576&lt;/span&gt;    &lt;span class="mi"&gt;30&lt;/span&gt;                  &lt;span class="mf"&gt;10.5&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2097152&lt;/span&gt;    &lt;span class="mi"&gt;15&lt;/span&gt;                  &lt;span class="mf"&gt;7.3&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4194304&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;                   &lt;span class="mf"&gt;5.1&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8388608&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;                   &lt;span class="mf"&gt;4.2&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Das Spannende ist: Ich ändere durch meine Methodik praktisch nichts außer der Anzahl und Größe der realloc-Aufrufe, aber man erkennt einen eindeutigen Zusammenhang zwischen Performance und Anzahl der Aufrufe, ergo ist realloc der alleinige Schuldige für mein Performanceproblem auf Windows.&lt;/p&gt;
&lt;p&gt;An dieser Stelle fiel mir ein, dass ich bereits an früherer Stelle einmal die gesamte Länge des Audio-Streams anhand der Metadaten geschätzt hatte. Durch eine somit vorgenommene Prä-Allokation des gesamten Speichers lässt sie die Laufzeit weiter auf 2.2 s drücken. Das ist immernoch nicht einmal halb so schnell wie auf OSX (0.9 s), aber das mag auch an der virtuellen Maschine liegen.&lt;/p&gt;
&lt;p&gt;Mehr als diesen anecdotal Evidence kann ich nicht anbieten, aber ich bin mir sicher, dass ich ab jetzt die Finger von inkrementiellen Speichervergrößerungen auf MinGW/Windows lassen werde. Ist das in MSVC ähnlich schlimm, oder habe ich da etwa einen Bug entdeckt?&lt;/p&gt;</summary><category term="compiling"></category><category term="computers"></category></entry><entry><title>Get a Mac</title><link href="http://bastibe.de/get-a-mac.html" rel="alternate"></link><updated>2009-03-14T10:24:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-14:get-a-mac.html</id><summary type="html">&lt;p&gt;&lt;img alt="OSX" src="images/2009-03/osx.png" /&gt;&lt;/p&gt;
&lt;p&gt;Bei meinem üblichen, Samstagmorgendlichen, bettlägrigen Web-Rundgang habe ich heute drei sehr nette Artikel von David Alison gefunden, einem Windows-Programmierer und selbsternanntem Microsoft-Fanboy, der sich einen Mac zulegt und unverhofft glücklich damit wird. So glücklich sogar, dass er inzwischen mehr oder weniger ein Mac-only-User geworden ist.&lt;/p&gt;
&lt;p&gt;Ziemlich genau wie ihm ging es mir auch.&lt;/p&gt;
&lt;p&gt;Teil 1: &lt;a href="http://www.davidalison.com/2008/02/hardcore-windows-guy-switches-to-mac.html"&gt;A hardcore Windows guy gets a Mac&lt;/a&gt;&lt;br /&gt;
Teil 2: &lt;a href="http://www.davidalison.com/2008/04/mac-after-two-months-of-mac-heres-why-i.html"&gt;After two months of Mac, here's why I switched&lt;/a&gt;&lt;br /&gt;
Teil 3: &lt;a href="http://www.davidalison.com/2009/03/switching-from-windows-to-mac-one-year.html"&gt;Switching from Windows to Mac - One Year Later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wens interessiert: Das ist eine sehr hübsche Einführung darin, warum Macs toll sind. Viel besser als alles, was ich dazu schreiben würde oder &lt;a href="http://www.meinstudi.de/basti/?p=49"&gt;bereits&lt;/a&gt; &lt;a href="http://www.meinstudi.de/basti/?p=4"&gt;getan&lt;/a&gt; &lt;a href="http://www.meinstudi.de/basti/?p=24"&gt;habe&lt;/a&gt;.&lt;/p&gt;</summary><category term="computers"></category></entry><entry><title>Kompilieren auf Windows</title><link href="http://bastibe.de/kompilieren-auf-windows.html" rel="alternate"></link><updated>2009-03-12T17:14:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-12:kompilieren-auf-windows.html</id><summary type="html">&lt;p&gt;&lt;img alt="Open Source Rules!" src="images/2009-03/open_source_rules.png" /&gt;&lt;/p&gt;
&lt;p&gt;Seit einigen Wochen arbeite ich an einem kleinen Projekt: Eine Matlab-Funktion, die, ähnlich wie die standard-Funktion &lt;a href="http://www.mathworks.com/access/helpdesk_r13/help/techdoc/ref/wavread.html"&gt;wavread()&lt;/a&gt;, Audiodateien einlesen kann. Aber nicht irgendwelche Audiofiles, sondern ALLE MÖGLICHEN Audiofiles. Wie geht das? Jeder kennt &lt;a href="http://www.videolan.org/vlc/"&gt;VLC&lt;/a&gt;, den Video-Player, der so ziemlich jedes Video öffnen kann, das man ihm vorsetzt, selbst wenn man überhaupt keine Codecs installiert hat. VLC basiert auf &lt;a href="http://de.wikipedia.org/wiki/FFmpeg"&gt;FFmpeg&lt;/a&gt;, einem Open-Source Programm, welches Funktionen bereit stellt, um eben alle möglichen Mediendaten zu öffnen.&lt;/p&gt;
&lt;p&gt;Und da FFmpeg freie Software ist, kann man sie auch für andere Dinge verwenden, etwa, um mit Matlab Audiodateien zu öffnen. Fehlt noch eine Verbindung zwischen Matlab und den FFmpeg-C-Bibliotheken, und die gibt es in Form von &lt;a href="http://www.mathworks.com/support/tech-notes/1600/1605.html#intro"&gt;Mex&lt;/a&gt;, der C-Schnittstelle von Matlab. Feine Sache, zwar hat es eine Weile gedauert, bis ich mich in libavformat und libavcodec eingearbeitet hatte (die beiden wichtigsten FFmpeg-Bibliotheken), aber im Endeffekt lief das alles sehr schmerzfrei -- und das, obwohl ich bisher Mex-Kompilieren mit Matlab immer als eine grausige Beschäftigung in Erinnerung hatte, gespickt von kryptischen Kompiler-Fehlern und hässlichen Notlösungen.&lt;/p&gt;
&lt;p&gt;Bumms, Zack, kaum hatte ich mich versehen, hatte ich ein lauffähiges, tadellos funktionierendes &lt;a href="http://en.wikipedia.org/wiki/MATLAB#Calling_C_and_Fortran_functions"&gt;Mex-File&lt;/a&gt; auf meinem Mac liegen. Damit hatte ich nicht gerechnet. Also sofort die momentane Euphorie ausnutzen und weiter zu Schritt 2, das Ganze nochmal auf Windows. Meine Probleme, Windows so einzurichten, dass ich endlich Kompilieren kann, &lt;a href="http://www.daskrachen.com/2009/03/great-scott.html"&gt;hatte ich ja schon berichtet&lt;/a&gt;. Ich hatte also Visual Studio 2005 installiert, um Matlab zufrieden zu stellen und einen anständigen Kompiler auf dem System zu haben. Aber war ja klar, MSVC macht wieder sein eigenes Ding und nichts ist mit Standardkonformität und Trallalla: Keine &lt;a href="http://de.wikipedia.org/wiki/C99#C99"&gt;C99&lt;/a&gt;-Unterstützung, also keine Variablendeklarationen mitten im Code und keine stdint.h oder inttype.h. Ein Glück, es gibt wieder ein wenig mehr Free Software, die wenigstens &lt;a href="http://code.google.com/p/msinttypes/"&gt;letztere Lücke schließt&lt;/a&gt;. Dennoch; Ich bekomme mein mex-File nicht zum Laufen. Es ist wie verflucht, kaum setze ich mich an eine Windows-Maschine zum Programmieren, fällt meine Produktivität auf das Niveau eines Backsteins.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="http://sourceforge.net/projects/gnumex"&gt;gnumex&lt;/a&gt;, noch ein weiteres Stück FOSS, das es ermöglicht, GCC als Mex-Kompiler zu verwenden, AUF WINDOWS. Um die Dinge zu vereinfachen, verwendete ich die &lt;a href="http://www.mingw.org/"&gt;MinGW&lt;/a&gt;-Variante und kaum war diese Hürde genommen... lief alles. Einfach so. Wahrscheinlich bin ich ein Dickschädel und habe einfach nicht die Geistesschärfe, mit Windows-Kompilern zu arbeiten, aber mir scheint, alles was ich diesbezüglich anfasse und das nicht GCC heißt ist zum Scheitern verurteilt. Ein Glück, dass es die vielen klugen Jungen und Mädchen gibt, die so wunderbare freie Software schreiben, die mir das Leben so viel einfacher macht!&lt;/p&gt;
&lt;p&gt;Eine Fortsetzung kommt noch...&lt;/p&gt;</summary><category term="compiling"></category><category term="matlab"></category></entry><entry><title>Great Scott</title><link href="http://bastibe.de/great-scott.html" rel="alternate"></link><updated>2009-03-05T13:55:00+01:00</updated><author><name>Bastian Bechtold</name></author><id>tag:bastibe.de,2009-03-05:great-scott.html</id><summary type="html">&lt;h2&gt;Vom Sinn und Unsinn, ein Cross-Platform-Compiling-Matlab-System aufzubauen&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Bitte warten..." src="images/2009-03/bitte_warten.png" /&gt;&lt;/p&gt;
&lt;p&gt;Mal wieder: Ich schreibe ein Stück Software für meinen Nebenjob bei meinem Signalverarbeitung-Prof. Diesmal geht es darum, beliebige Audio-Files in Matlab einlesen zu können. Perfekt geeignet ist dafür die selbe Bibliothek, die auch von VLC verwendet wird, libavcodec/libavformat. Das ist eine normale C-Bibliothek, es braucht also nur noch ein kleines mex-File, um ihre Funktionalität für Matlab zur Verfügung zu stellen. Klappt auch wunderbar. Auf dem Mac.&lt;/p&gt;
&lt;p&gt;Schritt zwei ist dann, das Ganze auf Windows und Linux zum Laufen zu bringen. Eigentlich kein Problem, denn ich habe keine wilden Dinge getan und die Libraries selbst sind wunderbar Cross-Platform, es gibt sie sogar schon vorkompiliert für praktisch jedes denkbare Betriebssystem.&lt;/p&gt;
&lt;p&gt;Also, was brauche ich? Zwei Dinge: Matlab und einen C-Compiler (der mitgelieferte LLC-Compiler macht mein Hirn bluten). Matlab zu installieren ist meiner Erfahrung nach schmerzhaft. Bigtime. Nicht, weil Matlab schwer zu installieren wäre, sondern, weil Mathworks nur zwei Installationen pro Schachtel erlaubt, was für meine drei Betriebssysteme zu gewissen Problemen führt. Außerdem müsste ich meine eine Lizenz erst für die Windows-installation umschreiben lassen, und... ach, Schmerzen. Offenbar habe ich die Jungs dort aber schon derart häufig mit Lizenzanfragen genervt, dass sie mich einfach als hoffnungslos aufgegeben haben, denn dieses Mal musste ich keine neue Lizenz erstellen lassen, sondern einfach installieren, Passwort eingeben, und los. Mein Account meldet jetzt, dass ich fünf gleichzeitige Installationen hätte (von zwei erlaubten). Mir solls Recht sein.&lt;/p&gt;
&lt;p&gt;Außerdem: ein aktuelles Linux muss her. VMWare sei Dank, lauert im Linux-Installieren nicht mehr der Schrecken, im Zweifelsfall den kompletten Festplatteninhalt zu verlieren, sondern nur noch, an akuter Progressbar-itis zu ersticken. War ja klar, dass Autoupdate sich diesen Nachmittag aussucht, um meine Ubuntu-VM hoffnungslos zu zerstören. Also, neues Ubuntu heruntergeladen, neu installiert, neu Updates aufgespielt, zwei Stunden Lifetime verloren. Immerhin: es hat fehlerfrei funktioniert, das ist was Neues. Matlab hinterher, VMWare Tools dazu, fertig ist die Development-Kiste. Jetzt fehlt nur noch eine Verbindung zu meinem Development-Verzeichnis, damit ich auf meine Dateien zugreifen kann. Fehlanzeige. Dukommsthiernichrein. Na Toll.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Der Upgradepatch kann nicht installiert werden..." src="images/2009-03/upgradepatch.png" /&gt;&lt;/p&gt;
&lt;p&gt;Also weiter zu Windows. Frühere Versuche ergaben bereits, dass ich Matlab nicht dazu bewegen kann, (a) GCC als Compiler zu nehmen oder (b) das bereits installierte Microsoft Visual Studio C++ .Net Professional Directors Cut Special Edition 2008 Ultimate zu verwenden. Nähere Nachforschungen zeigen: Zu neu, Kennternich. Geht nur bis MSVC Jahrgang 2005. Also: Neues MSVC deinstallieren, Altes installieren. ich freue mich immer darauf, MSVC zu deinstallieren, denn es besteht lediglich aus kompakten 12 Programmen, die sich zwar alle auf einem Haufen Installieren- jedoch nicht De-Installieren lassen. Immerhin ist es dank MSDNAA-Membership nicht schwer, an die alten Versionen heranzukommen. Und klar, die Systemsteuerung lässt einen auch immer nur ein Programm auf einmal deinstallieren. Multitasking ist nicht. Dank Syncplicity kann Windows die Zwischenzeit immerhin dazu verwenden, all meine Development-Files auf den Rechner zu laden. Yay!
Das Schöne an Fortschrittsbalken ist ja, sie zeigen Fortschritt. Damit haben sie einen klaren Vorteil gegenüber etwa Dachbalken oder den Bittewartenpunktpunktpunkt-Balken, die die Microsoft SQL Server 2008-Deinstallation stolz herumzeigt. Die fühlt sich wohl sehr wichtig, denn sie rödelt eine starke halbe Stunde im Bitte-Warten-Modus herum. So mag ich Deinstallationen.&lt;/p&gt;
&lt;p&gt;To be continued...&lt;/p&gt;</summary><category term="computers"></category></entry></feed>